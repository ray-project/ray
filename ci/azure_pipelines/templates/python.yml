# This template includes the basic steps needed for
# setting up python in different jobs. The version
# of python to use is expected in the environment
# variable python.version
steps:
- task: PipAuthenticate@1
  displayName: 'Pip Authenticate'
  inputs:
    artifactFeeds: 'socrates-feed, Machine%20Teaching/ray-feed'
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'
# Cache the libraries
# - task: Cache@2
#   inputs:
#     key: '"$(python.version)" | "$(Agent.OS)" | ci/travis/install-dependencies.sh | ci/travis/ci.sh'
#     path: /usr/share/miniconda/lib
#   displayName: Cache pip packages
#   continueOnError: true
#   condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))
# - task: Cache@2
#   inputs:
#     key: '"$(python.version)" | "$(Agent.OS)" | ci/travis/install-dependencies.sh | ci/travis/ci.sh'
#     path: /usr/local/miniconda/lib
#   displayName: Cache pip packages
#   continueOnError: true
#   condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'))
- script: |
    pip install --upgrade pip
    pip install pytest pytest-azurepipelines
    pip install wheel
    pip install twine
  displayName: 'Install dependencies'
- script: |
    set -e
    echo "BUILD_BUILDID: $BUILD_BUILDID"
    VERSION_SUFIX="$(echo $BUILD_BUILDID | sed -E 's/[- ]/_/g')"
    echo "VERSION_SUFIX: $VERSION_SUFIX"
    VERSION_FILE="$BUILD_SOURCESDIRECTORY/python/ray/__init__.py"
    if [[ "$BUILD_SOURCEBRANCH" == *"master"* ]] || [[ "$BUILD_SOURCEBRANCH" == *"releases/"* ]]; then
      VERSION_SUFIX=".${VERSION_SUFIX}"
      echo "Release generation detected. The VERSION_SUFIX will be directly appended."
    else
      VERSION_SUFIX=".dev${VERSION_SUFIX}"
      echo "Dev Release generation detected. The VERSION_SUFIX will be prefixed with the dev tag."
    fi
    if [[ $AGENT_OS == "Darwin" ]]; then
      sed -i -e -E "s+__version__ = (['\"])([0-9]{1}\.[0-9]{1}\.[0-9]{1})(\.dev)?[^'\"]*(['\"])+__version__ = \1\2$VERSION_SUFIX\4+1" $VERSION_FILE
    else
      sed -ier "s+__version__ = \(['\"]\)\([0-9]\{1\}\.[0-9]\{1\}\.[0-9]\{1\}\)\(\.dev\)\?[^'\"]*\(['\"]\)+__version__ = \1\2$VERSION_SUFIX\4+1" $VERSION_FILE
    fi
    cat $VERSION_FILE | grep "__version__ ="
  displayName: 'Change version of Ray to use'
- task: PythonScript@0
  inputs:
    scriptSource: 'inline'
    script: |
      import platform
      print(platform.platform())
      try:
        import wheel.pep425tags
        print(wheel.pep425tags.get_impl_ver())
        print(wheel.pep425tags.get_abi_tag())
        print(wheel.pep425tags.get_platform(None))
        tags = wheel.pep425tags.get_supported(None)
        print(tags)
        print(('cp36', 'cp36m', 'macosx_10_14_x86_64') in tags)
      except Exception as ex:
        print(ex)
      print(platform.mac_ver())
    failOnStderr: false
  displayName: 'Print Python System info'
  continueOnError: true
