<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="874" onload="init(evt)" viewBox="0 0 1200 874" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="874" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record --pid 947884 --native</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="863.00"> </text><svg id="frames" x="10" width="1180" total_samples="1709"><g><title>&lt;module&gt; (ray/_private/workers/default_worker.py:282) (85 samples, 4.97%)</title><rect x="0.0000%" y="68" width="4.9737%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="85"/><text x="0.2500%" y="78.50">&lt;modul..</text></g><g><title>main_loop (ray/_private/worker.py:884) (85 samples, 4.97%)</title><rect x="0.0000%" y="84" width="4.9737%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="85"/><text x="0.2500%" y="94.50">main_l..</text></g><g><title>run_task_loop (ray/_raylet.so) (85 samples, 4.97%)</title><rect x="0.0000%" y="100" width="4.9737%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="85"/><text x="0.2500%" y="110.50">run_ta..</text></g><g><title>ray::core::CoreWorkerProcess::RunTaskExecutionLoop (ray/_raylet.so) (85 samples, 4.97%)</title><rect x="0.0000%" y="116" width="4.9737%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="85"/><text x="0.2500%" y="126.50">ray::c..</text></g><g><title>ray::core::CoreWorkerProcessImpl::RunWorkerTaskExecutionLoop (ray/_raylet.so) (85 samples, 4.97%)</title><rect x="0.0000%" y="132" width="4.9737%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="85"/><text x="0.2500%" y="142.50">ray::c..</text></g><g><title>ray::core::CoreWorker::RunTaskExecutionLoop (ray/_raylet.so) (85 samples, 4.97%)</title><rect x="0.0000%" y="148" width="4.9737%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="85"/><text x="0.2500%" y="158.50">ray::c..</text></g><g><title>boost::asio::io_context::run (ray/_raylet.so) (85 samples, 4.97%)</title><rect x="0.0000%" y="164" width="4.9737%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="85"/><text x="0.2500%" y="174.50">boost:..</text></g><g><title>boost::asio::detail::scheduler::run (ray/_raylet.so) (85 samples, 4.97%)</title><rect x="0.0000%" y="180" width="4.9737%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="85"/><text x="0.2500%" y="190.50">boost:..</text></g><g><title>boost::asio::detail::scheduler::do_run_one (ray/_raylet.so) (85 samples, 4.97%)</title><rect x="0.0000%" y="196" width="4.9737%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="85"/><text x="0.2500%" y="206.50">boost:..</text></g><g><title>boost::asio::detail::wait_handler&lt;ray::PeriodicalRunner::DoRunFnPeriodicallyInstrumented(std::function&lt;void ()&gt; const&amp;, boost::date_time::subsecond_duration&lt;boost::posix_time::time_duration, (long)1000&gt;, std::shared_ptr&lt;boost::asio::basic_deadline_timer&lt;boost::posix_time::ptime, boost::asio::time_traits&lt;boost::posix_time::ptime&gt;, boost::asio::any_io_executor&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)::{lambda(boost::system::error_code const&amp;)#1}, boost::asio::any_io_executor&gt;::do_complete (ray/_raylet.so) (84 samples, 4.92%)</title><rect x="0.0585%" y="212" width="4.9152%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="84"/><text x="0.3085%" y="222.50">boost:..</text></g><g><title>EventTracker::RecordExecution (ray/_raylet.so) (84 samples, 4.92%)</title><rect x="0.0585%" y="228" width="4.9152%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="84"/><text x="0.3085%" y="238.50">EventT..</text></g><g><title>std::_Function_handler&lt;void (), ray::PeriodicalRunner::DoRunFnPeriodicallyInstrumented(std::function&lt;void ()&gt; const&amp;, boost::date_time::subsecond_duration&lt;boost::posix_time::time_duration, (long)1000&gt;, std::shared_ptr&lt;boost::asio::basic_deadline_timer&lt;boost::posix_time::ptime, boost::asio::time_traits&lt;boost::posix_time::ptime&gt;, boost::asio::any_io_executor&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)::{lambda(boost::system::error_code const&amp;)#1}::operator()(boost::system::error_code const&amp;) const::{lambda()#1}&gt;::_M_invoke (ray/_raylet.so) (84 samples, 4.92%)</title><rect x="0.0585%" y="244" width="4.9152%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="84"/><text x="0.3085%" y="254.50">std::_..</text></g><g><title>ray::PeriodicalRunner::DoRunFnPeriodicallyInstrumented (ray/_raylet.so) (84 samples, 4.92%)</title><rect x="0.0585%" y="260" width="4.9152%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="84"/><text x="0.3085%" y="270.50">ray::P..</text></g><g><title>ray::core::CoreWorker::RunTaskExecutionLoop()::{lambda()#1}::operator() const (ray/_raylet.so) (84 samples, 4.92%)</title><rect x="0.0585%" y="276" width="4.9152%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="84"/><text x="0.3085%" y="286.50">ray::c..</text></g><g><title>std::_Function_handler&lt;ray::Status(), ray::Status (*)()&gt;::_M_invoke (ray/_raylet.so) (84 samples, 4.92%)</title><rect x="0.0585%" y="292" width="4.9152%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="84"/><text x="0.3085%" y="302.50">std::_..</text></g><g><title>_raylet_check_signals (ray/_raylet.so) (84 samples, 4.92%)</title><rect x="0.0585%" y="308" width="4.9152%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="84"/><text x="0.3085%" y="318.50">_rayle..</text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libpthread-2.31.so) (84 samples, 4.92%)</title><rect x="0.0585%" y="324" width="4.9152%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="84"/><text x="0.3085%" y="334.50">pthrea..</text></g><g><title>do_exec_compiled_task (ray/dag/compiled_dag_node.py:115) (2 samples, 0.12%)</title><rect x="4.9737%" y="388" width="0.1170%" height="15" fill="rgb(210,31,41)" fg:x="85" fg:w="2"/><text x="5.2237%" y="398.50"></text></g><g><title>_pickle_loads_impl (_pickle.c:7922) (2 samples, 0.12%)</title><rect x="5.3833%" y="452" width="0.1170%" height="15" fill="rgb(221,200,47)" fg:x="92" fg:w="2"/><text x="5.6333%" y="462.50"></text></g><g><title>begin_read (ray/experimental/collective_channel.py:102) (5 samples, 0.29%)</title><rect x="5.2662%" y="404" width="0.2926%" height="15" fill="rgb(226,26,5)" fg:x="90" fg:w="5"/><text x="5.5162%" y="414.50"></text></g><g><title>_deserialize (ray/experimental/collective_channel.py:126) (5 samples, 0.29%)</title><rect x="5.2662%" y="420" width="0.2926%" height="15" fill="rgb(249,33,26)" fg:x="90" fg:w="5"/><text x="5.5162%" y="430.50"></text></g><g><title>_pickle_loads (_pickle.c.h:834) (3 samples, 0.18%)</title><rect x="5.3833%" y="436" width="0.1755%" height="15" fill="rgb(235,183,28)" fg:x="92" fg:w="3"/><text x="5.6333%" y="446.50"></text></g><g><title>array_add (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (8 samples, 0.47%)</title><rect x="5.6758%" y="420" width="0.4681%" height="15" fill="rgb(221,5,38)" fg:x="97" fg:w="8"/><text x="5.9258%" y="430.50"></text></g><g><title>ufunc_generic_fastcall (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (8 samples, 0.47%)</title><rect x="5.6758%" y="436" width="0.4681%" height="15" fill="rgb(247,18,42)" fg:x="97" fg:w="8"/><text x="5.9258%" y="446.50"></text></g><g><title>try_trivial_single_output_loop (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (2 samples, 0.12%)</title><rect x="6.0269%" y="452" width="0.1170%" height="15" fill="rgb(241,131,45)" fg:x="103" fg:w="2"/><text x="6.2769%" y="462.50"></text></g><g><title>array_tobytes (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (2 samples, 0.12%)</title><rect x="6.1439%" y="420" width="0.1170%" height="15" fill="rgb(249,31,29)" fg:x="105" fg:w="2"/><text x="6.3939%" y="430.50"></text></g><g><title>begin_read (ray/experimental/collective_channel.py:103) (13 samples, 0.76%)</title><rect x="5.5588%" y="404" width="0.7607%" height="15" fill="rgb(225,111,53)" fg:x="95" fg:w="13"/><text x="5.8088%" y="414.50"></text></g><g><title>debug (logging/__init__.py:1433) (5 samples, 0.29%)</title><rect x="6.9631%" y="420" width="0.2926%" height="15" fill="rgb(238,160,17)" fg:x="119" fg:w="5"/><text x="7.2131%" y="430.50"></text></g><g><title>isEnabledFor (logging/__init__.py:1697) (2 samples, 0.12%)</title><rect x="7.1387%" y="436" width="0.1170%" height="15" fill="rgb(214,148,48)" fg:x="122" fg:w="2"/><text x="7.3887%" y="446.50"></text></g><g><title>begin_read (ray/experimental/collective_channel.py:82) (17 samples, 0.99%)</title><rect x="6.3780%" y="404" width="0.9947%" height="15" fill="rgb(232,36,49)" fg:x="109" fg:w="17"/><text x="6.6280%" y="414.50"></text></g><g><title>recv (ray/util/collective/collective.py:706) (3 samples, 0.18%)</title><rect x="7.4898%" y="420" width="0.1755%" height="15" fill="rgb(209,103,24)" fg:x="128" fg:w="3"/><text x="7.7398%" y="430.50"></text></g><g><title>_check_single_tensor_input (ray/util/collective/collective.py:815) (2 samples, 0.12%)</title><rect x="7.5483%" y="436" width="0.1170%" height="15" fill="rgb(229,88,8)" fg:x="129" fg:w="2"/><text x="7.7983%" y="446.50"></text></g><g><title>_check_and_get_group (ray/util/collective/collective.py:780) (6 samples, 0.35%)</title><rect x="7.6653%" y="436" width="0.3511%" height="15" fill="rgb(213,181,19)" fg:x="131" fg:w="6"/><text x="7.9153%" y="446.50"></text></g><g><title>is_group_initialized (ray/util/collective/collective.py:118) (5 samples, 0.29%)</title><rect x="7.7238%" y="452" width="0.2926%" height="15" fill="rgb(254,191,54)" fg:x="132" fg:w="5"/><text x="7.9738%" y="462.50"></text></g><g><title>is_group_exist (ray/util/collective/collective.py:80) (2 samples, 0.12%)</title><rect x="7.8994%" y="468" width="0.1170%" height="15" fill="rgb(241,83,37)" fg:x="135" fg:w="2"/><text x="8.1494%" y="478.50"></text></g><g><title>recv (ray/util/collective/collective.py:707) (9 samples, 0.53%)</title><rect x="7.6653%" y="420" width="0.5266%" height="15" fill="rgb(233,36,39)" fg:x="131" fg:w="9"/><text x="7.9153%" y="430.50"></text></g><g><title>_check_and_get_group (ray/util/collective/collective.py:809) (3 samples, 0.18%)</title><rect x="8.0164%" y="436" width="0.1755%" height="15" fill="rgb(226,3,54)" fg:x="137" fg:w="3"/><text x="8.2664%" y="446.50"></text></g><g><title>_check_rank_valid (ray/util/collective/collective.py:854) (2 samples, 0.12%)</title><rect x="8.2504%" y="436" width="0.1170%" height="15" fill="rgb(245,192,40)" fg:x="141" fg:w="2"/><text x="8.5004%" y="446.50"></text></g><g><title>recv (ray/util/collective/collective.py:708) (4 samples, 0.23%)</title><rect x="8.1919%" y="420" width="0.2341%" height="15" fill="rgb(238,167,29)" fg:x="140" fg:w="4"/><text x="8.4419%" y="430.50"></text></g><g><title>recv (ray/util/collective/collective.py:709) (2 samples, 0.12%)</title><rect x="8.4260%" y="420" width="0.1170%" height="15" fill="rgb(232,182,51)" fg:x="144" fg:w="2"/><text x="8.6760%" y="430.50"></text></g><g><title>recv (ray/util/collective/collective.py:711) (4 samples, 0.23%)</title><rect x="8.5430%" y="420" width="0.2341%" height="15" fill="rgb(231,60,39)" fg:x="146" fg:w="4"/><text x="8.7930%" y="430.50"></text></g><g><title>__init__ (&lt;string&gt;:3) (3 samples, 0.18%)</title><rect x="8.6015%" y="436" width="0.1755%" height="15" fill="rgb(208,69,12)" fg:x="147" fg:w="3"/><text x="8.8515%" y="446.50"></text></g><g><title>unicode_dealloc (python3.8) (3 samples, 0.18%)</title><rect x="9.3622%" y="452" width="0.1755%" height="15" fill="rgb(235,93,37)" fg:x="160" fg:w="3"/><text x="9.6122%" y="462.50"></text></g><g><title>unicode_decode_utf8.constprop.0 (python3.8) (2 samples, 0.12%)</title><rect x="9.5377%" y="452" width="0.1170%" height="15" fill="rgb(213,116,39)" fg:x="163" fg:w="2"/><text x="9.7877%" y="462.50"></text></g><g><title>delta_new (_datetimemodule.c:2444) (13 samples, 0.76%)</title><rect x="9.1281%" y="436" width="0.7607%" height="15" fill="rgb(222,207,29)" fg:x="156" fg:w="13"/><text x="9.3781%" y="446.50"></text></g><g><title>unicode_hash (python3.8) (4 samples, 0.23%)</title><rect x="9.6548%" y="452" width="0.2341%" height="15" fill="rgb(206,96,30)" fg:x="165" fg:w="4"/><text x="9.9048%" y="462.50"></text></g><g><title>delta_new (_datetimemodule.c:2466) (2 samples, 0.12%)</title><rect x="9.8888%" y="436" width="0.1170%" height="15" fill="rgb(218,138,4)" fg:x="169" fg:w="2"/><text x="10.1388%" y="446.50"></text></g><g><title>_Py_DECREF (object.h:470) (2 samples, 0.12%)</title><rect x="9.8888%" y="452" width="0.1170%" height="15" fill="rgb(250,191,14)" fg:x="169" fg:w="2"/><text x="10.1388%" y="462.50"></text></g><g><title>microseconds_to_delta_ex (_datetimemodule.c:1843) (5 samples, 0.29%)</title><rect x="10.0059%" y="468" width="0.2926%" height="15" fill="rgb(239,60,40)" fg:x="171" fg:w="5"/><text x="10.2559%" y="478.50"></text></g><g><title>checked_divmod (_datetimemodule.c:1811) (5 samples, 0.29%)</title><rect x="10.0059%" y="484" width="0.2926%" height="15" fill="rgb(206,27,48)" fg:x="171" fg:w="5"/><text x="10.2559%" y="494.50"></text></g><g><title>recv (ray/util/collective/collective.py:714) (28 samples, 1.64%)</title><rect x="8.7771%" y="420" width="1.6384%" height="15" fill="rgb(225,35,8)" fg:x="150" fg:w="28"/><text x="9.0271%" y="430.50"></text></g><g><title>delta_new (_datetimemodule.c:2527) (7 samples, 0.41%)</title><rect x="10.0059%" y="436" width="0.4096%" height="15" fill="rgb(250,213,24)" fg:x="171" fg:w="7"/><text x="10.2559%" y="446.50"></text></g><g><title>_Py_DECREF (object.h:470) (7 samples, 0.41%)</title><rect x="10.0059%" y="452" width="0.4096%" height="15" fill="rgb(247,123,22)" fg:x="171" fg:w="7"/><text x="10.2559%" y="462.50"></text></g><g><title>recv (ray/util/collective/collective.py:715) (3 samples, 0.18%)</title><rect x="10.4154%" y="420" width="0.1755%" height="15" fill="rgb(231,138,38)" fg:x="178" fg:w="3"/><text x="10.6654%" y="430.50"></text></g><g><title>recv (ray/util/collective/collective_group/gloo_collective_group.py:473) (3 samples, 0.18%)</title><rect x="10.8250%" y="436" width="0.1755%" height="15" fill="rgb(231,145,46)" fg:x="185" fg:w="3"/><text x="11.0750%" y="446.50"></text></g><g><title>_check_cpu_tensors (ray/util/collective/collective_group/gloo_collective_group.py:542) (2 samples, 0.12%)</title><rect x="11.2346%" y="468" width="0.1170%" height="15" fill="rgb(251,118,11)" fg:x="192" fg:w="2"/><text x="11.4846%" y="478.50"></text></g><g><title>_point2point (ray/util/collective/collective_group/gloo_collective_group.py:533) (8 samples, 0.47%)</title><rect x="11.1761%" y="452" width="0.4681%" height="15" fill="rgb(217,147,25)" fg:x="191" fg:w="8"/><text x="11.4261%" y="462.50"></text></g><g><title>_check_cpu_tensors (ray/util/collective/collective_group/gloo_collective_group.py:547) (5 samples, 0.29%)</title><rect x="11.3517%" y="468" width="0.2926%" height="15" fill="rgb(247,81,37)" fg:x="194" fg:w="5"/><text x="11.6017%" y="478.50"></text></g><g><title>get_tensor_device (ray/util/collective/collective_group/gloo_util.py:176) (3 samples, 0.18%)</title><rect x="11.4687%" y="484" width="0.1755%" height="15" fill="rgb(209,12,38)" fg:x="196" fg:w="3"/><text x="11.7187%" y="494.50"></text></g><g><title>__init__ (ray/util/collective/collective_group/gloo_collective_group.py:35) (4 samples, 0.23%)</title><rect x="12.2879%" y="484" width="0.2341%" height="15" fill="rgb(227,1,9)" fg:x="210" fg:w="4"/><text x="12.5379%" y="494.50"></text></g><g><title>pybind11::detail::get_global_type_info (pygloo.so) (7 samples, 0.41%)</title><rect x="12.8730%" y="692" width="0.4096%" height="15" fill="rgb(248,47,43)" fg:x="220" fg:w="7"/><text x="13.1230%" y="702.50"></text></g><g><title>std::unordered_map&lt;std::type_index, pybind11::detail::type_info*, std::hash&lt;std::type_index&gt;, std::equal_to&lt;std::type_index&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt; &gt;::find (pygloo.so) (6 samples, 0.35%)</title><rect x="12.9315%" y="708" width="0.3511%" height="15" fill="rgb(221,10,30)" fg:x="221" fg:w="6"/><text x="13.1815%" y="718.50"></text></g><g><title>std::_Hashtable&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::type_index&gt;, std::hash&lt;std::type_index&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (pygloo.so) (6 samples, 0.35%)</title><rect x="12.9315%" y="724" width="0.3511%" height="15" fill="rgb(210,229,1)" fg:x="221" fg:w="6"/><text x="13.1815%" y="734.50"></text></g><g><title>std::_Hashtable&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::type_index&gt;, std::hash&lt;std::type_index&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (pygloo.so) (5 samples, 0.29%)</title><rect x="12.9901%" y="740" width="0.2926%" height="15" fill="rgb(222,148,37)" fg:x="222" fg:w="5"/><text x="13.2401%" y="750.50"></text></g><g><title>std::_Hashtable&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::type_index&gt;, std::hash&lt;std::type_index&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (pygloo.so) (5 samples, 0.29%)</title><rect x="12.9901%" y="756" width="0.2926%" height="15" fill="rgb(234,67,33)" fg:x="222" fg:w="5"/><text x="13.2401%" y="766.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::type_index&gt;, std::hash&lt;std::type_index&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (pygloo.so) (4 samples, 0.23%)</title><rect x="13.0486%" y="772" width="0.2341%" height="15" fill="rgb(247,98,35)" fg:x="223" fg:w="4"/><text x="13.2986%" y="782.50"></text></g><g><title>std::__detail::_Equal_helper&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::type_index&gt;, unsigned long, false&gt;::_S_equals (pygloo.so) (4 samples, 0.23%)</title><rect x="13.0486%" y="788" width="0.2341%" height="15" fill="rgb(247,138,52)" fg:x="223" fg:w="4"/><text x="13.2986%" y="798.50"></text></g><g><title>std::equal_to&lt;std::type_index&gt;::operator() (pygloo.so) (3 samples, 0.18%)</title><rect x="13.1071%" y="804" width="0.1755%" height="15" fill="rgb(213,79,30)" fg:x="224" fg:w="3"/><text x="13.3571%" y="814.50"></text></g><g><title>std::type_index::operator== (pygloo.so) (3 samples, 0.18%)</title><rect x="13.1071%" y="820" width="0.1755%" height="15" fill="rgb(246,177,23)" fg:x="224" fg:w="3"/><text x="13.3571%" y="830.50"></text></g><g><title>std::type_info::operator== (pygloo.so) (3 samples, 0.18%)</title><rect x="13.1071%" y="836" width="0.1755%" height="15" fill="rgb(230,62,27)" fg:x="224" fg:w="3"/><text x="13.3571%" y="846.50"></text></g><g><title>std::_Head_base&lt;(unsigned long)0, pybind11::detail::type_caster&lt;std::shared_ptr&lt;gloo::Context&gt;, void&gt;, false&gt;::_Head_base (pygloo.so) (12 samples, 0.70%)</title><rect x="12.6975%" y="580" width="0.7022%" height="15" fill="rgb(216,154,8)" fg:x="217" fg:w="12"/><text x="12.9475%" y="590.50"></text></g><g><title>pybind11::detail::type_caster&lt;std::shared_ptr&lt;gloo::Context&gt;, void&gt;::type_caster (pygloo.so) (11 samples, 0.64%)</title><rect x="12.7560%" y="596" width="0.6437%" height="15" fill="rgb(244,35,45)" fg:x="218" fg:w="11"/><text x="13.0060%" y="606.50"></text></g><g><title>pybind11::detail::copyable_holder_caster&lt;gloo::Context, std::shared_ptr&lt;gloo::Context&gt; &gt;::copyable_holder_caster (pygloo.so) (10 samples, 0.59%)</title><rect x="12.8145%" y="612" width="0.5851%" height="15" fill="rgb(251,115,12)" fg:x="219" fg:w="10"/><text x="13.0645%" y="622.50"></text></g><g><title>pybind11::detail::type_caster_base&lt;gloo::Context&gt;::type_caster_base (pygloo.so) (10 samples, 0.59%)</title><rect x="12.8145%" y="628" width="0.5851%" height="15" fill="rgb(240,54,50)" fg:x="219" fg:w="10"/><text x="13.0645%" y="638.50"></text></g><g><title>pybind11::detail::type_caster_base&lt;gloo::Context&gt;::type_caster_base (pygloo.so) (10 samples, 0.59%)</title><rect x="12.8145%" y="644" width="0.5851%" height="15" fill="rgb(233,84,52)" fg:x="219" fg:w="10"/><text x="13.0645%" y="654.50"></text></g><g><title>pybind11::detail::type_caster_generic::type_caster_generic (pygloo.so) (10 samples, 0.59%)</title><rect x="12.8145%" y="660" width="0.5851%" height="15" fill="rgb(207,117,47)" fg:x="219" fg:w="10"/><text x="13.0645%" y="670.50"></text></g><g><title>pybind11::detail::get_type_info (pygloo.so) (9 samples, 0.53%)</title><rect x="12.8730%" y="676" width="0.5266%" height="15" fill="rgb(249,43,39)" fg:x="220" fg:w="9"/><text x="13.1230%" y="686.50"></text></g><g><title>pybind11::detail::get_local_type_info (pygloo.so) (2 samples, 0.12%)</title><rect x="13.2826%" y="692" width="0.1170%" height="15" fill="rgb(209,38,44)" fg:x="227" fg:w="2"/><text x="13.5326%" y="702.50"></text></g><g><title>std::unordered_map&lt;std::type_index, pybind11::detail::type_info*, std::hash&lt;std::type_index&gt;, std::equal_to&lt;std::type_index&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt; &gt;::find (pygloo.so) (2 samples, 0.12%)</title><rect x="13.2826%" y="708" width="0.1170%" height="15" fill="rgb(236,212,23)" fg:x="227" fg:w="2"/><text x="13.5326%" y="718.50"></text></g><g><title>std::_Hashtable&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::type_index&gt;, std::hash&lt;std::type_index&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (pygloo.so) (2 samples, 0.12%)</title><rect x="13.2826%" y="724" width="0.1170%" height="15" fill="rgb(242,79,21)" fg:x="227" fg:w="2"/><text x="13.5326%" y="734.50"></text></g><g><title>pybind11::detail::get_global_type_info (pygloo.so) (3 samples, 0.18%)</title><rect x="13.4582%" y="724" width="0.1755%" height="15" fill="rgb(211,96,35)" fg:x="230" fg:w="3"/><text x="13.7082%" y="734.50"></text></g><g><title>std::unordered_map&lt;std::type_index, pybind11::detail::type_info*, std::hash&lt;std::type_index&gt;, std::equal_to&lt;std::type_index&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt; &gt;::find (pygloo.so) (2 samples, 0.12%)</title><rect x="13.5167%" y="740" width="0.1170%" height="15" fill="rgb(253,215,40)" fg:x="231" fg:w="2"/><text x="13.7667%" y="750.50"></text></g><g><title>std::_Hashtable&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::type_index&gt;, std::hash&lt;std::type_index&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (pygloo.so) (2 samples, 0.12%)</title><rect x="13.5167%" y="756" width="0.1170%" height="15" fill="rgb(211,81,21)" fg:x="231" fg:w="2"/><text x="13.7667%" y="766.50"></text></g><g><title>std::_Hashtable&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::type_index&gt;, std::hash&lt;std::type_index&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (pygloo.so) (2 samples, 0.12%)</title><rect x="13.5167%" y="772" width="0.1170%" height="15" fill="rgb(208,190,38)" fg:x="231" fg:w="2"/><text x="13.7667%" y="782.50"></text></g><g><title>std::_Hashtable&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::type_index&gt;, std::hash&lt;std::type_index&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (pygloo.so) (2 samples, 0.12%)</title><rect x="13.5167%" y="788" width="0.1170%" height="15" fill="rgb(235,213,38)" fg:x="231" fg:w="2"/><text x="13.7667%" y="798.50"></text></g><g><title>pybind11::detail::argument_loader&lt;std::shared_ptr&lt;gloo::Context&gt; const&amp;, long, unsigned long, pygloo::glooDataType_t, int, unsigned int&gt;::argument_loader (pygloo.so) (27 samples, 1.58%)</title><rect x="12.6390%" y="532" width="1.5799%" height="15" fill="rgb(237,122,38)" fg:x="216" fg:w="27"/><text x="12.8890%" y="542.50"></text></g><g><title>std::tuple&lt;pybind11::detail::type_caster&lt;std::shared_ptr&lt;gloo::Context&gt;, void&gt;, pybind11::detail::type_caster&lt;long, void&gt;, pybind11::detail::type_caster&lt;unsigned long, void&gt;, pybind11::detail::type_caster&lt;pygloo::glooDataType_t, void&gt;, pybind11::detail::type_caster&lt;int, void&gt;, pybind11::detail::type_caster&lt;unsigned int, void&gt; &gt;::tuple&lt;void, true&gt; (pygloo.so) (27 samples, 1.58%)</title><rect x="12.6390%" y="548" width="1.5799%" height="15" fill="rgb(244,218,35)" fg:x="216" fg:w="27"/><text x="12.8890%" y="558.50"></text></g><g><title>std::_Tuple_impl&lt;(unsigned long)0, pybind11::detail::type_caster&lt;std::shared_ptr&lt;gloo::Context&gt;, void&gt;, pybind11::detail::type_caster&lt;long, void&gt;, pybind11::detail::type_caster&lt;unsigned long, void&gt;, pybind11::detail::type_caster&lt;pygloo::glooDataType_t, void&gt;, pybind11::detail::type_caster&lt;int, void&gt;, pybind11::detail::type_caster&lt;unsigned int, void&gt; &gt;::_Tuple_impl (pygloo.so) (27 samples, 1.58%)</title><rect x="12.6390%" y="564" width="1.5799%" height="15" fill="rgb(240,68,47)" fg:x="216" fg:w="27"/><text x="12.8890%" y="574.50"></text></g><g><title>std::_Tuple_impl&lt;(unsigned long)1, pybind11::detail::type_caster&lt;long, void&gt;, pybind11::detail::type_caster&lt;unsigned long, void&gt;, pybind11::detail::type_caster&lt;pygloo::glooDataType_t, void&gt;, pybind11::detail::type_caster&lt;int, void&gt;, pybind11::detail::type_caster&lt;unsigned int, void&gt; &gt;::_Tuple_impl (pygloo.so) (14 samples, 0.82%)</title><rect x="13.3996%" y="580" width="0.8192%" height="15" fill="rgb(210,16,53)" fg:x="229" fg:w="14"/><text x="13.6496%" y="590.50"></text></g><g><title>std::_Tuple_impl&lt;(unsigned long)2, pybind11::detail::type_caster&lt;unsigned long, void&gt;, pybind11::detail::type_caster&lt;pygloo::glooDataType_t, void&gt;, pybind11::detail::type_caster&lt;int, void&gt;, pybind11::detail::type_caster&lt;unsigned int, void&gt; &gt;::_Tuple_impl (pygloo.so) (14 samples, 0.82%)</title><rect x="13.3996%" y="596" width="0.8192%" height="15" fill="rgb(235,124,12)" fg:x="229" fg:w="14"/><text x="13.6496%" y="606.50"></text></g><g><title>std::_Tuple_impl&lt;(unsigned long)3, pybind11::detail::type_caster&lt;pygloo::glooDataType_t, void&gt;, pybind11::detail::type_caster&lt;int, void&gt;, pybind11::detail::type_caster&lt;unsigned int, void&gt; &gt;::_Tuple_impl (pygloo.so) (14 samples, 0.82%)</title><rect x="13.3996%" y="612" width="0.8192%" height="15" fill="rgb(224,169,11)" fg:x="229" fg:w="14"/><text x="13.6496%" y="622.50"></text></g><g><title>std::_Head_base&lt;(unsigned long)3, pybind11::detail::type_caster&lt;pygloo::glooDataType_t, void&gt;, false&gt;::_Head_base (pygloo.so) (14 samples, 0.82%)</title><rect x="13.3996%" y="628" width="0.8192%" height="15" fill="rgb(250,166,2)" fg:x="229" fg:w="14"/><text x="13.6496%" y="638.50"></text></g><g><title>pybind11::detail::type_caster&lt;pygloo::glooDataType_t, void&gt;::type_caster (pygloo.so) (13 samples, 0.76%)</title><rect x="13.4582%" y="644" width="0.7607%" height="15" fill="rgb(242,216,29)" fg:x="230" fg:w="13"/><text x="13.7082%" y="654.50"></text></g><g><title>pybind11::detail::type_caster_base&lt;pygloo::glooDataType_t&gt;::type_caster_base (pygloo.so) (13 samples, 0.76%)</title><rect x="13.4582%" y="660" width="0.7607%" height="15" fill="rgb(230,116,27)" fg:x="230" fg:w="13"/><text x="13.7082%" y="670.50"></text></g><g><title>pybind11::detail::type_caster_base&lt;pygloo::glooDataType_t&gt;::type_caster_base (pygloo.so) (13 samples, 0.76%)</title><rect x="13.4582%" y="676" width="0.7607%" height="15" fill="rgb(228,99,48)" fg:x="230" fg:w="13"/><text x="13.7082%" y="686.50"></text></g><g><title>pybind11::detail::type_caster_generic::type_caster_generic (pygloo.so) (13 samples, 0.76%)</title><rect x="13.4582%" y="692" width="0.7607%" height="15" fill="rgb(253,11,6)" fg:x="230" fg:w="13"/><text x="13.7082%" y="702.50"></text></g><g><title>pybind11::detail::get_type_info (pygloo.so) (13 samples, 0.76%)</title><rect x="13.4582%" y="708" width="0.7607%" height="15" fill="rgb(247,143,39)" fg:x="230" fg:w="13"/><text x="13.7082%" y="718.50"></text></g><g><title>pybind11::detail::get_local_type_info (pygloo.so) (10 samples, 0.59%)</title><rect x="13.6337%" y="724" width="0.5851%" height="15" fill="rgb(236,97,10)" fg:x="233" fg:w="10"/><text x="13.8837%" y="734.50"></text></g><g><title>std::unordered_map&lt;std::type_index, pybind11::detail::type_info*, std::hash&lt;std::type_index&gt;, std::equal_to&lt;std::type_index&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt; &gt;::find (pygloo.so) (8 samples, 0.47%)</title><rect x="13.7507%" y="740" width="0.4681%" height="15" fill="rgb(233,208,19)" fg:x="235" fg:w="8"/><text x="14.0007%" y="750.50"></text></g><g><title>std::_Hashtable&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::type_index&gt;, std::hash&lt;std::type_index&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (pygloo.so) (8 samples, 0.47%)</title><rect x="13.7507%" y="756" width="0.4681%" height="15" fill="rgb(216,164,2)" fg:x="235" fg:w="8"/><text x="14.0007%" y="766.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::__detail::_Select1st, std::hash&lt;std::type_index&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (pygloo.so) (5 samples, 0.29%)</title><rect x="13.9263%" y="772" width="0.2926%" height="15" fill="rgb(220,129,5)" fg:x="238" fg:w="5"/><text x="14.1763%" y="782.50"></text></g><g><title>std::hash&lt;std::type_index&gt;::operator() (pygloo.so) (4 samples, 0.23%)</title><rect x="13.9848%" y="788" width="0.2341%" height="15" fill="rgb(242,17,10)" fg:x="239" fg:w="4"/><text x="14.2348%" y="798.50"></text></g><g><title>std::type_index::hash_code (pygloo.so) (4 samples, 0.23%)</title><rect x="13.9848%" y="804" width="0.2341%" height="15" fill="rgb(242,107,0)" fg:x="239" fg:w="4"/><text x="14.2348%" y="814.50"></text></g><g><title>std::type_info::hash_code (pygloo.so) (2 samples, 0.12%)</title><rect x="14.1018%" y="820" width="0.1170%" height="15" fill="rgb(251,28,31)" fg:x="241" fg:w="2"/><text x="14.3518%" y="830.50"></text></g><g><title>gloo::Context::createUnboundBuffer (pygloo.so) (2 samples, 0.12%)</title><rect x="14.3359%" y="596" width="0.1170%" height="15" fill="rgb(233,223,10)" fg:x="245" fg:w="2"/><text x="14.5859%" y="606.50"></text></g><g><title>gloo::transport::tcp::Context::createUnboundBuffer (pygloo.so) (2 samples, 0.12%)</title><rect x="14.3359%" y="612" width="0.1170%" height="15" fill="rgb(215,21,27)" fg:x="245" fg:w="2"/><text x="14.5859%" y="622.50"></text></g><g><title>gloo::transport::Context::Mutator::Mutator (pygloo.so) (2 samples, 0.12%)</title><rect x="14.4529%" y="628" width="0.1170%" height="15" fill="rgb(232,23,21)" fg:x="247" fg:w="2"/><text x="14.7029%" y="638.50"></text></g><g><title>gloo::transport::Context::Mutator::pushExpectedSendNotification (pygloo.so) (3 samples, 0.18%)</title><rect x="14.5699%" y="628" width="0.1755%" height="15" fill="rgb(244,5,23)" fg:x="249" fg:w="3"/><text x="14.8199%" y="638.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_realloc_insert&lt;int const&amp;&gt; (pygloo.so) (3 samples, 0.18%)</title><rect x="14.5699%" y="644" width="0.1755%" height="15" fill="rgb(226,81,46)" fg:x="249" fg:w="3"/><text x="14.8199%" y="654.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (3 samples, 0.18%)</title><rect x="14.5699%" y="660" width="0.1755%" height="15" fill="rgb(247,70,30)" fg:x="249" fg:w="3"/><text x="14.8199%" y="670.50"></text></g><g><title>malloc (libc-2.31.so) (2 samples, 0.12%)</title><rect x="14.6284%" y="676" width="0.1170%" height="15" fill="rgb(212,68,19)" fg:x="250" fg:w="2"/><text x="14.8784%" y="686.50"></text></g><g><title>gloo::transport::tcp::Pair::sendNotifyRecvReady (pygloo.so) (95 samples, 5.56%)</title><rect x="14.7455%" y="628" width="5.5588%" height="15" fill="rgb(240,187,13)" fg:x="252" fg:w="95"/><text x="14.9955%" y="638.50">gloo::t..</text></g><g><title>gloo::transport::tcp::Pair::sendAsyncMode (pygloo.so) (95 samples, 5.56%)</title><rect x="14.7455%" y="644" width="5.5588%" height="15" fill="rgb(223,113,26)" fg:x="252" fg:w="95"/><text x="14.9955%" y="654.50">gloo::t..</text></g><g><title>gloo::transport::tcp::Pair::write (pygloo.so) (95 samples, 5.56%)</title><rect x="14.7455%" y="660" width="5.5588%" height="15" fill="rgb(206,192,2)" fg:x="252" fg:w="95"/><text x="14.9955%" y="670.50">gloo::t..</text></g><g><title>writev (libc-2.31.so) (94 samples, 5.50%)</title><rect x="14.8040%" y="676" width="5.5003%" height="15" fill="rgb(241,108,4)" fg:x="253" fg:w="94"/><text x="15.0540%" y="686.50">writev ..</text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, std::deque&lt;std::tuple&lt;gloo::WeakNonOwningPtr&lt;gloo::transport::tcp::UnboundBuffer&gt;, unsigned long, unsigned long&gt;, std::allocator&lt;std::tuple&lt;gloo::WeakNonOwningPtr&lt;gloo::transport::tcp::UnboundBuffer&gt;, unsigned long, unsigned long&gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long const&amp;&gt;, std::tuple&lt;&gt; &gt; (pygloo.so) (2 samples, 0.12%)</title><rect x="20.4798%" y="644" width="0.1170%" height="15" fill="rgb(247,173,49)" fg:x="350" fg:w="2"/><text x="20.7298%" y="654.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (2 samples, 0.12%)</title><rect x="20.4798%" y="660" width="0.1170%" height="15" fill="rgb(224,114,35)" fg:x="350" fg:w="2"/><text x="20.7298%" y="670.50"></text></g><g><title>malloc (libc-2.31.so) (2 samples, 0.12%)</title><rect x="20.4798%" y="676" width="0.1170%" height="15" fill="rgb(245,159,27)" fg:x="350" fg:w="2"/><text x="20.7298%" y="686.50"></text></g><g><title>gloo::transport::tcp::UnboundBuffer::recv (pygloo.so) (106 samples, 6.20%)</title><rect x="14.4529%" y="596" width="6.2025%" height="15" fill="rgb(245,172,44)" fg:x="247" fg:w="106"/><text x="14.7029%" y="606.50">gloo::tr..</text></g><g><title>gloo::transport::tcp::Pair::recv (pygloo.so) (106 samples, 6.20%)</title><rect x="14.4529%" y="612" width="6.2025%" height="15" fill="rgb(236,23,11)" fg:x="247" fg:w="106"/><text x="14.7029%" y="622.50">gloo::tr..</text></g><g><title>std::__detail::_Map_base&lt;unsigned long, std::pair&lt;unsigned long const, std::deque&lt;std::tuple&lt;gloo::WeakNonOwningPtr&lt;gloo::transport::tcp::UnboundBuffer&gt;, unsigned long, unsigned long&gt;, std::allocator&lt;std::tuple&lt;gloo::WeakNonOwningPtr&lt;gloo::transport::tcp::UnboundBuffer&gt;, unsigned long, unsigned long&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned long const, std::deque&lt;std::tuple&lt;gloo::WeakNonOwningPtr&lt;gloo::transport::tcp::UnboundBuffer&gt;, unsigned long, unsigned long&gt;, std::allocator&lt;std::tuple&lt;gloo::WeakNonOwningPtr&lt;gloo::transport::tcp::UnboundBuffer&gt;, unsigned long, unsigned long&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (pygloo.so) (6 samples, 0.35%)</title><rect x="20.3043%" y="628" width="0.3511%" height="15" fill="rgb(205,117,38)" fg:x="347" fg:w="6"/><text x="20.5543%" y="638.50"></text></g><g><title>pygloo::future::Future::Future (pygloo.so) (3 samples, 0.18%)</title><rect x="20.7139%" y="724" width="0.1755%" height="15" fill="rgb(237,72,25)" fg:x="354" fg:w="3"/><text x="20.9639%" y="734.50"></text></g><g><title>std::unique_ptr&lt;gloo::transport::UnboundBuffer, std::default_delete&lt;gloo::transport::UnboundBuffer&gt; &gt;::unique_ptr (pygloo.so) (3 samples, 0.18%)</title><rect x="20.7139%" y="740" width="0.1755%" height="15" fill="rgb(244,70,9)" fg:x="354" fg:w="3"/><text x="20.9639%" y="750.50"></text></g><g><title>std::unique_ptr&lt;gloo::transport::UnboundBuffer, std::default_delete&lt;gloo::transport::UnboundBuffer&gt; &gt;::unique_ptr (pygloo.so) (2 samples, 0.12%)</title><rect x="20.8894%" y="724" width="0.1170%" height="15" fill="rgb(217,125,39)" fg:x="357" fg:w="2"/><text x="21.1394%" y="734.50"></text></g><g><title>std::__uniq_ptr_impl&lt;gloo::transport::UnboundBuffer, std::default_delete&lt;gloo::transport::UnboundBuffer&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;gloo::transport::UnboundBuffer&gt; &gt; (pygloo.so) (2 samples, 0.12%)</title><rect x="20.8894%" y="740" width="0.1170%" height="15" fill="rgb(235,36,10)" fg:x="357" fg:w="2"/><text x="21.1394%" y="750.50"></text></g><g><title>pygloo::irecv_wrapper (pygloo.so) (115 samples, 6.73%)</title><rect x="14.3359%" y="564" width="6.7291%" height="15" fill="rgb(251,123,47)" fg:x="245" fg:w="115"/><text x="14.5859%" y="574.50">pygloo::i..</text></g><g><title>pygloo::irecv&lt;unsigned char&gt; (pygloo.so) (115 samples, 6.73%)</title><rect x="14.3359%" y="580" width="6.7291%" height="15" fill="rgb(221,13,13)" fg:x="245" fg:w="115"/><text x="14.5859%" y="590.50">pygloo::i..</text></g><g><title>std::make_shared&lt;pygloo::future::Future, std::unique_ptr&lt;gloo::transport::UnboundBuffer, std::default_delete&lt;gloo::transport::UnboundBuffer&gt; &gt;, pygloo::future::Op&gt; (pygloo.so) (7 samples, 0.41%)</title><rect x="20.6554%" y="596" width="0.4096%" height="15" fill="rgb(238,131,9)" fg:x="353" fg:w="7"/><text x="20.9054%" y="606.50"></text></g><g><title>std::allocate_shared&lt;pygloo::future::Future, std::allocator&lt;pygloo::future::Future&gt;, std::unique_ptr&lt;gloo::transport::UnboundBuffer, std::default_delete&lt;gloo::transport::UnboundBuffer&gt; &gt;, pygloo::future::Op&gt; (pygloo.so) (7 samples, 0.41%)</title><rect x="20.6554%" y="612" width="0.4096%" height="15" fill="rgb(211,50,8)" fg:x="353" fg:w="7"/><text x="20.9054%" y="622.50"></text></g><g><title>std::shared_ptr&lt;pygloo::future::Future&gt;::shared_ptr&lt;std::allocator&lt;pygloo::future::Future&gt;, std::unique_ptr&lt;gloo::transport::UnboundBuffer, std::default_delete&lt;gloo::transport::UnboundBuffer&gt; &gt;, pygloo::future::Op&gt; (pygloo.so) (7 samples, 0.41%)</title><rect x="20.6554%" y="628" width="0.4096%" height="15" fill="rgb(245,182,24)" fg:x="353" fg:w="7"/><text x="20.9054%" y="638.50"></text></g><g><title>std::__shared_ptr&lt;pygloo::future::Future, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;pygloo::future::Future&gt;, std::unique_ptr&lt;gloo::transport::UnboundBuffer, std::default_delete&lt;gloo::transport::UnboundBuffer&gt; &gt;, pygloo::future::Op&gt; (pygloo.so) (7 samples, 0.41%)</title><rect x="20.6554%" y="644" width="0.4096%" height="15" fill="rgb(242,14,37)" fg:x="353" fg:w="7"/><text x="20.9054%" y="654.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;pygloo::future::Future, std::allocator&lt;pygloo::future::Future&gt;, std::unique_ptr&lt;gloo::transport::UnboundBuffer, std::default_delete&lt;gloo::transport::UnboundBuffer&gt; &gt;, pygloo::future::Op&gt; (pygloo.so) (7 samples, 0.41%)</title><rect x="20.6554%" y="660" width="0.4096%" height="15" fill="rgb(246,228,12)" fg:x="353" fg:w="7"/><text x="20.9054%" y="670.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;pygloo::future::Future, std::allocator&lt;pygloo::future::Future&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;std::unique_ptr&lt;gloo::transport::UnboundBuffer, std::default_delete&lt;gloo::transport::UnboundBuffer&gt; &gt;, pygloo::future::Op&gt; (pygloo.so) (7 samples, 0.41%)</title><rect x="20.6554%" y="676" width="0.4096%" height="15" fill="rgb(213,55,15)" fg:x="353" fg:w="7"/><text x="20.9054%" y="686.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;pygloo::future::Future&gt; &gt;::construct&lt;pygloo::future::Future, std::unique_ptr&lt;gloo::transport::UnboundBuffer, std::default_delete&lt;gloo::transport::UnboundBuffer&gt; &gt;, pygloo::future::Op&gt; (pygloo.so) (7 samples, 0.41%)</title><rect x="20.6554%" y="692" width="0.4096%" height="15" fill="rgb(209,9,3)" fg:x="353" fg:w="7"/><text x="20.9054%" y="702.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;pygloo::future::Future&gt;::construct&lt;pygloo::future::Future, std::unique_ptr&lt;gloo::transport::UnboundBuffer, std::default_delete&lt;gloo::transport::UnboundBuffer&gt; &gt;, pygloo::future::Op&gt; (pygloo.so) (6 samples, 0.35%)</title><rect x="20.7139%" y="708" width="0.3511%" height="15" fill="rgb(230,59,30)" fg:x="354" fg:w="6"/><text x="20.9639%" y="718.50"></text></g><g><title>pybind11::detail::argument_loader&lt;std::shared_ptr&lt;gloo::Context&gt; const&amp;, long, unsigned long, pygloo::glooDataType_t, int, unsigned int&gt;::call&lt;std::shared_ptr&lt;pygloo::future::Future&gt;, pybind11::detail::void_type, std::shared_ptr&lt;pygloo::future::Future&gt; (*&amp;)(std::shared_ptr&lt;gloo::Context&gt; const&amp;, long, unsigned long, pygloo::glooDataType_t, int, unsigned int)&gt; &amp;&amp; (pygloo.so) (118 samples, 6.90%)</title><rect x="14.2188%" y="532" width="6.9046%" height="15" fill="rgb(209,121,21)" fg:x="243" fg:w="118"/><text x="14.4688%" y="542.50">pybind11:..</text></g><g><title>pybind11::detail::argument_loader&lt;std::shared_ptr&lt;gloo::Context&gt; const&amp;, long, unsigned long, pygloo::glooDataType_t, int, unsigned int&gt;::call_impl&lt;std::shared_ptr&lt;pygloo::future::Future&gt;, std::shared_ptr&lt;pygloo::future::Future&gt; (*&amp;)(std::shared_ptr&lt;gloo::Context&gt; const&amp;, long, unsigned long, pygloo::glooDataType_t, int, unsigned int), (unsigned long)0, (unsigned long)1, (unsigned long)2, (unsigned long)3, (unsigned long)4, (unsigned long)5, pybind11::detail::void_type&gt; &amp;&amp; (pygloo.so) (118 samples, 6.90%)</title><rect x="14.2188%" y="548" width="6.9046%" height="15" fill="rgb(220,109,13)" fg:x="243" fg:w="118"/><text x="14.4688%" y="558.50">pybind11:..</text></g><g><title>pybind11::detail::all_type_info_get_cache (pygloo.so) (3 samples, 0.18%)</title><rect x="21.1820%" y="612" width="0.1755%" height="15" fill="rgb(232,18,1)" fg:x="362" fg:w="3"/><text x="21.4320%" y="622.50"></text></g><g><title>std::unordered_map&lt;_typeobject*, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt;, std::hash&lt;_typeobject*&gt;, std::equal_to&lt;_typeobject*&gt;, std::allocator&lt;std::pair&lt;_typeobject* const, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt; &gt; &gt;::emplace&lt;_typeobject*&amp;, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt; (pygloo.so) (3 samples, 0.18%)</title><rect x="21.1820%" y="628" width="0.1755%" height="15" fill="rgb(215,41,42)" fg:x="362" fg:w="3"/><text x="21.4320%" y="638.50"></text></g><g><title>std::_Hashtable&lt;_typeobject*, std::pair&lt;_typeobject* const, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;_typeobject* const, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;_typeobject*&gt;, std::hash&lt;_typeobject*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::emplace&lt;_typeobject*&amp;, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt; (pygloo.so) (3 samples, 0.18%)</title><rect x="21.1820%" y="644" width="0.1755%" height="15" fill="rgb(224,123,36)" fg:x="362" fg:w="3"/><text x="21.4320%" y="654.50"></text></g><g><title>std::_Hashtable&lt;_typeobject*, std::pair&lt;_typeobject* const, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;_typeobject* const, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;_typeobject*&gt;, std::hash&lt;_typeobject*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;_typeobject*&amp;, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt; (pygloo.so) (3 samples, 0.18%)</title><rect x="21.1820%" y="660" width="0.1755%" height="15" fill="rgb(240,125,3)" fg:x="362" fg:w="3"/><text x="21.4320%" y="670.50"></text></g><g><title>pybind11::detail::all_type_info (pygloo.so) (4 samples, 0.23%)</title><rect x="21.1820%" y="596" width="0.2341%" height="15" fill="rgb(205,98,50)" fg:x="362" fg:w="4"/><text x="21.4320%" y="606.50"></text></g><g><title>pybind11::detail::copyable_holder_caster&lt;gloo::Context, std::shared_ptr&lt;gloo::Context&gt; &gt;::load_value (pygloo.so) (2 samples, 0.12%)</title><rect x="21.4160%" y="596" width="0.1170%" height="15" fill="rgb(205,185,37)" fg:x="366" fg:w="2"/><text x="21.6660%" y="606.50"></text></g><g><title>std::shared_ptr&lt;gloo::Context&gt;::operator= (pygloo.so) (2 samples, 0.12%)</title><rect x="21.4160%" y="612" width="0.1170%" height="15" fill="rgb(238,207,15)" fg:x="366" fg:w="2"/><text x="21.6660%" y="622.50"></text></g><g><title>std::__shared_ptr&lt;gloo::Context, (__gnu_cxx::_Lock_policy)2&gt;::operator= (pygloo.so) (2 samples, 0.12%)</title><rect x="21.4160%" y="628" width="0.1170%" height="15" fill="rgb(213,199,42)" fg:x="366" fg:w="2"/><text x="21.6660%" y="638.50"></text></g><g><title>pybind11::detail::copyable_holder_caster&lt;gloo::Context, std::shared_ptr&lt;gloo::Context&gt; &gt;::load (pygloo.so) (10 samples, 0.59%)</title><rect x="21.1235%" y="564" width="0.5851%" height="15" fill="rgb(235,201,11)" fg:x="361" fg:w="10"/><text x="21.3735%" y="574.50"></text></g><g><title>pybind11::detail::type_caster_generic::load_impl&lt;pybind11::detail::copyable_holder_caster&lt;gloo::Context, std::shared_ptr&lt;gloo::Context&gt; &gt; &gt; (pygloo.so) (9 samples, 0.53%)</title><rect x="21.1820%" y="580" width="0.5266%" height="15" fill="rgb(207,46,11)" fg:x="362" fg:w="9"/><text x="21.4320%" y="590.50"></text></g><g><title>pybind11::detail::type_caster&lt;unsigned long, void&gt;::load (pygloo.so) (2 samples, 0.12%)</title><rect x="21.7671%" y="564" width="0.1170%" height="15" fill="rgb(241,35,35)" fg:x="372" fg:w="2"/><text x="22.0171%" y="574.50"></text></g><g><title>pybind11::detail::as_unsigned&lt;unsigned long&gt; (pygloo.so) (2 samples, 0.12%)</title><rect x="21.7671%" y="580" width="0.1170%" height="15" fill="rgb(243,32,47)" fg:x="372" fg:w="2"/><text x="22.0171%" y="590.50"></text></g><g><title>pybind11::detail::argument_loader&lt;std::shared_ptr&lt;gloo::Context&gt; const&amp;, long, unsigned long, pygloo::glooDataType_t, int, unsigned int&gt;::load_args (pygloo.so) (16 samples, 0.94%)</title><rect x="21.1235%" y="532" width="0.9362%" height="15" fill="rgb(247,202,23)" fg:x="361" fg:w="16"/><text x="21.3735%" y="542.50"></text></g><g><title>pybind11::detail::argument_loader&lt;std::shared_ptr&lt;gloo::Context&gt; const&amp;, long, unsigned long, pygloo::glooDataType_t, int, unsigned int&gt;::load_impl_sequence&lt;(unsigned long)0, (unsigned long)1, (unsigned long)2, (unsigned long)3, (unsigned long)4, (unsigned long)5&gt; (pygloo.so) (16 samples, 0.94%)</title><rect x="21.1235%" y="548" width="0.9362%" height="15" fill="rgb(219,102,11)" fg:x="361" fg:w="16"/><text x="21.3735%" y="558.50"></text></g><g><title>pybind11::detail::argument_loader&lt;std::shared_ptr&lt;gloo::Context&gt; const&amp;, long, unsigned long, pygloo::glooDataType_t, int, unsigned int&gt;::~argument_loader (pygloo.so) (2 samples, 0.12%)</title><rect x="22.0597%" y="532" width="0.1170%" height="15" fill="rgb(243,110,44)" fg:x="377" fg:w="2"/><text x="22.3097%" y="542.50"></text></g><g><title>std::tuple&lt;pybind11::detail::type_caster&lt;std::shared_ptr&lt;gloo::Context&gt;, void&gt;, pybind11::detail::type_caster&lt;long, void&gt;, pybind11::detail::type_caster&lt;unsigned long, void&gt;, pybind11::detail::type_caster&lt;pygloo::glooDataType_t, void&gt;, pybind11::detail::type_caster&lt;int, void&gt;, pybind11::detail::type_caster&lt;unsigned int, void&gt; &gt;::~tuple (pygloo.so) (2 samples, 0.12%)</title><rect x="22.0597%" y="548" width="0.1170%" height="15" fill="rgb(222,74,54)" fg:x="377" fg:w="2"/><text x="22.3097%" y="558.50"></text></g><g><title>std::_Tuple_impl&lt;(unsigned long)0, pybind11::detail::type_caster&lt;std::shared_ptr&lt;gloo::Context&gt;, void&gt;, pybind11::detail::type_caster&lt;long, void&gt;, pybind11::detail::type_caster&lt;unsigned long, void&gt;, pybind11::detail::type_caster&lt;pygloo::glooDataType_t, void&gt;, pybind11::detail::type_caster&lt;int, void&gt;, pybind11::detail::type_caster&lt;unsigned int, void&gt; &gt;::~_Tuple_impl (pygloo.so) (2 samples, 0.12%)</title><rect x="22.0597%" y="564" width="0.1170%" height="15" fill="rgb(216,99,12)" fg:x="377" fg:w="2"/><text x="22.3097%" y="574.50"></text></g><g><title>pybind11::detail::type_caster_base&lt;pygloo::future::Future&gt;::src_and_type (pygloo.so) (3 samples, 0.18%)</title><rect x="22.1767%" y="564" width="0.1755%" height="15" fill="rgb(226,22,26)" fg:x="379" fg:w="3"/><text x="22.4267%" y="574.50"></text></g><g><title>pybind11::detail::type_caster_generic::src_and_type (pygloo.so) (3 samples, 0.18%)</title><rect x="22.1767%" y="580" width="0.1755%" height="15" fill="rgb(217,163,10)" fg:x="379" fg:w="3"/><text x="22.4267%" y="590.50"></text></g><g><title>pybind11::detail::get_type_info (pygloo.so) (3 samples, 0.18%)</title><rect x="22.1767%" y="596" width="0.1755%" height="15" fill="rgb(213,25,53)" fg:x="379" fg:w="3"/><text x="22.4267%" y="606.50"></text></g><g><title>pybind11::detail::get_local_type_info (pygloo.so) (2 samples, 0.12%)</title><rect x="22.2352%" y="612" width="0.1170%" height="15" fill="rgb(252,105,26)" fg:x="380" fg:w="2"/><text x="22.4852%" y="622.50"></text></g><g><title>std::unordered_map&lt;std::type_index, pybind11::detail::type_info*, std::hash&lt;std::type_index&gt;, std::equal_to&lt;std::type_index&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt; &gt;::find (pygloo.so) (2 samples, 0.12%)</title><rect x="22.2352%" y="628" width="0.1170%" height="15" fill="rgb(220,39,43)" fg:x="380" fg:w="2"/><text x="22.4852%" y="638.50"></text></g><g><title>std::_Hashtable&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::type_index&gt;, std::hash&lt;std::type_index&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (pygloo.so) (2 samples, 0.12%)</title><rect x="22.2352%" y="644" width="0.1170%" height="15" fill="rgb(229,68,48)" fg:x="380" fg:w="2"/><text x="22.4852%" y="654.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::__detail::_Select1st, std::hash&lt;std::type_index&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (pygloo.so) (2 samples, 0.12%)</title><rect x="22.2352%" y="660" width="0.1170%" height="15" fill="rgb(252,8,32)" fg:x="380" fg:w="2"/><text x="22.4852%" y="670.50"></text></g><g><title>std::hash&lt;std::type_index&gt;::operator() (pygloo.so) (2 samples, 0.12%)</title><rect x="22.2352%" y="676" width="0.1170%" height="15" fill="rgb(223,20,43)" fg:x="380" fg:w="2"/><text x="22.4852%" y="686.50"></text></g><g><title>std::type_index::hash_code (pygloo.so) (2 samples, 0.12%)</title><rect x="22.2352%" y="692" width="0.1170%" height="15" fill="rgb(229,81,49)" fg:x="380" fg:w="2"/><text x="22.4852%" y="702.50"></text></g><g><title>std::type_info::hash_code (pygloo.so) (2 samples, 0.12%)</title><rect x="22.2352%" y="708" width="0.1170%" height="15" fill="rgb(236,28,36)" fg:x="380" fg:w="2"/><text x="22.4852%" y="718.50"></text></g><g><title>pybind11::detail::get_global_type_info (pygloo.so) (2 samples, 0.12%)</title><rect x="22.4108%" y="612" width="0.1170%" height="15" fill="rgb(249,185,26)" fg:x="383" fg:w="2"/><text x="22.6608%" y="622.50"></text></g><g><title>pybind11::detail::get_type_info (pygloo.so) (3 samples, 0.18%)</title><rect x="22.4108%" y="596" width="0.1755%" height="15" fill="rgb(249,174,33)" fg:x="383" fg:w="3"/><text x="22.6608%" y="606.50"></text></g><g><title>std::_Hashtable&lt;void const*, std::pair&lt;void const* const, pybind11::detail::instance*&gt;, std::allocator&lt;std::pair&lt;void const* const, pybind11::detail::instance*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;void const*&gt;, std::hash&lt;void const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, false&gt; &gt;::_M_emplace&lt;void*&amp;, pybind11::detail::instance*&amp;&gt; (pygloo.so) (3 samples, 0.18%)</title><rect x="22.6448%" y="676" width="0.1755%" height="15" fill="rgb(233,201,37)" fg:x="387" fg:w="3"/><text x="22.8948%" y="686.50"></text></g><g><title>std::_Hashtable&lt;void const*, std::pair&lt;void const* const, pybind11::detail::instance*&gt;, std::allocator&lt;std::pair&lt;void const* const, pybind11::detail::instance*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;void const*&gt;, std::hash&lt;void const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, false&gt; &gt;::_M_emplace&lt;void*&amp;, pybind11::detail::instance*&amp;&gt; (pygloo.so) (4 samples, 0.23%)</title><rect x="22.6448%" y="660" width="0.2341%" height="15" fill="rgb(221,78,26)" fg:x="387" fg:w="4"/><text x="22.8948%" y="670.50"></text></g><g><title>std::_Hashtable&lt;void const*, std::pair&lt;void const* const, pybind11::detail::instance*&gt;, std::allocator&lt;std::pair&lt;void const* const, pybind11::detail::instance*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;void const*&gt;, std::hash&lt;void const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, false&gt; &gt;::emplace&lt;void*&amp;, pybind11::detail::instance*&amp;&gt; (pygloo.so) (5 samples, 0.29%)</title><rect x="22.6448%" y="644" width="0.2926%" height="15" fill="rgb(250,127,30)" fg:x="387" fg:w="5"/><text x="22.8948%" y="654.50"></text></g><g><title>pybind11::detail::register_instance (pygloo.so) (7 samples, 0.41%)</title><rect x="22.5863%" y="596" width="0.4096%" height="15" fill="rgb(230,49,44)" fg:x="386" fg:w="7"/><text x="22.8363%" y="606.50"></text></g><g><title>pybind11::detail::register_instance_impl (pygloo.so) (6 samples, 0.35%)</title><rect x="22.6448%" y="612" width="0.3511%" height="15" fill="rgb(229,67,23)" fg:x="387" fg:w="6"/><text x="22.8948%" y="622.50"></text></g><g><title>std::unordered_multimap&lt;void const*, pybind11::detail::instance*, std::hash&lt;void const*&gt;, std::equal_to&lt;void const*&gt;, std::allocator&lt;std::pair&lt;void const* const, pybind11::detail::instance*&gt; &gt; &gt;::emplace&lt;void*&amp;, pybind11::detail::instance*&amp;&gt; (pygloo.so) (6 samples, 0.35%)</title><rect x="22.6448%" y="628" width="0.3511%" height="15" fill="rgb(249,83,47)" fg:x="387" fg:w="6"/><text x="22.8948%" y="638.50"></text></g><g><title>pybind11::class_&lt;pygloo::future::Future, std::shared_ptr&lt;pygloo::future::Future&gt; &gt;::init_instance (pygloo.so) (12 samples, 0.70%)</title><rect x="22.3523%" y="580" width="0.7022%" height="15" fill="rgb(215,43,3)" fg:x="382" fg:w="12"/><text x="22.6023%" y="590.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;_typeobject* const, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_node_ptr (pygloo.so) (2 samples, 0.12%)</title><rect x="23.1714%" y="708" width="0.1170%" height="15" fill="rgb(238,154,13)" fg:x="396" fg:w="2"/><text x="23.4214%" y="718.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;_typeobject* const, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt;, false&gt; &gt; &gt;::deallocate (pygloo.so) (2 samples, 0.12%)</title><rect x="23.1714%" y="724" width="0.1170%" height="15" fill="rgb(219,56,2)" fg:x="396" fg:w="2"/><text x="23.4214%" y="734.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;_typeobject* const, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt;, false&gt; &gt;::deallocate (pygloo.so) (2 samples, 0.12%)</title><rect x="23.1714%" y="740" width="0.1170%" height="15" fill="rgb(233,0,4)" fg:x="396" fg:w="2"/><text x="23.4214%" y="750.50"></text></g><g><title>cfree (libc-2.31.so) (2 samples, 0.12%)</title><rect x="23.1714%" y="756" width="0.1170%" height="15" fill="rgb(235,30,7)" fg:x="396" fg:w="2"/><text x="23.4214%" y="766.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;_typeobject* const, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_node (pygloo.so) (5 samples, 0.29%)</title><rect x="23.1714%" y="692" width="0.2926%" height="15" fill="rgb(250,79,13)" fg:x="396" fg:w="5"/><text x="23.4214%" y="702.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;_typeobject* const, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt;, false&gt; &gt; &gt;::destroy&lt;std::pair&lt;_typeobject* const, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt; &gt; (pygloo.so) (3 samples, 0.18%)</title><rect x="23.2885%" y="708" width="0.1755%" height="15" fill="rgb(211,146,34)" fg:x="398" fg:w="3"/><text x="23.5385%" y="718.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;_typeobject* const, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt;, false&gt; &gt;::destroy&lt;std::pair&lt;_typeobject* const, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt; &gt; (pygloo.so) (3 samples, 0.18%)</title><rect x="23.2885%" y="724" width="0.1755%" height="15" fill="rgb(228,22,38)" fg:x="398" fg:w="3"/><text x="23.5385%" y="734.50"></text></g><g><title>std::pair&lt;_typeobject* const, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt;::~pair (pygloo.so) (3 samples, 0.18%)</title><rect x="23.2885%" y="740" width="0.1755%" height="15" fill="rgb(235,168,5)" fg:x="398" fg:w="3"/><text x="23.5385%" y="750.50"></text></g><g><title>std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt;::~vector (pygloo.so) (3 samples, 0.18%)</title><rect x="23.2885%" y="756" width="0.1755%" height="15" fill="rgb(221,155,16)" fg:x="398" fg:w="3"/><text x="23.5385%" y="766.50"></text></g><g><title>std::unordered_map&lt;_typeobject*, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt;, std::hash&lt;_typeobject*&gt;, std::equal_to&lt;_typeobject*&gt;, std::allocator&lt;std::pair&lt;_typeobject* const, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt; &gt; &gt;::emplace&lt;_typeobject*&amp;, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt; (pygloo.so) (8 samples, 0.47%)</title><rect x="23.0544%" y="644" width="0.4681%" height="15" fill="rgb(215,215,53)" fg:x="394" fg:w="8"/><text x="23.3044%" y="654.50"></text></g><g><title>std::_Hashtable&lt;_typeobject*, std::pair&lt;_typeobject* const, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;_typeobject* const, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;_typeobject*&gt;, std::hash&lt;_typeobject*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::emplace&lt;_typeobject*&amp;, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt; (pygloo.so) (8 samples, 0.47%)</title><rect x="23.0544%" y="660" width="0.4681%" height="15" fill="rgb(223,4,10)" fg:x="394" fg:w="8"/><text x="23.3044%" y="670.50"></text></g><g><title>std::_Hashtable&lt;_typeobject*, std::pair&lt;_typeobject* const, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;_typeobject* const, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;_typeobject*&gt;, std::hash&lt;_typeobject*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;_typeobject*&amp;, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt; (pygloo.so) (8 samples, 0.47%)</title><rect x="23.0544%" y="676" width="0.4681%" height="15" fill="rgb(234,103,6)" fg:x="394" fg:w="8"/><text x="23.3044%" y="686.50"></text></g><g><title>pybind11::detail::make_new_instance (pygloo.so) (9 samples, 0.53%)</title><rect x="23.0544%" y="580" width="0.5266%" height="15" fill="rgb(227,97,0)" fg:x="394" fg:w="9"/><text x="23.3044%" y="590.50"></text></g><g><title>pybind11::detail::instance::allocate_layout (pygloo.so) (9 samples, 0.53%)</title><rect x="23.0544%" y="596" width="0.5266%" height="15" fill="rgb(234,150,53)" fg:x="394" fg:w="9"/><text x="23.3044%" y="606.50"></text></g><g><title>pybind11::detail::all_type_info (pygloo.so) (9 samples, 0.53%)</title><rect x="23.0544%" y="612" width="0.5266%" height="15" fill="rgb(228,201,54)" fg:x="394" fg:w="9"/><text x="23.3044%" y="622.50"></text></g><g><title>pybind11::detail::all_type_info_get_cache (pygloo.so) (9 samples, 0.53%)</title><rect x="23.0544%" y="628" width="0.5266%" height="15" fill="rgb(222,22,37)" fg:x="394" fg:w="9"/><text x="23.3044%" y="638.50"></text></g><g><title>pybind11::detail::values_and_holders::values_and_holders (pygloo.so) (3 samples, 0.18%)</title><rect x="23.5810%" y="580" width="0.1755%" height="15" fill="rgb(237,53,32)" fg:x="403" fg:w="3"/><text x="23.8310%" y="590.50"></text></g><g><title>pybind11::detail::all_type_info (pygloo.so) (3 samples, 0.18%)</title><rect x="23.5810%" y="596" width="0.1755%" height="15" fill="rgb(233,25,53)" fg:x="403" fg:w="3"/><text x="23.8310%" y="606.50"></text></g><g><title>pybind11::detail::all_type_info_get_cache (pygloo.so) (3 samples, 0.18%)</title><rect x="23.5810%" y="612" width="0.1755%" height="15" fill="rgb(210,40,34)" fg:x="403" fg:w="3"/><text x="23.8310%" y="622.50"></text></g><g><title>std::unordered_map&lt;_typeobject*, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt;, std::hash&lt;_typeobject*&gt;, std::equal_to&lt;_typeobject*&gt;, std::allocator&lt;std::pair&lt;_typeobject* const, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt; &gt; &gt;::emplace&lt;_typeobject*&amp;, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt; (pygloo.so) (3 samples, 0.18%)</title><rect x="23.5810%" y="628" width="0.1755%" height="15" fill="rgb(241,220,44)" fg:x="403" fg:w="3"/><text x="23.8310%" y="638.50"></text></g><g><title>std::_Hashtable&lt;_typeobject*, std::pair&lt;_typeobject* const, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;_typeobject* const, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;_typeobject*&gt;, std::hash&lt;_typeobject*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::emplace&lt;_typeobject*&amp;, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt; (pygloo.so) (2 samples, 0.12%)</title><rect x="23.6396%" y="644" width="0.1170%" height="15" fill="rgb(235,28,35)" fg:x="404" fg:w="2"/><text x="23.8896%" y="654.50"></text></g><g><title>std::_Hashtable&lt;_typeobject*, std::pair&lt;_typeobject* const, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;_typeobject* const, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;_typeobject*&gt;, std::hash&lt;_typeobject*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;_typeobject*&amp;, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt; (pygloo.so) (2 samples, 0.12%)</title><rect x="23.6396%" y="660" width="0.1170%" height="15" fill="rgb(210,56,17)" fg:x="404" fg:w="2"/><text x="23.8896%" y="670.50"></text></g><g><title>pybind11::detail::copyable_holder_caster&lt;pygloo::future::Future, std::shared_ptr&lt;pygloo::future::Future&gt; &gt;::cast (pygloo.so) (29 samples, 1.70%)</title><rect x="22.1767%" y="532" width="1.6969%" height="15" fill="rgb(224,130,29)" fg:x="379" fg:w="29"/><text x="22.4267%" y="542.50"></text></g><g><title>pybind11::detail::type_caster_base&lt;pygloo::future::Future&gt;::cast_holder (pygloo.so) (29 samples, 1.70%)</title><rect x="22.1767%" y="548" width="1.6969%" height="15" fill="rgb(235,212,8)" fg:x="379" fg:w="29"/><text x="22.4267%" y="558.50"></text></g><g><title>pybind11::detail::type_caster_generic::cast (pygloo.so) (26 samples, 1.52%)</title><rect x="22.3523%" y="564" width="1.5214%" height="15" fill="rgb(223,33,50)" fg:x="382" fg:w="26"/><text x="22.6023%" y="574.50"></text></g><g><title>pybind11::cpp_function::initialize&lt;std::shared_ptr&lt;pygloo::future::Future&gt; (*&amp;)(std::shared_ptr&lt;gloo::Context&gt; const&amp;, long, unsigned long, pygloo::glooDataType_t, int, unsigned int), std::shared_ptr&lt;pygloo::future::Future&gt;, std::shared_ptr&lt;gloo::Context&gt; const&amp;, long, unsigned long, pygloo::glooDataType_t, int, unsigned int, pybind11::name, pybind11::scope, pybind11::sibling, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v&gt;(std::shared_ptr&lt;pygloo::future::Future&gt; (*&amp;)(std::shared_ptr&lt;gloo::Context&gt; const&amp;, long, unsigned long, pygloo::glooDataType_t, int, unsigned int), std::shared_ptr&lt;pygloo::future::Future&gt; (*)(std::shared_ptr&lt;gloo::Context&gt; const&amp;, long, unsigned long, pygloo::glooDataType_t, int, unsigned int), pybind11::name const, pybind11::scope&amp;, pybind11::sibling, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pygloo.so) (193 samples, 11.29%)</title><rect x="12.6390%" y="500" width="11.2932%" height="15" fill="rgb(219,149,13)" fg:x="216" fg:w="193"/><text x="12.8890%" y="510.50">pybind11::cpp_fun..</text></g><g><title>pybind11::cpp_function::initialize&lt;std::shared_ptr&lt;pygloo::future::Future&gt; (*&amp;)(std::shared_ptr&lt;gloo::Context&gt; const&amp;, long, unsigned long, pygloo::glooDataType_t, int, unsigned int), std::shared_ptr&lt;pygloo::future::Future&gt;, std::shared_ptr&lt;gloo::Context&gt; const&amp;, long, unsigned long, pygloo::glooDataType_t, int, unsigned int, pybind11::name, pybind11::scope, pybind11::sibling, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v&gt;(std::shared_ptr&lt;pygloo::future::Future&gt; (*&amp;)(std::shared_ptr&lt;gloo::Context&gt; const&amp;, long, unsigned long, pygloo::glooDataType_t, int, unsigned int), std::shared_ptr&lt;pygloo::future::Future&gt; (*)(std::shared_ptr&lt;gloo::Context&gt; const&amp;, long, unsigned long, pygloo::glooDataType_t, int, unsigned int), pybind11::name const, pybind11::scope&amp;, pybind11::sibling, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v)::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pygloo.so) (193 samples, 11.29%)</title><rect x="12.6390%" y="516" width="11.2932%" height="15" fill="rgb(250,156,29)" fg:x="216" fg:w="193"/><text x="12.8890%" y="526.50">pybind11::cpp_fun..</text></g><g><title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::reserve (pygloo.so) (3 samples, 0.18%)</title><rect x="23.9321%" y="516" width="0.1755%" height="15" fill="rgb(216,193,19)" fg:x="409" fg:w="3"/><text x="24.1821%" y="526.50"></text></g><g><title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::_M_reallocate (pygloo.so) (3 samples, 0.18%)</title><rect x="23.9321%" y="532" width="0.1755%" height="15" fill="rgb(216,135,14)" fg:x="409" fg:w="3"/><text x="24.1821%" y="542.50"></text></g><g><title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::_M_copy_aligned (pygloo.so) (2 samples, 0.12%)</title><rect x="23.9906%" y="548" width="0.1170%" height="15" fill="rgb(241,47,5)" fg:x="410" fg:w="2"/><text x="24.2406%" y="558.50"></text></g><g><title>pybind11::detail::function_call::function_call (pygloo.so) (4 samples, 0.23%)</title><rect x="23.9321%" y="500" width="0.2341%" height="15" fill="rgb(233,42,35)" fg:x="409" fg:w="4"/><text x="24.1821%" y="510.50"></text></g><g><title>pybind11::detail::function_call::~function_call (pygloo.so) (3 samples, 0.18%)</title><rect x="24.1662%" y="500" width="0.1755%" height="15" fill="rgb(231,13,6)" fg:x="413" fg:w="3"/><text x="24.4162%" y="510.50"></text></g><g><title>std::vector&lt;pybind11::handle, std::allocator&lt;pybind11::handle&gt; &gt;::~vector (pygloo.so) (2 samples, 0.12%)</title><rect x="24.2247%" y="516" width="0.1170%" height="15" fill="rgb(207,181,40)" fg:x="414" fg:w="2"/><text x="24.4747%" y="526.50"></text></g><g><title>pybind11::detail::loader_life_support::~loader_life_support (pygloo.so) (2 samples, 0.12%)</title><rect x="24.3417%" y="500" width="0.1170%" height="15" fill="rgb(254,173,49)" fg:x="416" fg:w="2"/><text x="24.5917%" y="510.50"></text></g><g><title>std::vector&lt;_object*, std::allocator&lt;_object*&gt; &gt;::back (pygloo.so) (2 samples, 0.12%)</title><rect x="24.3417%" y="516" width="0.1170%" height="15" fill="rgb(221,1,38)" fg:x="416" fg:w="2"/><text x="24.5917%" y="526.50"></text></g><g><title>std::vector&lt;pybind11::detail::argument_record, std::allocator&lt;pybind11::detail::argument_record&gt; &gt;::size (pygloo.so) (2 samples, 0.12%)</title><rect x="24.6928%" y="500" width="0.1170%" height="15" fill="rgb(206,124,46)" fg:x="422" fg:w="2"/><text x="24.9428%" y="510.50"></text></g><g><title>p2p_fn (ray/util/collective/collective_group/gloo_collective_group.py:475) (224 samples, 13.11%)</title><rect x="11.7613%" y="468" width="13.1071%" height="15" fill="rgb(249,21,11)" fg:x="201" fg:w="224"/><text x="12.0113%" y="478.50">p2p_fn (ray/util/col..</text></g><g><title>pybind11::cpp_function::dispatcher (pygloo.so) (211 samples, 12.35%)</title><rect x="12.5219%" y="484" width="12.3464%" height="15" fill="rgb(222,201,40)" fg:x="214" fg:w="211"/><text x="12.7719%" y="494.50">pybind11::cpp_func..</text></g><g><title>__init__ (numpy/core/_internal.py:255) (5 samples, 0.29%)</title><rect x="26.1556%" y="516" width="0.2926%" height="15" fill="rgb(235,61,29)" fg:x="447" fg:w="5"/><text x="26.4056%" y="526.50"></text></g><g><title>__init__ (numpy/core/_internal.py:262) (2 samples, 0.12%)</title><rect x="26.4482%" y="516" width="0.1170%" height="15" fill="rgb(219,207,3)" fg:x="452" fg:w="2"/><text x="26.6982%" y="526.50"></text></g><g><title>array_ctypes_get (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (25 samples, 1.46%)</title><rect x="25.1609%" y="500" width="1.4628%" height="15" fill="rgb(222,56,46)" fg:x="430" fg:w="25"/><text x="25.4109%" y="510.50"></text></g><g><title>p2p_fn (ray/util/collective/collective_group/gloo_collective_group.py:477) (32 samples, 1.87%)</title><rect x="24.8683%" y="468" width="1.8724%" height="15" fill="rgb(239,76,54)" fg:x="425" fg:w="32"/><text x="25.1183%" y="478.50">p..</text></g><g><title>get_tensor_ptr (ray/util/collective/collective_group/gloo_util.py:143) (28 samples, 1.64%)</title><rect x="25.1024%" y="484" width="1.6384%" height="15" fill="rgb(231,124,27)" fg:x="429" fg:w="28"/><text x="25.3524%" y="494.50"></text></g><g><title>data (numpy/core/_internal.py:320) (2 samples, 0.12%)</title><rect x="26.6238%" y="500" width="0.1170%" height="15" fill="rgb(249,195,6)" fg:x="455" fg:w="2"/><text x="26.8738%" y="510.50"></text></g><g><title>p2p_fn (ray/util/collective/collective_group/gloo_collective_group.py:478) (4 samples, 0.23%)</title><rect x="26.7408%" y="468" width="0.2341%" height="15" fill="rgb(237,174,47)" fg:x="457" fg:w="4"/><text x="26.9908%" y="478.50"></text></g><g><title>get_gloo_tensor_dtype (ray/util/collective/collective_group/gloo_util.py:113) (3 samples, 0.18%)</title><rect x="27.0334%" y="484" width="0.1755%" height="15" fill="rgb(206,201,31)" fg:x="462" fg:w="3"/><text x="27.2834%" y="494.50"></text></g><g><title>p2p_fn (ray/util/collective/collective_group/gloo_collective_group.py:479) (7 samples, 0.41%)</title><rect x="26.9748%" y="468" width="0.4096%" height="15" fill="rgb(231,57,52)" fg:x="461" fg:w="7"/><text x="27.2248%" y="478.50"></text></g><g><title>get_gloo_tensor_dtype (ray/util/collective/collective_group/gloo_util.py:114) (3 samples, 0.18%)</title><rect x="27.2089%" y="484" width="0.1755%" height="15" fill="rgb(248,177,22)" fg:x="465" fg:w="3"/><text x="27.4589%" y="494.50"></text></g><g><title>p2p_fn (ray/util/collective/collective_group/gloo_collective_group.py:485) (2 samples, 0.12%)</title><rect x="27.4429%" y="468" width="0.1170%" height="15" fill="rgb(215,211,37)" fg:x="469" fg:w="2"/><text x="27.6929%" y="478.50"></text></g><g><title>pybind11::detail::get_global_type_info (pygloo.so) (2 samples, 0.12%)</title><rect x="27.9696%" y="692" width="0.1170%" height="15" fill="rgb(241,128,51)" fg:x="478" fg:w="2"/><text x="28.2196%" y="702.50"></text></g><g><title>std::unordered_map&lt;std::type_index, pybind11::detail::type_info*, std::hash&lt;std::type_index&gt;, std::equal_to&lt;std::type_index&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt; &gt;::find (pygloo.so) (2 samples, 0.12%)</title><rect x="27.9696%" y="708" width="0.1170%" height="15" fill="rgb(227,165,31)" fg:x="478" fg:w="2"/><text x="28.2196%" y="718.50"></text></g><g><title>std::_Hashtable&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::type_index&gt;, std::hash&lt;std::type_index&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (pygloo.so) (2 samples, 0.12%)</title><rect x="27.9696%" y="724" width="0.1170%" height="15" fill="rgb(228,167,24)" fg:x="478" fg:w="2"/><text x="28.2196%" y="734.50"></text></g><g><title>pybind11::detail::argument_loader&lt;pygloo::future::Future*, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt; &gt;::argument_loader (pygloo.so) (3 samples, 0.18%)</title><rect x="27.9696%" y="548" width="0.1755%" height="15" fill="rgb(228,143,12)" fg:x="478" fg:w="3"/><text x="28.2196%" y="558.50"></text></g><g><title>std::tuple&lt;pybind11::detail::type_caster&lt;pygloo::future::Future, void&gt;, pybind11::detail::type_caster&lt;std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;, void&gt; &gt;::tuple&lt;pybind11::detail::type_caster&lt;pygloo::future::Future, void&gt;, pybind11::detail::type_caster&lt;std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;, void&gt;, true&gt; (pygloo.so) (3 samples, 0.18%)</title><rect x="27.9696%" y="564" width="0.1755%" height="15" fill="rgb(249,149,8)" fg:x="478" fg:w="3"/><text x="28.2196%" y="574.50"></text></g><g><title>std::_Tuple_impl&lt;(unsigned long)0, pybind11::detail::type_caster&lt;pygloo::future::Future, void&gt;, pybind11::detail::type_caster&lt;std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;, void&gt; &gt;::_Tuple_impl (pygloo.so) (3 samples, 0.18%)</title><rect x="27.9696%" y="580" width="0.1755%" height="15" fill="rgb(243,35,44)" fg:x="478" fg:w="3"/><text x="28.2196%" y="590.50"></text></g><g><title>std::_Head_base&lt;(unsigned long)0, pybind11::detail::type_caster&lt;pygloo::future::Future, void&gt;, false&gt;::_Head_base (pygloo.so) (3 samples, 0.18%)</title><rect x="27.9696%" y="596" width="0.1755%" height="15" fill="rgb(246,89,9)" fg:x="478" fg:w="3"/><text x="28.2196%" y="606.50"></text></g><g><title>pybind11::detail::type_caster&lt;pygloo::future::Future, void&gt;::type_caster (pygloo.so) (3 samples, 0.18%)</title><rect x="27.9696%" y="612" width="0.1755%" height="15" fill="rgb(233,213,13)" fg:x="478" fg:w="3"/><text x="28.2196%" y="622.50"></text></g><g><title>pybind11::detail::type_caster_base&lt;pygloo::future::Future&gt;::type_caster_base (pygloo.so) (3 samples, 0.18%)</title><rect x="27.9696%" y="628" width="0.1755%" height="15" fill="rgb(233,141,41)" fg:x="478" fg:w="3"/><text x="28.2196%" y="638.50"></text></g><g><title>pybind11::detail::type_caster_base&lt;pygloo::future::Future&gt;::type_caster_base (pygloo.so) (3 samples, 0.18%)</title><rect x="27.9696%" y="644" width="0.1755%" height="15" fill="rgb(239,167,4)" fg:x="478" fg:w="3"/><text x="28.2196%" y="654.50"></text></g><g><title>pybind11::detail::type_caster_generic::type_caster_generic (pygloo.so) (3 samples, 0.18%)</title><rect x="27.9696%" y="660" width="0.1755%" height="15" fill="rgb(209,217,16)" fg:x="478" fg:w="3"/><text x="28.2196%" y="670.50"></text></g><g><title>pybind11::detail::get_type_info (pygloo.so) (3 samples, 0.18%)</title><rect x="27.9696%" y="676" width="0.1755%" height="15" fill="rgb(219,88,35)" fg:x="478" fg:w="3"/><text x="28.2196%" y="686.50"></text></g><g><title>gloo::transport::tcp::UnboundBuffer::throwIfException (pygloo.so) (2 samples, 0.12%)</title><rect x="28.2621%" y="644" width="0.1170%" height="15" fill="rgb(220,193,23)" fg:x="483" fg:w="2"/><text x="28.5121%" y="654.50"></text></g><g><title>std::__exception_ptr::operator!= (libstdc++.so.6.0.28) (2 samples, 0.12%)</title><rect x="28.2621%" y="660" width="0.1170%" height="15" fill="rgb(230,90,52)" fg:x="483" fg:w="2"/><text x="28.5121%" y="670.50"></text></g><g><title>gloo::transport::UnboundBuffer::waitRecv (pygloo.so) (531 samples, 31.07%)</title><rect x="28.2036%" y="612" width="31.0708%" height="15" fill="rgb(252,106,19)" fg:x="482" fg:w="531"/><text x="28.4536%" y="622.50">gloo::transport::UnboundBuffer::waitRecv (pygloo.s..</text></g><g><title>gloo::transport::tcp::UnboundBuffer::waitRecv (pygloo.so) (531 samples, 31.07%)</title><rect x="28.2036%" y="628" width="31.0708%" height="15" fill="rgb(206,74,20)" fg:x="482" fg:w="531"/><text x="28.4536%" y="638.50">gloo::transport::tcp::UnboundBuffer::waitRecv (pyg..</text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libpthread-2.31.so) (528 samples, 30.90%)</title><rect x="28.3792%" y="644" width="30.8953%" height="15" fill="rgb(230,138,44)" fg:x="485" fg:w="528"/><text x="28.6292%" y="654.50">pthread_cond_timedwait@@GLIBC_2.3.2 (libpthread-2...</text></g><g><title>__pthread_mutex_cond_lock (libpthread-2.31.so) (24 samples, 1.40%)</title><rect x="57.8701%" y="660" width="1.4043%" height="15" fill="rgb(235,182,43)" fg:x="989" fg:w="24"/><text x="58.1201%" y="670.50"></text></g><g><title>__lll_lock_wait (libpthread-2.31.so) (24 samples, 1.40%)</title><rect x="57.8701%" y="676" width="1.4043%" height="15" fill="rgb(242,16,51)" fg:x="989" fg:w="24"/><text x="58.1201%" y="686.50"></text></g><g><title>pybind11::detail::argument_loader&lt;pygloo::future::Future*, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt; &gt;::call&lt;bool, pybind11::detail::void_type, pybind11::cpp_function::cpp_function&lt;bool, pygloo::future::Future, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pygloo::future::Future*, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;&amp;)#1}&gt; &amp;&amp; (pygloo.so) (533 samples, 31.19%)</title><rect x="28.1451%" y="548" width="31.1878%" height="15" fill="rgb(248,9,4)" fg:x="481" fg:w="533"/><text x="28.3951%" y="558.50">pybind11::detail::argument_loader&lt;pygloo::future::..</text></g><g><title>pybind11::detail::argument_loader&lt;pygloo::future::Future*, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt; &gt;::call_impl&lt;bool, pybind11::cpp_function::cpp_function&lt;bool, pygloo::future::Future, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pygloo::future::Future*, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;&amp;)#1}, (unsigned long)0, (unsigned long)1, pybind11::detail::void_type&gt; &amp;&amp; (pygloo.so) (533 samples, 31.19%)</title><rect x="28.1451%" y="564" width="31.1878%" height="15" fill="rgb(210,31,22)" fg:x="481" fg:w="533"/><text x="28.3951%" y="574.50">pybind11::detail::argument_loader&lt;pygloo::future::..</text></g><g><title>pybind11::cpp_function::cpp_function&lt;bool, pygloo::future::Future, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pygloo::future::Future*, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;)#1}::operator() const (pygloo.so) (532 samples, 31.13%)</title><rect x="28.2036%" y="580" width="31.1293%" height="15" fill="rgb(239,54,39)" fg:x="482" fg:w="532"/><text x="28.4536%" y="590.50">pybind11::cpp_function::cpp_function&lt;bool, pygloo:..</text></g><g><title>pygloo::future::Future::Wait (pygloo.so) (532 samples, 31.13%)</title><rect x="28.2036%" y="596" width="31.1293%" height="15" fill="rgb(230,99,41)" fg:x="482" fg:w="532"/><text x="28.4536%" y="606.50">pygloo::future::Future::Wait (pygloo.so)</text></g><g><title>pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;bool, pygloo::future::Future, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pygloo::future::Future*, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;)#1}, bool, pygloo::future::Future*, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(pybind11::cpp_function::cpp_function&lt;bool, pygloo::future::Future, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pygloo::future::Future*, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;&amp;&amp;)#1}, bool (*)(pygloo::future::Future*, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pygloo.so) (539 samples, 31.54%)</title><rect x="27.9696%" y="516" width="31.5389%" height="15" fill="rgb(253,106,12)" fg:x="478" fg:w="539"/><text x="28.2196%" y="526.50">pybind11::cpp_function::initialize&lt;pybind11::cpp_fu..</text></g><g><title>pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;bool, pygloo::future::Future, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pygloo::future::Future*, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;)#1}, bool, pygloo::future::Future*, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(pybind11::cpp_function::cpp_function&lt;bool, pygloo::future::Future, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pygloo::future::Future*, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;&amp;&amp;)#1}, bool (*)(pygloo::future::Future*, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pygloo.so) (539 samples, 31.54%)</title><rect x="27.9696%" y="532" width="31.5389%" height="15" fill="rgb(213,46,41)" fg:x="478" fg:w="539"/><text x="28.2196%" y="542.50">pybind11::cpp_function::initialize&lt;pybind11::cpp_fu..</text></g><g><title>pybind11::detail::argument_loader&lt;pygloo::future::Future*, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt; &gt;::load_args (pygloo.so) (3 samples, 0.18%)</title><rect x="59.3329%" y="548" width="0.1755%" height="15" fill="rgb(215,133,35)" fg:x="1014" fg:w="3"/><text x="59.5829%" y="558.50"></text></g><g><title>pybind11::detail::argument_loader&lt;pygloo::future::Future*, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt; &gt;::load_impl_sequence&lt;(unsigned long)0, (unsigned long)1&gt; (pygloo.so) (3 samples, 0.18%)</title><rect x="59.3329%" y="564" width="0.1755%" height="15" fill="rgb(213,28,5)" fg:x="1014" fg:w="3"/><text x="59.5829%" y="574.50"></text></g><g><title>pybind11::detail::function_call::function_call (pygloo.so) (2 samples, 0.12%)</title><rect x="59.5085%" y="516" width="0.1170%" height="15" fill="rgb(215,77,49)" fg:x="1017" fg:w="2"/><text x="59.7585%" y="526.50"></text></g><g><title>begin_read (ray/experimental/collective_channel.py:91) (895 samples, 52.37%)</title><rect x="7.3727%" y="404" width="52.3698%" height="15" fill="rgb(248,100,22)" fg:x="126" fg:w="895"/><text x="7.6227%" y="414.50">begin_read (ray/experimental/collective_channel.py:91)</text></g><g><title>recv (ray/util/collective/collective.py:717) (840 samples, 49.15%)</title><rect x="10.5910%" y="420" width="49.1516%" height="15" fill="rgb(208,67,9)" fg:x="181" fg:w="840"/><text x="10.8410%" y="430.50">recv (ray/util/collective/collective.py:717)</text></g><g><title>recv (ray/util/collective/collective_group/gloo_collective_group.py:491) (833 samples, 48.74%)</title><rect x="11.0006%" y="436" width="48.7420%" height="15" fill="rgb(219,133,21)" fg:x="188" fg:w="833"/><text x="11.2506%" y="446.50">recv (ray/util/collective/collective_group/gloo_collective_group.py:491)</text></g><g><title>_point2point (ray/util/collective/collective_group/gloo_collective_group.py:535) (822 samples, 48.10%)</title><rect x="11.6442%" y="452" width="48.0983%" height="15" fill="rgb(246,46,29)" fg:x="199" fg:w="822"/><text x="11.8942%" y="462.50">_point2point (ray/util/collective/collective_group/gloo_collective_group.py:535)</text></g><g><title>p2p_fn (ray/util/collective/collective_group/gloo_collective_group.py:488) (550 samples, 32.18%)</title><rect x="27.5600%" y="468" width="32.1826%" height="15" fill="rgb(246,185,52)" fg:x="471" fg:w="550"/><text x="27.8100%" y="478.50">p2p_fn (ray/util/collective/collective_group/gloo_co..</text></g><g><title>wait (ray/util/collective/collective_group/gloo_collective_group.py:41) (547 samples, 32.01%)</title><rect x="27.7355%" y="484" width="32.0070%" height="15" fill="rgb(252,136,11)" fg:x="474" fg:w="547"/><text x="27.9855%" y="494.50">wait (ray/util/collective/collective_group/gloo_coll..</text></g><g><title>pybind11::cpp_function::dispatcher (pygloo.so) (546 samples, 31.95%)</title><rect x="27.7940%" y="500" width="31.9485%" height="15" fill="rgb(219,138,53)" fg:x="475" fg:w="546"/><text x="28.0440%" y="510.50">pybind11::cpp_function::dispatcher (pygloo.so)</text></g><g><title>do_exec_compiled_task (ray/dag/compiled_dag_node.py:116) (936 samples, 54.77%)</title><rect x="5.0907%" y="388" width="54.7689%" height="15" fill="rgb(211,51,23)" fg:x="87" fg:w="936"/><text x="5.3407%" y="398.50">do_exec_compiled_task (ray/dag/compiled_dag_node.py:116)</text></g><g><title>do_exec_compiled_task (ray/dag/compiled_dag_node.py:121) (3 samples, 0.18%)</title><rect x="59.8596%" y="388" width="0.1755%" height="15" fill="rgb(247,221,28)" fg:x="1023" fg:w="3"/><text x="60.1096%" y="398.50"></text></g><g><title>array_dealloc (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (5 samples, 0.29%)</title><rect x="60.2692%" y="404" width="0.2926%" height="15" fill="rgb(251,222,45)" fg:x="1030" fg:w="5"/><text x="60.5192%" y="414.50"></text></g><g><title>array_dealloc (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (3 samples, 0.18%)</title><rect x="60.3862%" y="420" width="0.1755%" height="15" fill="rgb(217,162,53)" fg:x="1032" fg:w="3"/><text x="60.6362%" y="430.50"></text></g><g><title>PyDataMem_UserFREE (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (3 samples, 0.18%)</title><rect x="60.3862%" y="436" width="0.1755%" height="15" fill="rgb(229,93,14)" fg:x="1032" fg:w="3"/><text x="60.6362%" y="446.50"></text></g><g><title>pybind11::class_&lt;pygloo::future::Future, std::shared_ptr&lt;pygloo::future::Future&gt; &gt;::dealloc (pygloo.so) (7 samples, 0.41%)</title><rect x="60.7373%" y="436" width="0.4096%" height="15" fill="rgb(209,67,49)" fg:x="1038" fg:w="7"/><text x="60.9873%" y="446.50"></text></g><g><title>std::shared_ptr&lt;pygloo::future::Future&gt;::~shared_ptr (pygloo.so) (6 samples, 0.35%)</title><rect x="60.7958%" y="452" width="0.3511%" height="15" fill="rgb(213,87,29)" fg:x="1039" fg:w="6"/><text x="61.0458%" y="462.50"></text></g><g><title>std::__shared_ptr&lt;pygloo::future::Future, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (pygloo.so) (6 samples, 0.35%)</title><rect x="60.7958%" y="468" width="0.3511%" height="15" fill="rgb(205,151,52)" fg:x="1039" fg:w="6"/><text x="61.0458%" y="478.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (pygloo.so) (6 samples, 0.35%)</title><rect x="60.7958%" y="484" width="0.3511%" height="15" fill="rgb(253,215,39)" fg:x="1039" fg:w="6"/><text x="61.0458%" y="494.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (pygloo.so) (6 samples, 0.35%)</title><rect x="60.7958%" y="500" width="0.3511%" height="15" fill="rgb(221,220,41)" fg:x="1039" fg:w="6"/><text x="61.0458%" y="510.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;pygloo::future::Future, std::allocator&lt;pygloo::future::Future&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (pygloo.so) (6 samples, 0.35%)</title><rect x="60.7958%" y="516" width="0.3511%" height="15" fill="rgb(218,133,21)" fg:x="1039" fg:w="6"/><text x="61.0458%" y="526.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;pygloo::future::Future&gt; &gt;::destroy&lt;pygloo::future::Future&gt; (pygloo.so) (6 samples, 0.35%)</title><rect x="60.7958%" y="532" width="0.3511%" height="15" fill="rgb(221,193,43)" fg:x="1039" fg:w="6"/><text x="61.0458%" y="542.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;pygloo::future::Future&gt;::destroy&lt;pygloo::future::Future&gt; (pygloo.so) (6 samples, 0.35%)</title><rect x="60.7958%" y="548" width="0.3511%" height="15" fill="rgb(240,128,52)" fg:x="1039" fg:w="6"/><text x="61.0458%" y="558.50"></text></g><g><title>pygloo::future::Future::~Future (pygloo.so) (5 samples, 0.29%)</title><rect x="60.8543%" y="564" width="0.2926%" height="15" fill="rgb(253,114,12)" fg:x="1040" fg:w="5"/><text x="61.1043%" y="574.50"></text></g><g><title>std::unique_ptr&lt;gloo::transport::UnboundBuffer, std::default_delete&lt;gloo::transport::UnboundBuffer&gt; &gt;::~unique_ptr (pygloo.so) (5 samples, 0.29%)</title><rect x="60.8543%" y="580" width="0.2926%" height="15" fill="rgb(215,223,47)" fg:x="1040" fg:w="5"/><text x="61.1043%" y="590.50"></text></g><g><title>std::default_delete&lt;gloo::transport::UnboundBuffer&gt;::operator() (pygloo.so) (4 samples, 0.23%)</title><rect x="60.9128%" y="596" width="0.2341%" height="15" fill="rgb(248,225,23)" fg:x="1041" fg:w="4"/><text x="61.1628%" y="606.50"></text></g><g><title>gloo::transport::tcp::UnboundBuffer::~UnboundBuffer (pygloo.so) (3 samples, 0.18%)</title><rect x="60.9713%" y="612" width="0.1755%" height="15" fill="rgb(250,108,0)" fg:x="1042" fg:w="3"/><text x="61.2213%" y="622.50"></text></g><g><title>gloo::transport::tcp::UnboundBuffer::~UnboundBuffer (pygloo.so) (3 samples, 0.18%)</title><rect x="60.9713%" y="628" width="0.1755%" height="15" fill="rgb(228,208,7)" fg:x="1042" fg:w="3"/><text x="61.2213%" y="638.50"></text></g><g><title>std::_Hashtable&lt;void const*, std::pair&lt;void const* const, pybind11::detail::instance*&gt;, std::allocator&lt;std::pair&lt;void const* const, pybind11::detail::instance*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;void const*&gt;, std::hash&lt;void const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, false&gt; &gt;::_M_bucket_index (pygloo.so) (2 samples, 0.12%)</title><rect x="61.1469%" y="516" width="0.1170%" height="15" fill="rgb(244,45,10)" fg:x="1045" fg:w="2"/><text x="61.3969%" y="526.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;void const*, std::pair&lt;void const* const, pybind11::detail::instance*&gt;, std::__detail::_Select1st, std::hash&lt;void const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (pygloo.so) (2 samples, 0.12%)</title><rect x="61.1469%" y="532" width="0.1170%" height="15" fill="rgb(207,125,25)" fg:x="1045" fg:w="2"/><text x="61.3969%" y="542.50"></text></g><g><title>pybind11::detail::deregister_instance (pygloo.so) (4 samples, 0.23%)</title><rect x="61.1469%" y="436" width="0.2341%" height="15" fill="rgb(210,195,18)" fg:x="1045" fg:w="4"/><text x="61.3969%" y="446.50"></text></g><g><title>pybind11::detail::deregister_instance_impl (pygloo.so) (4 samples, 0.23%)</title><rect x="61.1469%" y="452" width="0.2341%" height="15" fill="rgb(249,80,12)" fg:x="1045" fg:w="4"/><text x="61.3969%" y="462.50"></text></g><g><title>std::unordered_multimap&lt;void const*, pybind11::detail::instance*, std::hash&lt;void const*&gt;, std::equal_to&lt;void const*&gt;, std::allocator&lt;std::pair&lt;void const* const, pybind11::detail::instance*&gt; &gt; &gt;::erase (pygloo.so) (4 samples, 0.23%)</title><rect x="61.1469%" y="468" width="0.2341%" height="15" fill="rgb(221,65,9)" fg:x="1045" fg:w="4"/><text x="61.3969%" y="478.50"></text></g><g><title>std::_Hashtable&lt;void const*, std::pair&lt;void const* const, pybind11::detail::instance*&gt;, std::allocator&lt;std::pair&lt;void const* const, pybind11::detail::instance*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;void const*&gt;, std::hash&lt;void const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, false&gt; &gt;::erase (pygloo.so) (4 samples, 0.23%)</title><rect x="61.1469%" y="484" width="0.2341%" height="15" fill="rgb(235,49,36)" fg:x="1045" fg:w="4"/><text x="61.3969%" y="494.50"></text></g><g><title>std::_Hashtable&lt;void const*, std::pair&lt;void const* const, pybind11::detail::instance*&gt;, std::allocator&lt;std::pair&lt;void const* const, pybind11::detail::instance*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;void const*&gt;, std::hash&lt;void const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, false&gt; &gt;::erase (pygloo.so) (4 samples, 0.23%)</title><rect x="61.1469%" y="500" width="0.2341%" height="15" fill="rgb(225,32,20)" fg:x="1045" fg:w="4"/><text x="61.3969%" y="510.50"></text></g><g><title>std::_Hashtable&lt;void const*, std::pair&lt;void const* const, pybind11::detail::instance*&gt;, std::allocator&lt;std::pair&lt;void const* const, pybind11::detail::instance*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;void const*&gt;, std::hash&lt;void const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, false&gt; &gt;::_M_erase (pygloo.so) (2 samples, 0.12%)</title><rect x="61.2639%" y="516" width="0.1170%" height="15" fill="rgb(215,141,46)" fg:x="1047" fg:w="2"/><text x="61.5139%" y="526.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;void const* const, pybind11::detail::instance*&gt;, false&gt; &gt; &gt;::_M_deallocate_node (pygloo.so) (2 samples, 0.12%)</title><rect x="61.2639%" y="532" width="0.1170%" height="15" fill="rgb(250,160,47)" fg:x="1047" fg:w="2"/><text x="61.5139%" y="542.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;void const* const, pybind11::detail::instance*&gt;, false&gt; &gt; &gt;::_M_deallocate_node_ptr (pygloo.so) (2 samples, 0.12%)</title><rect x="61.2639%" y="548" width="0.1170%" height="15" fill="rgb(216,222,40)" fg:x="1047" fg:w="2"/><text x="61.5139%" y="558.50"></text></g><g><title>std::pointer_traits&lt;std::__detail::_Hash_node&lt;std::pair&lt;void const* const, pybind11::detail::instance*&gt;, false&gt;*&gt;::pointer_to (pygloo.so) (2 samples, 0.12%)</title><rect x="61.2639%" y="564" width="0.1170%" height="15" fill="rgb(234,217,39)" fg:x="1047" fg:w="2"/><text x="61.5139%" y="574.50"></text></g><g><title>std::addressof&lt;std::__detail::_Hash_node&lt;std::pair&lt;void const* const, pybind11::detail::instance*&gt;, false&gt; &gt; (pygloo.so) (2 samples, 0.12%)</title><rect x="61.2639%" y="580" width="0.1170%" height="15" fill="rgb(207,178,40)" fg:x="1047" fg:w="2"/><text x="61.5139%" y="590.50"></text></g><g><title>std::__addressof&lt;std::__detail::_Hash_node&lt;std::pair&lt;void const* const, pybind11::detail::instance*&gt;, false&gt; &gt; (pygloo.so) (2 samples, 0.12%)</title><rect x="61.2639%" y="596" width="0.1170%" height="15" fill="rgb(221,136,13)" fg:x="1047" fg:w="2"/><text x="61.5139%" y="606.50"></text></g><g><title>std::unordered_map&lt;_typeobject*, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt;, std::hash&lt;_typeobject*&gt;, std::equal_to&lt;_typeobject*&gt;, std::allocator&lt;std::pair&lt;_typeobject* const, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt; &gt; &gt;::emplace&lt;_typeobject*&amp;, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt; (pygloo.so) (3 samples, 0.18%)</title><rect x="61.4980%" y="484" width="0.1755%" height="15" fill="rgb(249,199,10)" fg:x="1051" fg:w="3"/><text x="61.7480%" y="494.50"></text></g><g><title>std::_Hashtable&lt;_typeobject*, std::pair&lt;_typeobject* const, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;_typeobject* const, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;_typeobject*&gt;, std::hash&lt;_typeobject*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::emplace&lt;_typeobject*&amp;, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt; (pygloo.so) (2 samples, 0.12%)</title><rect x="61.5565%" y="500" width="0.1170%" height="15" fill="rgb(249,222,13)" fg:x="1052" fg:w="2"/><text x="61.8065%" y="510.50"></text></g><g><title>std::_Hashtable&lt;_typeobject*, std::pair&lt;_typeobject* const, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;_typeobject* const, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;_typeobject*&gt;, std::hash&lt;_typeobject*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;_typeobject*&amp;, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt; (pygloo.so) (2 samples, 0.12%)</title><rect x="61.5565%" y="516" width="0.1170%" height="15" fill="rgb(244,185,38)" fg:x="1052" fg:w="2"/><text x="61.8065%" y="526.50"></text></g><g><title>std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt;::vector (pygloo.so) (2 samples, 0.12%)</title><rect x="61.6735%" y="484" width="0.1170%" height="15" fill="rgb(236,202,9)" fg:x="1054" fg:w="2"/><text x="61.9235%" y="494.50"></text></g><g><title>std::_Vector_base&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt;::_Vector_base (pygloo.so) (2 samples, 0.12%)</title><rect x="61.6735%" y="500" width="0.1170%" height="15" fill="rgb(250,229,37)" fg:x="1054" fg:w="2"/><text x="61.9235%" y="510.50"></text></g><g><title>std::_Vector_base&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt;::_Vector_impl::_Vector_impl (pygloo.so) (2 samples, 0.12%)</title><rect x="61.6735%" y="516" width="0.1170%" height="15" fill="rgb(206,174,23)" fg:x="1054" fg:w="2"/><text x="61.9235%" y="526.50"></text></g><g><title>pybind11_object_dealloc (pygloo.so) (22 samples, 1.29%)</title><rect x="60.5617%" y="404" width="1.2873%" height="15" fill="rgb(211,33,43)" fg:x="1035" fg:w="22"/><text x="60.8117%" y="414.50"></text></g><g><title>pybind11::detail::clear_instance (pygloo.so) (20 samples, 1.17%)</title><rect x="60.6788%" y="420" width="1.1703%" height="15" fill="rgb(245,58,50)" fg:x="1037" fg:w="20"/><text x="60.9288%" y="430.50"></text></g><g><title>pybind11::detail::values_and_holders::values_and_holders (pygloo.so) (6 samples, 0.35%)</title><rect x="61.4980%" y="436" width="0.3511%" height="15" fill="rgb(244,68,36)" fg:x="1051" fg:w="6"/><text x="61.7480%" y="446.50"></text></g><g><title>pybind11::detail::all_type_info (pygloo.so) (6 samples, 0.35%)</title><rect x="61.4980%" y="452" width="0.3511%" height="15" fill="rgb(232,229,15)" fg:x="1051" fg:w="6"/><text x="61.7480%" y="462.50"></text></g><g><title>pybind11::detail::all_type_info_get_cache (pygloo.so) (6 samples, 0.35%)</title><rect x="61.4980%" y="468" width="0.3511%" height="15" fill="rgb(254,30,23)" fg:x="1051" fg:w="6"/><text x="61.7480%" y="478.50"></text></g><g><title>_pickle_dumps_impl (_pickle.c:7789) (4 samples, 0.23%)</title><rect x="61.9661%" y="452" width="0.2341%" height="15" fill="rgb(235,160,14)" fg:x="1059" fg:w="4"/><text x="62.2161%" y="462.50"></text></g><g><title>_Pickler_New (_pickle.c:1131) (3 samples, 0.18%)</title><rect x="62.0246%" y="468" width="0.1755%" height="15" fill="rgb(212,155,44)" fg:x="1060" fg:w="3"/><text x="62.2746%" y="478.50"></text></g><g><title>malloc (libc-2.31.so) (3 samples, 0.18%)</title><rect x="62.0246%" y="484" width="0.1755%" height="15" fill="rgb(226,2,50)" fg:x="1060" fg:w="3"/><text x="62.2746%" y="494.50"></text></g><g><title>dump (_pickle.c:4519) (3 samples, 0.18%)</title><rect x="62.2586%" y="468" width="0.1755%" height="15" fill="rgb(234,177,6)" fg:x="1064" fg:w="3"/><text x="62.5086%" y="478.50"></text></g><g><title>save (_pickle.c:4310) (3 samples, 0.18%)</title><rect x="62.2586%" y="484" width="0.1755%" height="15" fill="rgb(217,24,9)" fg:x="1064" fg:w="3"/><text x="62.5086%" y="494.50"></text></g><g><title>save_bytes (_pickle.c:2448) (3 samples, 0.18%)</title><rect x="62.2586%" y="500" width="0.1755%" height="15" fill="rgb(220,13,46)" fg:x="1064" fg:w="3"/><text x="62.5086%" y="510.50"></text></g><g><title>_pickle_dumps_impl (_pickle.c:7800) (5 samples, 0.29%)</title><rect x="62.2001%" y="452" width="0.2926%" height="15" fill="rgb(239,221,27)" fg:x="1063" fg:w="5"/><text x="62.4501%" y="462.50"></text></g><g><title>write (ray/experimental/collective_channel.py:48) (13 samples, 0.76%)</title><rect x="61.8490%" y="404" width="0.7607%" height="15" fill="rgb(222,198,25)" fg:x="1057" fg:w="13"/><text x="62.0990%" y="414.50"></text></g><g><title>_serialize (ray/experimental/collective_channel.py:121) (12 samples, 0.70%)</title><rect x="61.9075%" y="420" width="0.7022%" height="15" fill="rgb(211,99,13)" fg:x="1058" fg:w="12"/><text x="62.1575%" y="430.50"></text></g><g><title>_pickle_dumps (_pickle.c.h:619) (11 samples, 0.64%)</title><rect x="61.9661%" y="436" width="0.6437%" height="15" fill="rgb(232,111,31)" fg:x="1059" fg:w="11"/><text x="62.2161%" y="446.50"></text></g><g><title>_pickle_dumps_impl (_pickle.c:7803) (2 samples, 0.12%)</title><rect x="62.4927%" y="452" width="0.1170%" height="15" fill="rgb(245,82,37)" fg:x="1068" fg:w="2"/><text x="62.7427%" y="462.50"></text></g><g><title>_Pickler_GetString (_pickle.c:998) (2 samples, 0.12%)</title><rect x="62.4927%" y="468" width="0.1170%" height="15" fill="rgb(227,149,46)" fg:x="1068" fg:w="2"/><text x="62.7427%" y="478.50"></text></g><g><title>write (ray/experimental/collective_channel.py:53) (6 samples, 0.35%)</title><rect x="62.6682%" y="404" width="0.3511%" height="15" fill="rgb(218,36,50)" fg:x="1071" fg:w="6"/><text x="62.9182%" y="414.50"></text></g><g><title>array_frombuffer (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (4 samples, 0.23%)</title><rect x="62.7853%" y="420" width="0.2341%" height="15" fill="rgb(226,80,48)" fg:x="1073" fg:w="4"/><text x="63.0353%" y="430.50"></text></g><g><title>PyArray_FromBuffer (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (3 samples, 0.18%)</title><rect x="62.8438%" y="436" width="0.1755%" height="15" fill="rgb(238,224,15)" fg:x="1074" fg:w="3"/><text x="63.0938%" y="446.50"></text></g><g><title>PyArray_DiscoverDTypeAndShape (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (7 samples, 0.41%)</title><rect x="63.4289%" y="468" width="0.4096%" height="15" fill="rgb(241,136,10)" fg:x="1084" fg:w="7"/><text x="63.6789%" y="478.50"></text></g><g><title>PyArray_DiscoverDTypeAndShape_Recursive (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (7 samples, 0.41%)</title><rect x="63.4289%" y="484" width="0.4096%" height="15" fill="rgb(208,32,45)" fg:x="1084" fg:w="7"/><text x="63.6789%" y="494.50"></text></g><g><title>_array_from_array_like (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (2 samples, 0.12%)</title><rect x="63.7215%" y="500" width="0.1170%" height="15" fill="rgb(207,135,9)" fg:x="1089" fg:w="2"/><text x="63.9715%" y="510.50"></text></g><g><title>PyArray_FromArrayAttr_int (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (2 samples, 0.12%)</title><rect x="63.7215%" y="516" width="0.1170%" height="15" fill="rgb(206,86,44)" fg:x="1089" fg:w="2"/><text x="63.9715%" y="526.50"></text></g><g><title>PyArray_CheckFromAny (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (11 samples, 0.64%)</title><rect x="63.2534%" y="436" width="0.6437%" height="15" fill="rgb(245,177,15)" fg:x="1081" fg:w="11"/><text x="63.5034%" y="446.50"></text></g><g><title>PyArray_FromAny (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (11 samples, 0.64%)</title><rect x="63.2534%" y="452" width="0.6437%" height="15" fill="rgb(206,64,50)" fg:x="1081" fg:w="11"/><text x="63.5034%" y="462.50"></text></g><g><title>array_array (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (13 samples, 0.76%)</title><rect x="63.1949%" y="420" width="0.7607%" height="15" fill="rgb(234,36,40)" fg:x="1080" fg:w="13"/><text x="63.4449%" y="430.50"></text></g><g><title>write (ray/experimental/collective_channel.py:54) (18 samples, 1.05%)</title><rect x="63.0193%" y="404" width="1.0532%" height="15" fill="rgb(213,64,8)" fg:x="1077" fg:w="18"/><text x="63.2693%" y="414.50"></text></g><g><title>array_view (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (2 samples, 0.12%)</title><rect x="63.9555%" y="420" width="0.1170%" height="15" fill="rgb(210,75,36)" fg:x="1093" fg:w="2"/><text x="64.2055%" y="430.50"></text></g><g><title>PyArray_View (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (2 samples, 0.12%)</title><rect x="63.9555%" y="436" width="0.1170%" height="15" fill="rgb(229,88,21)" fg:x="1093" fg:w="2"/><text x="64.2055%" y="446.50"></text></g><g><title>PyDataMem_UserNEW_ZEROED (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (2 samples, 0.12%)</title><rect x="64.5407%" y="468" width="0.1170%" height="15" fill="rgb(252,204,47)" fg:x="1103" fg:w="2"/><text x="64.7907%" y="478.50"></text></g><g><title>PyArray_Zeros (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (5 samples, 0.29%)</title><rect x="64.4822%" y="436" width="0.2926%" height="15" fill="rgb(208,77,27)" fg:x="1102" fg:w="5"/><text x="64.7322%" y="446.50"></text></g><g><title>PyArray_NewFromDescr_int (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (5 samples, 0.29%)</title><rect x="64.4822%" y="452" width="0.2926%" height="15" fill="rgb(221,76,26)" fg:x="1102" fg:w="5"/><text x="64.7322%" y="462.50"></text></g><g><title>_array_fill_strides (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (2 samples, 0.12%)</title><rect x="64.6577%" y="468" width="0.1170%" height="15" fill="rgb(225,139,18)" fg:x="1105" fg:w="2"/><text x="64.9077%" y="478.50"></text></g><g><title>write (ray/experimental/collective_channel.py:55) (15 samples, 0.88%)</title><rect x="64.0726%" y="404" width="0.8777%" height="15" fill="rgb(230,137,11)" fg:x="1095" fg:w="15"/><text x="64.3226%" y="414.50"></text></g><g><title>array_zeros (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (8 samples, 0.47%)</title><rect x="64.4822%" y="420" width="0.4681%" height="15" fill="rgb(212,28,1)" fg:x="1102" fg:w="8"/><text x="64.7322%" y="430.50"></text></g><g><title>_npy_parse_arguments (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (3 samples, 0.18%)</title><rect x="64.7747%" y="436" width="0.1755%" height="15" fill="rgb(248,164,17)" fg:x="1107" fg:w="3"/><text x="65.0247%" y="446.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.31.so) (2 samples, 0.12%)</title><rect x="65.3599%" y="484" width="0.1170%" height="15" fill="rgb(222,171,42)" fg:x="1117" fg:w="2"/><text x="65.6099%" y="494.50"></text></g><g><title>__errno_location (libpthread-2.31.so) (2 samples, 0.12%)</title><rect x="65.4769%" y="484" width="0.1170%" height="15" fill="rgb(243,84,45)" fg:x="1119" fg:w="2"/><text x="65.7269%" y="494.50"></text></g><g><title>PyArray_AssignArray (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (11 samples, 0.64%)</title><rect x="65.0673%" y="452" width="0.6437%" height="15" fill="rgb(252,49,23)" fg:x="1112" fg:w="11"/><text x="65.3173%" y="462.50"></text></g><g><title>raw_array_assign_array (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (11 samples, 0.64%)</title><rect x="65.0673%" y="468" width="0.6437%" height="15" fill="rgb(215,19,7)" fg:x="1112" fg:w="11"/><text x="65.3173%" y="478.50"></text></g><g><title>PyArray_CopyObject (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (12 samples, 0.70%)</title><rect x="65.0673%" y="436" width="0.7022%" height="15" fill="rgb(238,81,41)" fg:x="1112" fg:w="12"/><text x="65.3173%" y="446.50"></text></g><g><title>write (ray/experimental/collective_channel.py:57) (16 samples, 0.94%)</title><rect x="64.9503%" y="404" width="0.9362%" height="15" fill="rgb(210,199,37)" fg:x="1110" fg:w="16"/><text x="65.2003%" y="414.50"></text></g><g><title>array_assign_subscript (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (15 samples, 0.88%)</title><rect x="65.0088%" y="420" width="0.8777%" height="15" fill="rgb(244,192,49)" fg:x="1111" fg:w="15"/><text x="65.2588%" y="430.50"></text></g><g><title>PyArray_CopyObject (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (2 samples, 0.12%)</title><rect x="65.8865%" y="436" width="0.1170%" height="15" fill="rgb(226,211,11)" fg:x="1126" fg:w="2"/><text x="66.1365%" y="446.50"></text></g><g><title>PyArray_AssignArray (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (2 samples, 0.12%)</title><rect x="65.8865%" y="452" width="0.1170%" height="15" fill="rgb(236,162,54)" fg:x="1126" fg:w="2"/><text x="66.1365%" y="462.50"></text></g><g><title>raw_array_assign_array (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (2 samples, 0.12%)</title><rect x="65.8865%" y="468" width="0.1170%" height="15" fill="rgb(220,229,9)" fg:x="1126" fg:w="2"/><text x="66.1365%" y="478.50"></text></g><g><title>write (ray/experimental/collective_channel.py:59) (3 samples, 0.18%)</title><rect x="65.8865%" y="404" width="0.1755%" height="15" fill="rgb(250,87,22)" fg:x="1126" fg:w="3"/><text x="66.1365%" y="414.50"></text></g><g><title>array_assign_subscript (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (3 samples, 0.18%)</title><rect x="65.8865%" y="420" width="0.1755%" height="15" fill="rgb(239,43,17)" fg:x="1126" fg:w="3"/><text x="66.1365%" y="430.50"></text></g><g><title>write (ray/experimental/collective_channel.py:62) (5 samples, 0.29%)</title><rect x="66.0620%" y="404" width="0.2926%" height="15" fill="rgb(231,177,25)" fg:x="1129" fg:w="5"/><text x="66.3120%" y="414.50"></text></g><g><title>debug (logging/__init__.py:1433) (2 samples, 0.12%)</title><rect x="66.8812%" y="420" width="0.1170%" height="15" fill="rgb(219,179,1)" fg:x="1143" fg:w="2"/><text x="67.1312%" y="430.50"></text></g><g><title>write (ray/experimental/collective_channel.py:63) (12 samples, 0.70%)</title><rect x="66.3546%" y="404" width="0.7022%" height="15" fill="rgb(238,219,53)" fg:x="1134" fg:w="12"/><text x="66.6046%" y="414.50"></text></g><g><title>write (ray/experimental/collective_channel.py:68) (3 samples, 0.18%)</title><rect x="67.0568%" y="404" width="0.1755%" height="15" fill="rgb(232,167,36)" fg:x="1146" fg:w="3"/><text x="67.3068%" y="414.50"></text></g><g><title>send (ray/util/collective/collective.py:628) (3 samples, 0.18%)</title><rect x="67.5834%" y="420" width="0.1755%" height="15" fill="rgb(244,19,51)" fg:x="1155" fg:w="3"/><text x="67.8334%" y="430.50"></text></g><g><title>_check_and_get_group (ray/util/collective/collective.py:780) (6 samples, 0.35%)</title><rect x="67.7589%" y="436" width="0.3511%" height="15" fill="rgb(224,6,22)" fg:x="1158" fg:w="6"/><text x="68.0089%" y="446.50"></text></g><g><title>is_group_initialized (ray/util/collective/collective.py:118) (4 samples, 0.23%)</title><rect x="67.8760%" y="452" width="0.2341%" height="15" fill="rgb(224,145,5)" fg:x="1160" fg:w="4"/><text x="68.1260%" y="462.50"></text></g><g><title>is_group_exist (ray/util/collective/collective.py:80) (2 samples, 0.12%)</title><rect x="67.9930%" y="468" width="0.1170%" height="15" fill="rgb(234,130,49)" fg:x="1162" fg:w="2"/><text x="68.2430%" y="478.50"></text></g><g><title>send (ray/util/collective/collective.py:629) (8 samples, 0.47%)</title><rect x="67.7589%" y="420" width="0.4681%" height="15" fill="rgb(254,6,2)" fg:x="1158" fg:w="8"/><text x="68.0089%" y="430.50"></text></g><g><title>_check_and_get_group (ray/util/collective/collective.py:809) (2 samples, 0.12%)</title><rect x="68.1100%" y="436" width="0.1170%" height="15" fill="rgb(208,96,46)" fg:x="1164" fg:w="2"/><text x="68.3600%" y="446.50"></text></g><g><title>get_group_by_name (ray/util/collective/collective.py:84) (2 samples, 0.12%)</title><rect x="68.1100%" y="452" width="0.1170%" height="15" fill="rgb(239,3,39)" fg:x="1164" fg:w="2"/><text x="68.3600%" y="462.50"></text></g><g><title>send (ray/util/collective/collective.py:630) (4 samples, 0.23%)</title><rect x="68.2270%" y="420" width="0.2341%" height="15" fill="rgb(233,210,1)" fg:x="1166" fg:w="4"/><text x="68.4770%" y="430.50"></text></g><g><title>_check_rank_valid (ray/util/collective/collective.py:854) (3 samples, 0.18%)</title><rect x="68.2855%" y="436" width="0.1755%" height="15" fill="rgb(244,137,37)" fg:x="1167" fg:w="3"/><text x="68.5355%" y="446.50"></text></g><g><title>send (ray/util/collective/collective.py:631) (3 samples, 0.18%)</title><rect x="68.4611%" y="420" width="0.1755%" height="15" fill="rgb(240,136,2)" fg:x="1170" fg:w="3"/><text x="68.7111%" y="430.50"></text></g><g><title>_point2point (ray/util/collective/collective_group/gloo_collective_group.py:533) (4 samples, 0.23%)</title><rect x="68.8707%" y="452" width="0.2341%" height="15" fill="rgb(239,18,37)" fg:x="1177" fg:w="4"/><text x="69.1207%" y="462.50"></text></g><g><title>0x7f0f19639919 (libc-2.31.so) (2 samples, 0.12%)</title><rect x="70.3335%" y="500" width="0.1170%" height="15" fill="rgb(218,185,22)" fg:x="1202" fg:w="2"/><text x="70.5835%" y="510.50"></text></g><g><title>std::_Hashtable&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::type_index&gt;, std::hash&lt;std::type_index&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (pygloo.so) (3 samples, 0.18%)</title><rect x="70.9187%" y="772" width="0.1755%" height="15" fill="rgb(225,218,4)" fg:x="1212" fg:w="3"/><text x="71.1687%" y="782.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::__detail::_Select1st, std::hash&lt;std::type_index&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (pygloo.so) (3 samples, 0.18%)</title><rect x="70.9187%" y="788" width="0.1755%" height="15" fill="rgb(230,182,32)" fg:x="1212" fg:w="3"/><text x="71.1687%" y="798.50"></text></g><g><title>std::_Head_base&lt;(unsigned long)0, pybind11::detail::type_caster&lt;std::shared_ptr&lt;gloo::Context&gt;, void&gt;, false&gt;::_Head_base (pygloo.so) (9 samples, 0.53%)</title><rect x="70.6261%" y="580" width="0.5266%" height="15" fill="rgb(242,56,43)" fg:x="1207" fg:w="9"/><text x="70.8761%" y="590.50"></text></g><g><title>pybind11::detail::type_caster&lt;std::shared_ptr&lt;gloo::Context&gt;, void&gt;::type_caster (pygloo.so) (8 samples, 0.47%)</title><rect x="70.6846%" y="596" width="0.4681%" height="15" fill="rgb(233,99,24)" fg:x="1208" fg:w="8"/><text x="70.9346%" y="606.50"></text></g><g><title>pybind11::detail::copyable_holder_caster&lt;gloo::Context, std::shared_ptr&lt;gloo::Context&gt; &gt;::copyable_holder_caster (pygloo.so) (8 samples, 0.47%)</title><rect x="70.6846%" y="612" width="0.4681%" height="15" fill="rgb(234,209,42)" fg:x="1208" fg:w="8"/><text x="70.9346%" y="622.50"></text></g><g><title>pybind11::detail::type_caster_base&lt;gloo::Context&gt;::type_caster_base (pygloo.so) (8 samples, 0.47%)</title><rect x="70.6846%" y="628" width="0.4681%" height="15" fill="rgb(227,7,12)" fg:x="1208" fg:w="8"/><text x="70.9346%" y="638.50"></text></g><g><title>pybind11::detail::type_caster_base&lt;gloo::Context&gt;::type_caster_base (pygloo.so) (8 samples, 0.47%)</title><rect x="70.6846%" y="644" width="0.4681%" height="15" fill="rgb(245,203,43)" fg:x="1208" fg:w="8"/><text x="70.9346%" y="654.50"></text></g><g><title>pybind11::detail::type_caster_generic::type_caster_generic (pygloo.so) (7 samples, 0.41%)</title><rect x="70.7431%" y="660" width="0.4096%" height="15" fill="rgb(238,205,33)" fg:x="1209" fg:w="7"/><text x="70.9931%" y="670.50"></text></g><g><title>pybind11::detail::get_type_info (pygloo.so) (7 samples, 0.41%)</title><rect x="70.7431%" y="676" width="0.4096%" height="15" fill="rgb(231,56,7)" fg:x="1209" fg:w="7"/><text x="70.9931%" y="686.50"></text></g><g><title>pybind11::detail::get_global_type_info (pygloo.so) (7 samples, 0.41%)</title><rect x="70.7431%" y="692" width="0.4096%" height="15" fill="rgb(244,186,29)" fg:x="1209" fg:w="7"/><text x="70.9931%" y="702.50"></text></g><g><title>std::unordered_map&lt;std::type_index, pybind11::detail::type_info*, std::hash&lt;std::type_index&gt;, std::equal_to&lt;std::type_index&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt; &gt;::find (pygloo.so) (6 samples, 0.35%)</title><rect x="70.8016%" y="708" width="0.3511%" height="15" fill="rgb(234,111,31)" fg:x="1210" fg:w="6"/><text x="71.0516%" y="718.50"></text></g><g><title>std::_Hashtable&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::type_index&gt;, std::hash&lt;std::type_index&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (pygloo.so) (6 samples, 0.35%)</title><rect x="70.8016%" y="724" width="0.3511%" height="15" fill="rgb(241,149,10)" fg:x="1210" fg:w="6"/><text x="71.0516%" y="734.50"></text></g><g><title>std::_Hashtable&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::type_index&gt;, std::hash&lt;std::type_index&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (pygloo.so) (6 samples, 0.35%)</title><rect x="70.8016%" y="740" width="0.3511%" height="15" fill="rgb(249,206,44)" fg:x="1210" fg:w="6"/><text x="71.0516%" y="750.50"></text></g><g><title>std::_Hashtable&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::type_index&gt;, std::hash&lt;std::type_index&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (pygloo.so) (5 samples, 0.29%)</title><rect x="70.8602%" y="756" width="0.2926%" height="15" fill="rgb(251,153,30)" fg:x="1211" fg:w="5"/><text x="71.1102%" y="766.50"></text></g><g><title>pybind11::detail::get_global_type_info (pygloo.so) (3 samples, 0.18%)</title><rect x="71.3868%" y="724" width="0.1755%" height="15" fill="rgb(239,152,38)" fg:x="1220" fg:w="3"/><text x="71.6368%" y="734.50"></text></g><g><title>std::unordered_map&lt;std::type_index, pybind11::detail::type_info*, std::hash&lt;std::type_index&gt;, std::equal_to&lt;std::type_index&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt; &gt;::find (pygloo.so) (2 samples, 0.12%)</title><rect x="71.4453%" y="740" width="0.1170%" height="15" fill="rgb(249,139,47)" fg:x="1221" fg:w="2"/><text x="71.6953%" y="750.50"></text></g><g><title>std::_Hashtable&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::type_index&gt;, std::hash&lt;std::type_index&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (pygloo.so) (2 samples, 0.12%)</title><rect x="71.4453%" y="756" width="0.1170%" height="15" fill="rgb(244,64,35)" fg:x="1221" fg:w="2"/><text x="71.6953%" y="766.50"></text></g><g><title>std::_Head_base&lt;(unsigned long)3, pybind11::detail::type_caster&lt;pygloo::glooDataType_t, void&gt;, false&gt;::_Head_base (pygloo.so) (6 samples, 0.35%)</title><rect x="71.2697%" y="628" width="0.3511%" height="15" fill="rgb(216,46,15)" fg:x="1218" fg:w="6"/><text x="71.5197%" y="638.50"></text></g><g><title>pybind11::detail::type_caster&lt;pygloo::glooDataType_t, void&gt;::type_caster (pygloo.so) (6 samples, 0.35%)</title><rect x="71.2697%" y="644" width="0.3511%" height="15" fill="rgb(250,74,19)" fg:x="1218" fg:w="6"/><text x="71.5197%" y="654.50"></text></g><g><title>pybind11::detail::type_caster_base&lt;pygloo::glooDataType_t&gt;::type_caster_base (pygloo.so) (6 samples, 0.35%)</title><rect x="71.2697%" y="660" width="0.3511%" height="15" fill="rgb(249,42,33)" fg:x="1218" fg:w="6"/><text x="71.5197%" y="670.50"></text></g><g><title>pybind11::detail::type_caster_base&lt;pygloo::glooDataType_t&gt;::type_caster_base (pygloo.so) (6 samples, 0.35%)</title><rect x="71.2697%" y="676" width="0.3511%" height="15" fill="rgb(242,149,17)" fg:x="1218" fg:w="6"/><text x="71.5197%" y="686.50"></text></g><g><title>pybind11::detail::type_caster_generic::type_caster_generic (pygloo.so) (5 samples, 0.29%)</title><rect x="71.3283%" y="692" width="0.2926%" height="15" fill="rgb(244,29,21)" fg:x="1219" fg:w="5"/><text x="71.5783%" y="702.50"></text></g><g><title>pybind11::detail::get_type_info (pygloo.so) (5 samples, 0.29%)</title><rect x="71.3283%" y="708" width="0.2926%" height="15" fill="rgb(220,130,37)" fg:x="1219" fg:w="5"/><text x="71.5783%" y="718.50"></text></g><g><title>pybind11::detail::argument_loader&lt;std::shared_ptr&lt;gloo::Context&gt; const&amp;, long, unsigned long, pygloo::glooDataType_t, int, unsigned int&gt;::argument_loader (pygloo.so) (18 samples, 1.05%)</title><rect x="70.6261%" y="532" width="1.0532%" height="15" fill="rgb(211,67,2)" fg:x="1207" fg:w="18"/><text x="70.8761%" y="542.50"></text></g><g><title>std::tuple&lt;pybind11::detail::type_caster&lt;std::shared_ptr&lt;gloo::Context&gt;, void&gt;, pybind11::detail::type_caster&lt;long, void&gt;, pybind11::detail::type_caster&lt;unsigned long, void&gt;, pybind11::detail::type_caster&lt;pygloo::glooDataType_t, void&gt;, pybind11::detail::type_caster&lt;int, void&gt;, pybind11::detail::type_caster&lt;unsigned int, void&gt; &gt;::tuple&lt;void, true&gt; (pygloo.so) (18 samples, 1.05%)</title><rect x="70.6261%" y="548" width="1.0532%" height="15" fill="rgb(235,68,52)" fg:x="1207" fg:w="18"/><text x="70.8761%" y="558.50"></text></g><g><title>std::_Tuple_impl&lt;(unsigned long)0, pybind11::detail::type_caster&lt;std::shared_ptr&lt;gloo::Context&gt;, void&gt;, pybind11::detail::type_caster&lt;long, void&gt;, pybind11::detail::type_caster&lt;unsigned long, void&gt;, pybind11::detail::type_caster&lt;pygloo::glooDataType_t, void&gt;, pybind11::detail::type_caster&lt;int, void&gt;, pybind11::detail::type_caster&lt;unsigned int, void&gt; &gt;::_Tuple_impl (pygloo.so) (18 samples, 1.05%)</title><rect x="70.6261%" y="564" width="1.0532%" height="15" fill="rgb(246,142,3)" fg:x="1207" fg:w="18"/><text x="70.8761%" y="574.50"></text></g><g><title>std::_Tuple_impl&lt;(unsigned long)1, pybind11::detail::type_caster&lt;long, void&gt;, pybind11::detail::type_caster&lt;unsigned long, void&gt;, pybind11::detail::type_caster&lt;pygloo::glooDataType_t, void&gt;, pybind11::detail::type_caster&lt;int, void&gt;, pybind11::detail::type_caster&lt;unsigned int, void&gt; &gt;::_Tuple_impl (pygloo.so) (9 samples, 0.53%)</title><rect x="71.1527%" y="580" width="0.5266%" height="15" fill="rgb(241,25,7)" fg:x="1216" fg:w="9"/><text x="71.4027%" y="590.50"></text></g><g><title>std::_Tuple_impl&lt;(unsigned long)2, pybind11::detail::type_caster&lt;unsigned long, void&gt;, pybind11::detail::type_caster&lt;pygloo::glooDataType_t, void&gt;, pybind11::detail::type_caster&lt;int, void&gt;, pybind11::detail::type_caster&lt;unsigned int, void&gt; &gt;::_Tuple_impl (pygloo.so) (9 samples, 0.53%)</title><rect x="71.1527%" y="596" width="0.5266%" height="15" fill="rgb(242,119,39)" fg:x="1216" fg:w="9"/><text x="71.4027%" y="606.50"></text></g><g><title>std::_Tuple_impl&lt;(unsigned long)3, pybind11::detail::type_caster&lt;pygloo::glooDataType_t, void&gt;, pybind11::detail::type_caster&lt;int, void&gt;, pybind11::detail::type_caster&lt;unsigned int, void&gt; &gt;::_Tuple_impl (pygloo.so) (8 samples, 0.47%)</title><rect x="71.2112%" y="612" width="0.4681%" height="15" fill="rgb(241,98,45)" fg:x="1217" fg:w="8"/><text x="71.4612%" y="622.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.31.so) (2 samples, 0.12%)</title><rect x="71.9719%" y="628" width="0.1170%" height="15" fill="rgb(254,28,30)" fg:x="1230" fg:w="2"/><text x="72.2219%" y="638.50"></text></g><g><title>gloo::transport::tcp::Pair::sendNotifySendReady (pygloo.so) (147 samples, 8.60%)</title><rect x="72.0889%" y="628" width="8.6015%" height="15" fill="rgb(241,142,54)" fg:x="1232" fg:w="147"/><text x="72.3389%" y="638.50">gloo::transp..</text></g><g><title>gloo::transport::tcp::Pair::sendAsyncMode (pygloo.so) (147 samples, 8.60%)</title><rect x="72.0889%" y="644" width="8.6015%" height="15" fill="rgb(222,85,15)" fg:x="1232" fg:w="147"/><text x="72.3389%" y="654.50">gloo::transp..</text></g><g><title>gloo::transport::tcp::Pair::write (pygloo.so) (147 samples, 8.60%)</title><rect x="72.0889%" y="660" width="8.6015%" height="15" fill="rgb(210,85,47)" fg:x="1232" fg:w="147"/><text x="72.3389%" y="670.50">gloo::transp..</text></g><g><title>writev (libc-2.31.so) (147 samples, 8.60%)</title><rect x="72.0889%" y="676" width="8.6015%" height="15" fill="rgb(224,206,25)" fg:x="1232" fg:w="147"/><text x="72.3389%" y="686.50">writev (libc..</text></g><g><title>gloo::transport::tcp::Pair::sendUnboundBuffer (pygloo.so) (48 samples, 2.81%)</title><rect x="80.6905%" y="628" width="2.8087%" height="15" fill="rgb(243,201,19)" fg:x="1379" fg:w="48"/><text x="80.9405%" y="638.50">gl..</text></g><g><title>gloo::transport::tcp::Pair::sendAsyncMode (pygloo.so) (48 samples, 2.81%)</title><rect x="80.6905%" y="644" width="2.8087%" height="15" fill="rgb(236,59,4)" fg:x="1379" fg:w="48"/><text x="80.9405%" y="654.50">gl..</text></g><g><title>gloo::transport::tcp::Pair::write (pygloo.so) (48 samples, 2.81%)</title><rect x="80.6905%" y="660" width="2.8087%" height="15" fill="rgb(254,179,45)" fg:x="1379" fg:w="48"/><text x="80.9405%" y="670.50">gl..</text></g><g><title>writev (libc-2.31.so) (48 samples, 2.81%)</title><rect x="80.6905%" y="676" width="2.8087%" height="15" fill="rgb(226,14,10)" fg:x="1379" fg:w="48"/><text x="80.9405%" y="686.50">wr..</text></g><g><title>pthread_mutex_lock (libpthread-2.31.so) (27 samples, 1.58%)</title><rect x="83.5576%" y="628" width="1.5799%" height="15" fill="rgb(244,27,41)" fg:x="1428" fg:w="27"/><text x="83.8076%" y="638.50"></text></g><g><title>__lll_lock_wait (libpthread-2.31.so) (25 samples, 1.46%)</title><rect x="83.6747%" y="644" width="1.4628%" height="15" fill="rgb(235,35,32)" fg:x="1430" fg:w="25"/><text x="83.9247%" y="654.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, std::deque&lt;std::tuple&lt;gloo::WeakNonOwningPtr&lt;gloo::transport::tcp::UnboundBuffer&gt;, unsigned long, unsigned long&gt;, std::allocator&lt;std::tuple&lt;gloo::WeakNonOwningPtr&lt;gloo::transport::tcp::UnboundBuffer&gt;, unsigned long, unsigned long&gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long const&amp;&gt;, std::tuple&lt;&gt; &gt; (pygloo.so) (3 samples, 0.18%)</title><rect x="85.2545%" y="644" width="0.1755%" height="15" fill="rgb(218,68,31)" fg:x="1457" fg:w="3"/><text x="85.5045%" y="654.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (3 samples, 0.18%)</title><rect x="85.2545%" y="660" width="0.1755%" height="15" fill="rgb(207,120,37)" fg:x="1457" fg:w="3"/><text x="85.5045%" y="670.50"></text></g><g><title>malloc (libc-2.31.so) (3 samples, 0.18%)</title><rect x="85.2545%" y="676" width="0.1755%" height="15" fill="rgb(227,98,0)" fg:x="1457" fg:w="3"/><text x="85.5045%" y="686.50"></text></g><g><title>gloo::transport::tcp::UnboundBuffer::send (pygloo.so) (232 samples, 13.58%)</title><rect x="71.9134%" y="596" width="13.5752%" height="15" fill="rgb(207,7,3)" fg:x="1229" fg:w="232"/><text x="72.1634%" y="606.50">gloo::transport::tcp:..</text></g><g><title>gloo::transport::tcp::Pair::send (pygloo.so) (231 samples, 13.52%)</title><rect x="71.9719%" y="612" width="13.5167%" height="15" fill="rgb(206,98,19)" fg:x="1230" fg:w="231"/><text x="72.2219%" y="622.50">gloo::transport::tcp..</text></g><g><title>std::__detail::_Map_base&lt;unsigned long, std::pair&lt;unsigned long const, std::deque&lt;std::tuple&lt;gloo::WeakNonOwningPtr&lt;gloo::transport::tcp::UnboundBuffer&gt;, unsigned long, unsigned long&gt;, std::allocator&lt;std::tuple&lt;gloo::WeakNonOwningPtr&lt;gloo::transport::tcp::UnboundBuffer&gt;, unsigned long, unsigned long&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned long const, std::deque&lt;std::tuple&lt;gloo::WeakNonOwningPtr&lt;gloo::transport::tcp::UnboundBuffer&gt;, unsigned long, unsigned long&gt;, std::allocator&lt;std::tuple&lt;gloo::WeakNonOwningPtr&lt;gloo::transport::tcp::UnboundBuffer&gt;, unsigned long, unsigned long&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (pygloo.so) (6 samples, 0.35%)</title><rect x="85.1375%" y="628" width="0.3511%" height="15" fill="rgb(217,5,26)" fg:x="1455" fg:w="6"/><text x="85.3875%" y="638.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;pygloo::future::Future&gt;::construct&lt;pygloo::future::Future, std::unique_ptr&lt;gloo::transport::UnboundBuffer, std::default_delete&lt;gloo::transport::UnboundBuffer&gt; &gt;, pygloo::future::Op&gt; (pygloo.so) (5 samples, 0.29%)</title><rect x="85.6641%" y="708" width="0.2926%" height="15" fill="rgb(235,190,38)" fg:x="1464" fg:w="5"/><text x="85.9141%" y="718.50"></text></g><g><title>std::unique_ptr&lt;gloo::transport::UnboundBuffer, std::default_delete&lt;gloo::transport::UnboundBuffer&gt; &gt;::unique_ptr (pygloo.so) (4 samples, 0.23%)</title><rect x="85.7226%" y="724" width="0.2341%" height="15" fill="rgb(247,86,24)" fg:x="1465" fg:w="4"/><text x="85.9726%" y="734.50"></text></g><g><title>std::unique_ptr&lt;gloo::transport::UnboundBuffer, std::default_delete&lt;gloo::transport::UnboundBuffer&gt; &gt;::release (pygloo.so) (2 samples, 0.12%)</title><rect x="85.8397%" y="740" width="0.1170%" height="15" fill="rgb(205,101,16)" fg:x="1467" fg:w="2"/><text x="86.0897%" y="750.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;pygloo::future::Future, std::allocator&lt;pygloo::future::Future&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;std::unique_ptr&lt;gloo::transport::UnboundBuffer, std::default_delete&lt;gloo::transport::UnboundBuffer&gt; &gt;, pygloo::future::Op&gt; (pygloo.so) (8 samples, 0.47%)</title><rect x="85.5471%" y="676" width="0.4681%" height="15" fill="rgb(246,168,33)" fg:x="1462" fg:w="8"/><text x="85.7971%" y="686.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;pygloo::future::Future&gt; &gt;::construct&lt;pygloo::future::Future, std::unique_ptr&lt;gloo::transport::UnboundBuffer, std::default_delete&lt;gloo::transport::UnboundBuffer&gt; &gt;, pygloo::future::Op&gt; (pygloo.so) (7 samples, 0.41%)</title><rect x="85.6056%" y="692" width="0.4096%" height="15" fill="rgb(231,114,1)" fg:x="1463" fg:w="7"/><text x="85.8556%" y="702.50"></text></g><g><title>std::make_shared&lt;pygloo::future::Future, std::unique_ptr&lt;gloo::transport::UnboundBuffer, std::default_delete&lt;gloo::transport::UnboundBuffer&gt; &gt;, pygloo::future::Op&gt; (pygloo.so) (9 samples, 0.53%)</title><rect x="85.5471%" y="596" width="0.5266%" height="15" fill="rgb(207,184,53)" fg:x="1462" fg:w="9"/><text x="85.7971%" y="606.50"></text></g><g><title>std::allocate_shared&lt;pygloo::future::Future, std::allocator&lt;pygloo::future::Future&gt;, std::unique_ptr&lt;gloo::transport::UnboundBuffer, std::default_delete&lt;gloo::transport::UnboundBuffer&gt; &gt;, pygloo::future::Op&gt; (pygloo.so) (9 samples, 0.53%)</title><rect x="85.5471%" y="612" width="0.5266%" height="15" fill="rgb(224,95,51)" fg:x="1462" fg:w="9"/><text x="85.7971%" y="622.50"></text></g><g><title>std::shared_ptr&lt;pygloo::future::Future&gt;::shared_ptr&lt;std::allocator&lt;pygloo::future::Future&gt;, std::unique_ptr&lt;gloo::transport::UnboundBuffer, std::default_delete&lt;gloo::transport::UnboundBuffer&gt; &gt;, pygloo::future::Op&gt; (pygloo.so) (9 samples, 0.53%)</title><rect x="85.5471%" y="628" width="0.5266%" height="15" fill="rgb(212,188,45)" fg:x="1462" fg:w="9"/><text x="85.7971%" y="638.50"></text></g><g><title>std::__shared_ptr&lt;pygloo::future::Future, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;pygloo::future::Future&gt;, std::unique_ptr&lt;gloo::transport::UnboundBuffer, std::default_delete&lt;gloo::transport::UnboundBuffer&gt; &gt;, pygloo::future::Op&gt; (pygloo.so) (9 samples, 0.53%)</title><rect x="85.5471%" y="644" width="0.5266%" height="15" fill="rgb(223,154,38)" fg:x="1462" fg:w="9"/><text x="85.7971%" y="654.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;pygloo::future::Future, std::allocator&lt;pygloo::future::Future&gt;, std::unique_ptr&lt;gloo::transport::UnboundBuffer, std::default_delete&lt;gloo::transport::UnboundBuffer&gt; &gt;, pygloo::future::Op&gt; (pygloo.so) (9 samples, 0.53%)</title><rect x="85.5471%" y="660" width="0.5266%" height="15" fill="rgb(251,22,52)" fg:x="1462" fg:w="9"/><text x="85.7971%" y="670.50"></text></g><g><title>pygloo::isend_wrapper (pygloo.so) (245 samples, 14.34%)</title><rect x="71.7964%" y="564" width="14.3359%" height="15" fill="rgb(229,209,22)" fg:x="1227" fg:w="245"/><text x="72.0464%" y="574.50">pygloo::isend_wrapper ..</text></g><g><title>pygloo::isend&lt;unsigned char&gt; (pygloo.so) (245 samples, 14.34%)</title><rect x="71.7964%" y="580" width="14.3359%" height="15" fill="rgb(234,138,34)" fg:x="1227" fg:w="245"/><text x="72.0464%" y="590.50">pygloo::isend&lt;unsigned..</text></g><g><title>pybind11::detail::argument_loader&lt;std::shared_ptr&lt;gloo::Context&gt; const&amp;, long, unsigned long, pygloo::glooDataType_t, int, unsigned int&gt;::call&lt;std::shared_ptr&lt;pygloo::future::Future&gt;, pybind11::detail::void_type, std::shared_ptr&lt;pygloo::future::Future&gt; (*&amp;)(std::shared_ptr&lt;gloo::Context&gt; const&amp;, long, unsigned long, pygloo::glooDataType_t, int, unsigned int)&gt; &amp;&amp; (pygloo.so) (249 samples, 14.57%)</title><rect x="71.6793%" y="532" width="14.5699%" height="15" fill="rgb(212,95,11)" fg:x="1225" fg:w="249"/><text x="71.9293%" y="542.50">pybind11::detail::argu..</text></g><g><title>pybind11::detail::argument_loader&lt;std::shared_ptr&lt;gloo::Context&gt; const&amp;, long, unsigned long, pygloo::glooDataType_t, int, unsigned int&gt;::call_impl&lt;std::shared_ptr&lt;pygloo::future::Future&gt;, std::shared_ptr&lt;pygloo::future::Future&gt; (*&amp;)(std::shared_ptr&lt;gloo::Context&gt; const&amp;, long, unsigned long, pygloo::glooDataType_t, int, unsigned int), (unsigned long)0, (unsigned long)1, (unsigned long)2, (unsigned long)3, (unsigned long)4, (unsigned long)5, pybind11::detail::void_type&gt; &amp;&amp; (pygloo.so) (247 samples, 14.45%)</title><rect x="71.7964%" y="548" width="14.4529%" height="15" fill="rgb(240,179,47)" fg:x="1227" fg:w="247"/><text x="72.0464%" y="558.50">pybind11::detail::argu..</text></g><g><title>pybind11::detail::copyable_holder_caster&lt;gloo::Context, std::shared_ptr&lt;gloo::Context&gt; &gt;::load_value (pygloo.so) (2 samples, 0.12%)</title><rect x="86.6004%" y="596" width="0.1170%" height="15" fill="rgb(240,163,11)" fg:x="1480" fg:w="2"/><text x="86.8504%" y="606.50"></text></g><g><title>std::shared_ptr&lt;gloo::Context&gt;::operator= (pygloo.so) (2 samples, 0.12%)</title><rect x="86.6004%" y="612" width="0.1170%" height="15" fill="rgb(236,37,12)" fg:x="1480" fg:w="2"/><text x="86.8504%" y="622.50"></text></g><g><title>std::__shared_ptr&lt;gloo::Context, (__gnu_cxx::_Lock_policy)2&gt;::operator= (pygloo.so) (2 samples, 0.12%)</title><rect x="86.6004%" y="628" width="0.1170%" height="15" fill="rgb(232,164,16)" fg:x="1480" fg:w="2"/><text x="86.8504%" y="638.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator= (pygloo.so) (2 samples, 0.12%)</title><rect x="86.6004%" y="644" width="0.1170%" height="15" fill="rgb(244,205,15)" fg:x="1480" fg:w="2"/><text x="86.8504%" y="654.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy (pygloo.so) (2 samples, 0.12%)</title><rect x="86.6004%" y="660" width="0.1170%" height="15" fill="rgb(223,117,47)" fg:x="1480" fg:w="2"/><text x="86.8504%" y="670.50"></text></g><g><title>__gnu_cxx::__atomic_add_dispatch (pygloo.so) (2 samples, 0.12%)</title><rect x="86.6004%" y="676" width="0.1170%" height="15" fill="rgb(244,107,35)" fg:x="1480" fg:w="2"/><text x="86.8504%" y="686.50"></text></g><g><title>pybind11::detail::copyable_holder_caster&lt;gloo::Context, std::shared_ptr&lt;gloo::Context&gt; &gt;::load (pygloo.so) (6 samples, 0.35%)</title><rect x="86.4248%" y="564" width="0.3511%" height="15" fill="rgb(205,140,8)" fg:x="1477" fg:w="6"/><text x="86.6748%" y="574.50"></text></g><g><title>pybind11::detail::type_caster_generic::load_impl&lt;pybind11::detail::copyable_holder_caster&lt;gloo::Context, std::shared_ptr&lt;gloo::Context&gt; &gt; &gt; (pygloo.so) (6 samples, 0.35%)</title><rect x="86.4248%" y="580" width="0.3511%" height="15" fill="rgb(228,84,46)" fg:x="1477" fg:w="6"/><text x="86.6748%" y="590.50"></text></g><g><title>pybind11::detail::type_caster&lt;int, void&gt;::load (pygloo.so) (2 samples, 0.12%)</title><rect x="86.7759%" y="564" width="0.1170%" height="15" fill="rgb(254,188,9)" fg:x="1483" fg:w="2"/><text x="87.0259%" y="574.50"></text></g><g><title>std::_Bit_reference::operator bool (pygloo.so) (2 samples, 0.12%)</title><rect x="87.0099%" y="564" width="0.1170%" height="15" fill="rgb(206,112,54)" fg:x="1487" fg:w="2"/><text x="87.2599%" y="574.50"></text></g><g><title>std::get&lt;(unsigned long)0, pybind11::detail::type_caster&lt;std::shared_ptr&lt;gloo::Context&gt;, void&gt;, pybind11::detail::type_caster&lt;long, void&gt;, pybind11::detail::type_caster&lt;unsigned long, void&gt;, pybind11::detail::type_caster&lt;pygloo::glooDataType_t, void&gt;, pybind11::detail::type_caster&lt;int, void&gt;, pybind11::detail::type_caster&lt;unsigned int, void&gt; &gt; (pygloo.so) (2 samples, 0.12%)</title><rect x="87.1270%" y="564" width="0.1170%" height="15" fill="rgb(216,84,49)" fg:x="1489" fg:w="2"/><text x="87.3770%" y="574.50"></text></g><g><title>pybind11::detail::argument_loader&lt;std::shared_ptr&lt;gloo::Context&gt; const&amp;, long, unsigned long, pygloo::glooDataType_t, int, unsigned int&gt;::load_args (pygloo.so) (19 samples, 1.11%)</title><rect x="86.2493%" y="532" width="1.1118%" height="15" fill="rgb(214,194,35)" fg:x="1474" fg:w="19"/><text x="86.4993%" y="542.50"></text></g><g><title>pybind11::detail::argument_loader&lt;std::shared_ptr&lt;gloo::Context&gt; const&amp;, long, unsigned long, pygloo::glooDataType_t, int, unsigned int&gt;::load_impl_sequence&lt;(unsigned long)0, (unsigned long)1, (unsigned long)2, (unsigned long)3, (unsigned long)4, (unsigned long)5&gt; (pygloo.so) (19 samples, 1.11%)</title><rect x="86.2493%" y="548" width="1.1118%" height="15" fill="rgb(249,28,3)" fg:x="1474" fg:w="19"/><text x="86.4993%" y="558.50"></text></g><g><title>std::get&lt;(unsigned long)5, pybind11::detail::type_caster&lt;std::shared_ptr&lt;gloo::Context&gt;, void&gt;, pybind11::detail::type_caster&lt;long, void&gt;, pybind11::detail::type_caster&lt;unsigned long, void&gt;, pybind11::detail::type_caster&lt;pygloo::glooDataType_t, void&gt;, pybind11::detail::type_caster&lt;int, void&gt;, pybind11::detail::type_caster&lt;unsigned int, void&gt; &gt; (pygloo.so) (2 samples, 0.12%)</title><rect x="87.2440%" y="564" width="0.1170%" height="15" fill="rgb(222,56,52)" fg:x="1491" fg:w="2"/><text x="87.4940%" y="574.50"></text></g><g><title>std::__get_helper&lt;(unsigned long)5, pybind11::detail::type_caster&lt;unsigned int, void&gt;, &gt; (pygloo.so) (2 samples, 0.12%)</title><rect x="87.2440%" y="580" width="0.1170%" height="15" fill="rgb(245,217,50)" fg:x="1491" fg:w="2"/><text x="87.4940%" y="590.50"></text></g><g><title>std::_Tuple_impl&lt;(unsigned long)5, pybind11::detail::type_caster&lt;unsigned int, void&gt; &gt;::_M_head (pygloo.so) (2 samples, 0.12%)</title><rect x="87.2440%" y="596" width="0.1170%" height="15" fill="rgb(213,201,24)" fg:x="1491" fg:w="2"/><text x="87.4940%" y="606.50"></text></g><g><title>std::_Hashtable&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::type_index&gt;, std::hash&lt;std::type_index&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (pygloo.so) (3 samples, 0.18%)</title><rect x="87.4781%" y="660" width="0.1755%" height="15" fill="rgb(248,116,28)" fg:x="1495" fg:w="3"/><text x="87.7281%" y="670.50"></text></g><g><title>std::_Hashtable&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::type_index&gt;, std::hash&lt;std::type_index&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (pygloo.so) (2 samples, 0.12%)</title><rect x="87.5366%" y="676" width="0.1170%" height="15" fill="rgb(219,72,43)" fg:x="1496" fg:w="2"/><text x="87.7866%" y="686.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::type_index&gt;, std::hash&lt;std::type_index&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (pygloo.so) (2 samples, 0.12%)</title><rect x="87.5366%" y="692" width="0.1170%" height="15" fill="rgb(209,138,14)" fg:x="1496" fg:w="2"/><text x="87.7866%" y="702.50"></text></g><g><title>std::__detail::_Equal_helper&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::type_index&gt;, unsigned long, false&gt;::_S_equals (pygloo.so) (2 samples, 0.12%)</title><rect x="87.5366%" y="708" width="0.1170%" height="15" fill="rgb(222,18,33)" fg:x="1496" fg:w="2"/><text x="87.7866%" y="718.50"></text></g><g><title>pybind11::detail::get_global_type_info (pygloo.so) (5 samples, 0.29%)</title><rect x="87.4195%" y="612" width="0.2926%" height="15" fill="rgb(213,199,7)" fg:x="1494" fg:w="5"/><text x="87.6695%" y="622.50"></text></g><g><title>std::unordered_map&lt;std::type_index, pybind11::detail::type_info*, std::hash&lt;std::type_index&gt;, std::equal_to&lt;std::type_index&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt; &gt;::find (pygloo.so) (4 samples, 0.23%)</title><rect x="87.4781%" y="628" width="0.2341%" height="15" fill="rgb(250,110,10)" fg:x="1495" fg:w="4"/><text x="87.7281%" y="638.50"></text></g><g><title>std::_Hashtable&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::type_index&gt;, std::hash&lt;std::type_index&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (pygloo.so) (4 samples, 0.23%)</title><rect x="87.4781%" y="644" width="0.2341%" height="15" fill="rgb(248,123,6)" fg:x="1495" fg:w="4"/><text x="87.7281%" y="654.50"></text></g><g><title>std::_Hashtable&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::type_index&gt;, std::hash&lt;std::type_index&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (pygloo.so) (2 samples, 0.12%)</title><rect x="87.7121%" y="660" width="0.1170%" height="15" fill="rgb(206,91,31)" fg:x="1499" fg:w="2"/><text x="87.9621%" y="670.50"></text></g><g><title>pybind11::detail::get_type_info (pygloo.so) (8 samples, 0.47%)</title><rect x="87.4195%" y="596" width="0.4681%" height="15" fill="rgb(211,154,13)" fg:x="1494" fg:w="8"/><text x="87.6695%" y="606.50"></text></g><g><title>pybind11::detail::get_local_type_info (pygloo.so) (3 samples, 0.18%)</title><rect x="87.7121%" y="612" width="0.1755%" height="15" fill="rgb(225,148,7)" fg:x="1499" fg:w="3"/><text x="87.9621%" y="622.50"></text></g><g><title>std::unordered_map&lt;std::type_index, pybind11::detail::type_info*, std::hash&lt;std::type_index&gt;, std::equal_to&lt;std::type_index&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt; &gt;::find (pygloo.so) (3 samples, 0.18%)</title><rect x="87.7121%" y="628" width="0.1755%" height="15" fill="rgb(220,160,43)" fg:x="1499" fg:w="3"/><text x="87.9621%" y="638.50"></text></g><g><title>std::_Hashtable&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::type_index&gt;, std::hash&lt;std::type_index&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (pygloo.so) (3 samples, 0.18%)</title><rect x="87.7121%" y="644" width="0.1755%" height="15" fill="rgb(213,52,39)" fg:x="1499" fg:w="3"/><text x="87.9621%" y="654.50"></text></g><g><title>pybind11::detail::type_caster_base&lt;pygloo::future::Future&gt;::src_and_type (pygloo.so) (9 samples, 0.53%)</title><rect x="87.4195%" y="564" width="0.5266%" height="15" fill="rgb(243,137,7)" fg:x="1494" fg:w="9"/><text x="87.6695%" y="574.50"></text></g><g><title>pybind11::detail::type_caster_generic::src_and_type (pygloo.so) (9 samples, 0.53%)</title><rect x="87.4195%" y="580" width="0.5266%" height="15" fill="rgb(230,79,13)" fg:x="1494" fg:w="9"/><text x="87.6695%" y="590.50"></text></g><g><title>pybind11::detail::get_global_type_info (pygloo.so) (3 samples, 0.18%)</title><rect x="88.0632%" y="612" width="0.1755%" height="15" fill="rgb(247,105,23)" fg:x="1505" fg:w="3"/><text x="88.3132%" y="622.50"></text></g><g><title>std::unordered_map&lt;std::type_index, pybind11::detail::type_info*, std::hash&lt;std::type_index&gt;, std::equal_to&lt;std::type_index&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt; &gt;::find (pygloo.so) (2 samples, 0.12%)</title><rect x="88.1217%" y="628" width="0.1170%" height="15" fill="rgb(223,179,41)" fg:x="1506" fg:w="2"/><text x="88.3717%" y="638.50"></text></g><g><title>std::_Hashtable&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::type_index&gt;, std::hash&lt;std::type_index&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (pygloo.so) (2 samples, 0.12%)</title><rect x="88.1217%" y="644" width="0.1170%" height="15" fill="rgb(218,9,34)" fg:x="1506" fg:w="2"/><text x="88.3717%" y="654.50"></text></g><g><title>pybind11::detail::get_type_info (pygloo.so) (4 samples, 0.23%)</title><rect x="88.0632%" y="596" width="0.2341%" height="15" fill="rgb(222,106,8)" fg:x="1505" fg:w="4"/><text x="88.3132%" y="606.50"></text></g><g><title>std::__detail::_Equal_helper&lt;void const*, std::pair&lt;void const* const, pybind11::detail::instance*&gt;, std::__detail::_Select1st, std::equal_to&lt;void const*&gt;, unsigned long, false&gt;::_S_equals (pygloo.so) (2 samples, 0.12%)</title><rect x="88.4143%" y="740" width="0.1170%" height="15" fill="rgb(211,220,0)" fg:x="1511" fg:w="2"/><text x="88.6643%" y="750.50"></text></g><g><title>std::__detail::_Select1st::operator()&lt;std::pair&lt;void const* const, pybind11::detail::instance*&gt;&amp;&gt; (pygloo.so) (2 samples, 0.12%)</title><rect x="88.4143%" y="756" width="0.1170%" height="15" fill="rgb(229,52,16)" fg:x="1511" fg:w="2"/><text x="88.6643%" y="766.50"></text></g><g><title>std::get&lt;(unsigned long)0, void const* const, pybind11::detail::instance*&gt; (pygloo.so) (2 samples, 0.12%)</title><rect x="88.4143%" y="772" width="0.1170%" height="15" fill="rgb(212,155,18)" fg:x="1511" fg:w="2"/><text x="88.6643%" y="782.50"></text></g><g><title>std::_Hashtable&lt;void const*, std::pair&lt;void const* const, pybind11::detail::instance*&gt;, std::allocator&lt;std::pair&lt;void const* const, pybind11::detail::instance*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;void const*&gt;, std::hash&lt;void const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, false&gt; &gt;::_M_find_before_node (pygloo.so) (3 samples, 0.18%)</title><rect x="88.4143%" y="708" width="0.1755%" height="15" fill="rgb(242,21,14)" fg:x="1511" fg:w="3"/><text x="88.6643%" y="718.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;void const*, std::pair&lt;void const* const, pybind11::detail::instance*&gt;, std::__detail::_Select1st, std::equal_to&lt;void const*&gt;, std::hash&lt;void const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, false&gt; &gt;::_M_equals (pygloo.so) (3 samples, 0.18%)</title><rect x="88.4143%" y="724" width="0.1755%" height="15" fill="rgb(222,19,48)" fg:x="1511" fg:w="3"/><text x="88.6643%" y="734.50"></text></g><g><title>std::_Hashtable&lt;void const*, std::pair&lt;void const* const, pybind11::detail::instance*&gt;, std::allocator&lt;std::pair&lt;void const* const, pybind11::detail::instance*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;void const*&gt;, std::hash&lt;void const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, false&gt; &gt;::_M_insert_multi_node (pygloo.so) (6 samples, 0.35%)</title><rect x="88.2972%" y="692" width="0.3511%" height="15" fill="rgb(232,45,27)" fg:x="1509" fg:w="6"/><text x="88.5472%" y="702.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;void const* const, pybind11::detail::instance*&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;void*&amp;, pybind11::detail::instance*&amp;&gt; (pygloo.so) (2 samples, 0.12%)</title><rect x="88.7068%" y="692" width="0.1170%" height="15" fill="rgb(249,103,42)" fg:x="1516" fg:w="2"/><text x="88.9568%" y="702.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;void const* const, pybind11::detail::instance*&gt;, false&gt; &gt; &gt;::allocate (pygloo.so) (2 samples, 0.12%)</title><rect x="88.7068%" y="708" width="0.1170%" height="15" fill="rgb(246,81,33)" fg:x="1516" fg:w="2"/><text x="88.9568%" y="718.50"></text></g><g><title>std::_Hashtable&lt;void const*, std::pair&lt;void const* const, pybind11::detail::instance*&gt;, std::allocator&lt;std::pair&lt;void const* const, pybind11::detail::instance*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;void const*&gt;, std::hash&lt;void const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, false&gt; &gt;::_M_emplace&lt;void*&amp;, pybind11::detail::instance*&amp;&gt; (pygloo.so) (10 samples, 0.59%)</title><rect x="88.2972%" y="676" width="0.5851%" height="15" fill="rgb(252,33,42)" fg:x="1509" fg:w="10"/><text x="88.5472%" y="686.50"></text></g><g><title>pybind11::class_&lt;pygloo::future::Future, std::shared_ptr&lt;pygloo::future::Future&gt; &gt;::init_instance (pygloo.so) (16 samples, 0.94%)</title><rect x="88.0047%" y="580" width="0.9362%" height="15" fill="rgb(209,212,41)" fg:x="1504" fg:w="16"/><text x="88.2547%" y="590.50"></text></g><g><title>pybind11::detail::register_instance (pygloo.so) (11 samples, 0.64%)</title><rect x="88.2972%" y="596" width="0.6437%" height="15" fill="rgb(207,154,6)" fg:x="1509" fg:w="11"/><text x="88.5472%" y="606.50"></text></g><g><title>pybind11::detail::register_instance_impl (pygloo.so) (11 samples, 0.64%)</title><rect x="88.2972%" y="612" width="0.6437%" height="15" fill="rgb(223,64,47)" fg:x="1509" fg:w="11"/><text x="88.5472%" y="622.50"></text></g><g><title>std::unordered_multimap&lt;void const*, pybind11::detail::instance*, std::hash&lt;void const*&gt;, std::equal_to&lt;void const*&gt;, std::allocator&lt;std::pair&lt;void const* const, pybind11::detail::instance*&gt; &gt; &gt;::emplace&lt;void*&amp;, pybind11::detail::instance*&amp;&gt; (pygloo.so) (11 samples, 0.64%)</title><rect x="88.2972%" y="628" width="0.6437%" height="15" fill="rgb(211,161,38)" fg:x="1509" fg:w="11"/><text x="88.5472%" y="638.50"></text></g><g><title>std::_Hashtable&lt;void const*, std::pair&lt;void const* const, pybind11::detail::instance*&gt;, std::allocator&lt;std::pair&lt;void const* const, pybind11::detail::instance*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;void const*&gt;, std::hash&lt;void const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, false&gt; &gt;::emplace&lt;void*&amp;, pybind11::detail::instance*&amp;&gt; (pygloo.so) (11 samples, 0.64%)</title><rect x="88.2972%" y="644" width="0.6437%" height="15" fill="rgb(219,138,40)" fg:x="1509" fg:w="11"/><text x="88.5472%" y="654.50"></text></g><g><title>std::_Hashtable&lt;void const*, std::pair&lt;void const* const, pybind11::detail::instance*&gt;, std::allocator&lt;std::pair&lt;void const* const, pybind11::detail::instance*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;void const*&gt;, std::hash&lt;void const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, false&gt; &gt;::_M_emplace&lt;void*&amp;, pybind11::detail::instance*&amp;&gt; (pygloo.so) (11 samples, 0.64%)</title><rect x="88.2972%" y="660" width="0.6437%" height="15" fill="rgb(241,228,46)" fg:x="1509" fg:w="11"/><text x="88.5472%" y="670.50"></text></g><g><title>std::unordered_map&lt;_typeobject*, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt;, std::hash&lt;_typeobject*&gt;, std::equal_to&lt;_typeobject*&gt;, std::allocator&lt;std::pair&lt;_typeobject* const, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt; &gt; &gt;::emplace&lt;_typeobject*&amp;, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt; (pygloo.so) (4 samples, 0.23%)</title><rect x="89.1164%" y="644" width="0.2341%" height="15" fill="rgb(223,209,38)" fg:x="1523" fg:w="4"/><text x="89.3664%" y="654.50"></text></g><g><title>std::_Hashtable&lt;_typeobject*, std::pair&lt;_typeobject* const, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;_typeobject* const, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;_typeobject*&gt;, std::hash&lt;_typeobject*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::emplace&lt;_typeobject*&amp;, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt; (pygloo.so) (4 samples, 0.23%)</title><rect x="89.1164%" y="660" width="0.2341%" height="15" fill="rgb(236,164,45)" fg:x="1523" fg:w="4"/><text x="89.3664%" y="670.50"></text></g><g><title>std::_Hashtable&lt;_typeobject*, std::pair&lt;_typeobject* const, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;_typeobject* const, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;_typeobject*&gt;, std::hash&lt;_typeobject*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;_typeobject*&amp;, std::vector&lt;pybind11::detail::type_info*, std::allocator&lt;pybind11::detail::type_info*&gt; &gt; &gt; (pygloo.so) (4 samples, 0.23%)</title><rect x="89.1164%" y="676" width="0.2341%" height="15" fill="rgb(231,15,5)" fg:x="1523" fg:w="4"/><text x="89.3664%" y="686.50"></text></g><g><title>pybind11::detail::all_type_info (pygloo.so) (5 samples, 0.29%)</title><rect x="89.1164%" y="612" width="0.2926%" height="15" fill="rgb(252,35,15)" fg:x="1523" fg:w="5"/><text x="89.3664%" y="622.50"></text></g><g><title>pybind11::detail::all_type_info_get_cache (pygloo.so) (5 samples, 0.29%)</title><rect x="89.1164%" y="628" width="0.2926%" height="15" fill="rgb(248,181,18)" fg:x="1523" fg:w="5"/><text x="89.3664%" y="638.50"></text></g><g><title>pybind11::detail::make_new_instance (pygloo.so) (8 samples, 0.47%)</title><rect x="88.9994%" y="580" width="0.4681%" height="15" fill="rgb(233,39,42)" fg:x="1521" fg:w="8"/><text x="89.2494%" y="590.50"></text></g><g><title>pybind11::detail::instance::allocate_layout (pygloo.so) (6 samples, 0.35%)</title><rect x="89.1164%" y="596" width="0.3511%" height="15" fill="rgb(238,110,33)" fg:x="1523" fg:w="6"/><text x="89.3664%" y="606.50"></text></g><g><title>std::_Hashtable&lt;void const*, std::pair&lt;void const* const, pybind11::detail::instance*&gt;, std::allocator&lt;std::pair&lt;void const* const, pybind11::detail::instance*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;void const*&gt;, std::hash&lt;void const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, false&gt; &gt;::_M_bucket_index (pygloo.so) (2 samples, 0.12%)</title><rect x="89.7601%" y="644" width="0.1170%" height="15" fill="rgb(233,195,10)" fg:x="1534" fg:w="2"/><text x="90.0101%" y="654.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;void const*, std::pair&lt;void const* const, pybind11::detail::instance*&gt;, std::__detail::_Select1st, std::hash&lt;void const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (pygloo.so) (2 samples, 0.12%)</title><rect x="89.7601%" y="660" width="0.1170%" height="15" fill="rgb(254,105,3)" fg:x="1534" fg:w="2"/><text x="90.0101%" y="670.50"></text></g><g><title>std::__detail::_Select1st::operator()&lt;std::pair&lt;void const* const, pybind11::detail::instance*&gt;&amp;&gt; (pygloo.so) (2 samples, 0.12%)</title><rect x="89.8771%" y="676" width="0.1170%" height="15" fill="rgb(221,225,9)" fg:x="1536" fg:w="2"/><text x="90.1271%" y="686.50"></text></g><g><title>std::get&lt;(unsigned long)0, void const* const, pybind11::detail::instance*&gt; (pygloo.so) (2 samples, 0.12%)</title><rect x="89.8771%" y="692" width="0.1170%" height="15" fill="rgb(224,227,45)" fg:x="1536" fg:w="2"/><text x="90.1271%" y="702.50"></text></g><g><title>pybind11::detail::type_caster_generic::cast (pygloo.so) (36 samples, 2.11%)</title><rect x="87.9462%" y="564" width="2.1065%" height="15" fill="rgb(229,198,43)" fg:x="1503" fg:w="36"/><text x="88.1962%" y="574.50">p..</text></g><g><title>std::unordered_multimap&lt;void const*, pybind11::detail::instance*, std::hash&lt;void const*&gt;, std::equal_to&lt;void const*&gt;, std::allocator&lt;std::pair&lt;void const* const, pybind11::detail::instance*&gt; &gt; &gt;::equal_range (pygloo.so) (6 samples, 0.35%)</title><rect x="89.7016%" y="580" width="0.3511%" height="15" fill="rgb(206,209,35)" fg:x="1533" fg:w="6"/><text x="89.9516%" y="590.50"></text></g><g><title>std::_Hashtable&lt;void const*, std::pair&lt;void const* const, pybind11::detail::instance*&gt;, std::allocator&lt;std::pair&lt;void const* const, pybind11::detail::instance*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;void const*&gt;, std::hash&lt;void const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, false&gt; &gt;::equal_range (pygloo.so) (5 samples, 0.29%)</title><rect x="89.7601%" y="596" width="0.2926%" height="15" fill="rgb(245,195,53)" fg:x="1534" fg:w="5"/><text x="90.0101%" y="606.50"></text></g><g><title>std::_Hashtable&lt;void const*, std::pair&lt;void const* const, pybind11::detail::instance*&gt;, std::allocator&lt;std::pair&lt;void const* const, pybind11::detail::instance*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;void const*&gt;, std::hash&lt;void const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, false&gt; &gt;::_M_find_node (pygloo.so) (5 samples, 0.29%)</title><rect x="89.7601%" y="612" width="0.2926%" height="15" fill="rgb(240,92,26)" fg:x="1534" fg:w="5"/><text x="90.0101%" y="622.50"></text></g><g><title>std::_Hashtable&lt;void const*, std::pair&lt;void const* const, pybind11::detail::instance*&gt;, std::allocator&lt;std::pair&lt;void const* const, pybind11::detail::instance*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;void const*&gt;, std::hash&lt;void const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, false&gt; &gt;::_M_find_before_node (pygloo.so) (5 samples, 0.29%)</title><rect x="89.7601%" y="628" width="0.2926%" height="15" fill="rgb(207,40,23)" fg:x="1534" fg:w="5"/><text x="90.0101%" y="638.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;void const*, std::pair&lt;void const* const, pybind11::detail::instance*&gt;, std::__detail::_Select1st, std::equal_to&lt;void const*&gt;, std::hash&lt;void const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, false&gt; &gt;::_M_equals (pygloo.so) (3 samples, 0.18%)</title><rect x="89.8771%" y="644" width="0.1755%" height="15" fill="rgb(223,111,35)" fg:x="1536" fg:w="3"/><text x="90.1271%" y="654.50"></text></g><g><title>std::__detail::_Equal_helper&lt;void const*, std::pair&lt;void const* const, pybind11::detail::instance*&gt;, std::__detail::_Select1st, std::equal_to&lt;void const*&gt;, unsigned long, false&gt;::_S_equals (pygloo.so) (3 samples, 0.18%)</title><rect x="89.8771%" y="660" width="0.1755%" height="15" fill="rgb(229,147,28)" fg:x="1536" fg:w="3"/><text x="90.1271%" y="670.50"></text></g><g><title>pybind11::detail::copyable_holder_caster&lt;pygloo::future::Future, std::shared_ptr&lt;pygloo::future::Future&gt; &gt;::cast (pygloo.so) (46 samples, 2.69%)</title><rect x="87.4195%" y="532" width="2.6916%" height="15" fill="rgb(211,29,28)" fg:x="1494" fg:w="46"/><text x="87.6695%" y="542.50">py..</text></g><g><title>pybind11::detail::type_caster_base&lt;pygloo::future::Future&gt;::cast_holder (pygloo.so) (46 samples, 2.69%)</title><rect x="87.4195%" y="548" width="2.6916%" height="15" fill="rgb(228,72,33)" fg:x="1494" fg:w="46"/><text x="87.6695%" y="558.50">py..</text></g><g><title>pybind11::cpp_function::initialize&lt;std::shared_ptr&lt;pygloo::future::Future&gt; (*&amp;)(std::shared_ptr&lt;gloo::Context&gt; const&amp;, long, unsigned long, pygloo::glooDataType_t, int, unsigned int), std::shared_ptr&lt;pygloo::future::Future&gt;, std::shared_ptr&lt;gloo::Context&gt; const&amp;, long, unsigned long, pygloo::glooDataType_t, int, unsigned int, pybind11::name, pybind11::scope, pybind11::sibling, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v&gt;(std::shared_ptr&lt;pygloo::future::Future&gt; (*&amp;)(std::shared_ptr&lt;gloo::Context&gt; const&amp;, long, unsigned long, pygloo::glooDataType_t, int, unsigned int), std::shared_ptr&lt;pygloo::future::Future&gt; (*)(std::shared_ptr&lt;gloo::Context&gt; const&amp;, long, unsigned long, pygloo::glooDataType_t, int, unsigned int), pybind11::name const, pybind11::scope&amp;, pybind11::sibling, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pygloo.so) (339 samples, 19.84%)</title><rect x="70.4506%" y="500" width="19.8362%" height="15" fill="rgb(205,214,31)" fg:x="1204" fg:w="339"/><text x="70.7006%" y="510.50">pybind11::cpp_function::initial..</text></g><g><title>pybind11::cpp_function::initialize&lt;std::shared_ptr&lt;pygloo::future::Future&gt; (*&amp;)(std::shared_ptr&lt;gloo::Context&gt; const&amp;, long, unsigned long, pygloo::glooDataType_t, int, unsigned int), std::shared_ptr&lt;pygloo::future::Future&gt;, std::shared_ptr&lt;gloo::Context&gt; const&amp;, long, unsigned long, pygloo::glooDataType_t, int, unsigned int, pybind11::name, pybind11::scope, pybind11::sibling, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v&gt;(std::shared_ptr&lt;pygloo::future::Future&gt; (*&amp;)(std::shared_ptr&lt;gloo::Context&gt; const&amp;, long, unsigned long, pygloo::glooDataType_t, int, unsigned int), std::shared_ptr&lt;pygloo::future::Future&gt; (*)(std::shared_ptr&lt;gloo::Context&gt; const&amp;, long, unsigned long, pygloo::glooDataType_t, int, unsigned int), pybind11::name const, pybind11::scope&amp;, pybind11::sibling, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v)::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pygloo.so) (339 samples, 19.84%)</title><rect x="70.4506%" y="516" width="19.8362%" height="15" fill="rgb(224,111,15)" fg:x="1204" fg:w="339"/><text x="70.7006%" y="526.50">pybind11::cpp_function::initial..</text></g><g><title>pybind11::detail::process_attributes&lt;pybind11::name, pybind11::scope, pybind11::sibling, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v, pybind11::arg_v&gt;::precall (pygloo.so) (3 samples, 0.18%)</title><rect x="90.1112%" y="532" width="0.1755%" height="15" fill="rgb(253,21,26)" fg:x="1540" fg:w="3"/><text x="90.3612%" y="542.50"></text></g><g><title>std::__copy_move_a2&lt;false, std::_Bit_const_iterator, std::_Bit_iterator&gt; (pygloo.so) (3 samples, 0.18%)</title><rect x="90.2867%" y="580" width="0.1755%" height="15" fill="rgb(245,139,43)" fg:x="1543" fg:w="3"/><text x="90.5367%" y="590.50"></text></g><g><title>std::copy&lt;std::_Bit_const_iterator, std::_Bit_iterator&gt; (pygloo.so) (4 samples, 0.23%)</title><rect x="90.2867%" y="564" width="0.2341%" height="15" fill="rgb(252,170,7)" fg:x="1543" fg:w="4"/><text x="90.5367%" y="574.50"></text></g><g><title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::_M_reallocate (pygloo.so) (5 samples, 0.29%)</title><rect x="90.2867%" y="532" width="0.2926%" height="15" fill="rgb(231,118,14)" fg:x="1543" fg:w="5"/><text x="90.5367%" y="542.50"></text></g><g><title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::_M_copy_aligned (pygloo.so) (5 samples, 0.29%)</title><rect x="90.2867%" y="548" width="0.2926%" height="15" fill="rgb(238,83,0)" fg:x="1543" fg:w="5"/><text x="90.5367%" y="558.50"></text></g><g><title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::reserve (pygloo.so) (6 samples, 0.35%)</title><rect x="90.2867%" y="516" width="0.3511%" height="15" fill="rgb(221,39,39)" fg:x="1543" fg:w="6"/><text x="90.5367%" y="526.50"></text></g><g><title>std::vector&lt;pybind11::handle, std::allocator&lt;pybind11::handle&gt; &gt;::_S_relocate (pygloo.so) (4 samples, 0.23%)</title><rect x="90.6963%" y="532" width="0.2341%" height="15" fill="rgb(222,119,46)" fg:x="1550" fg:w="4"/><text x="90.9463%" y="542.50"></text></g><g><title>std::vector&lt;pybind11::handle, std::allocator&lt;pybind11::handle&gt; &gt;::_S_do_relocate (pygloo.so) (3 samples, 0.18%)</title><rect x="90.7548%" y="548" width="0.1755%" height="15" fill="rgb(222,165,49)" fg:x="1551" fg:w="3"/><text x="91.0048%" y="558.50"></text></g><g><title>std::__relocate_a&lt;pybind11::handle*, pybind11::handle*, std::allocator&lt;pybind11::handle&gt; &gt; (pygloo.so) (3 samples, 0.18%)</title><rect x="90.7548%" y="564" width="0.1755%" height="15" fill="rgb(219,113,52)" fg:x="1551" fg:w="3"/><text x="91.0048%" y="574.50"></text></g><g><title>pybind11::detail::function_call::function_call (pygloo.so) (12 samples, 0.70%)</title><rect x="90.2867%" y="500" width="0.7022%" height="15" fill="rgb(214,7,15)" fg:x="1543" fg:w="12"/><text x="90.5367%" y="510.50"></text></g><g><title>std::vector&lt;pybind11::handle, std::allocator&lt;pybind11::handle&gt; &gt;::reserve (pygloo.so) (6 samples, 0.35%)</title><rect x="90.6378%" y="516" width="0.3511%" height="15" fill="rgb(235,32,4)" fg:x="1549" fg:w="6"/><text x="90.8878%" y="526.50"></text></g><g><title>pybind11::detail::function_call::~function_call (pygloo.so) (5 samples, 0.29%)</title><rect x="90.9889%" y="500" width="0.2926%" height="15" fill="rgb(238,90,54)" fg:x="1555" fg:w="5"/><text x="91.2389%" y="510.50"></text></g><g><title>std::vector&lt;pybind11::handle, std::allocator&lt;pybind11::handle&gt; &gt;::~vector (pygloo.so) (4 samples, 0.23%)</title><rect x="91.0474%" y="516" width="0.2341%" height="15" fill="rgb(213,208,19)" fg:x="1556" fg:w="4"/><text x="91.2974%" y="526.50"></text></g><g><title>std::_Vector_base&lt;pybind11::handle, std::allocator&lt;pybind11::handle&gt; &gt;::~_Vector_base (pygloo.so) (2 samples, 0.12%)</title><rect x="91.1644%" y="532" width="0.1170%" height="15" fill="rgb(233,156,4)" fg:x="1558" fg:w="2"/><text x="91.4144%" y="542.50"></text></g><g><title>pybind11::handle::handle (pygloo.so) (3 samples, 0.18%)</title><rect x="91.3985%" y="500" width="0.1755%" height="15" fill="rgb(207,194,5)" fg:x="1562" fg:w="3"/><text x="91.6485%" y="510.50"></text></g><g><title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::push_back (pygloo.so) (4 samples, 0.23%)</title><rect x="91.6325%" y="500" width="0.2341%" height="15" fill="rgb(206,111,30)" fg:x="1566" fg:w="4"/><text x="91.8825%" y="510.50"></text></g><g><title>std::_Bit_iterator::operator++ (pygloo.so) (3 samples, 0.18%)</title><rect x="91.6910%" y="516" width="0.1755%" height="15" fill="rgb(243,70,54)" fg:x="1567" fg:w="3"/><text x="91.9410%" y="526.50"></text></g><g><title>std::vector&lt;pybind11::detail::function_call, std::allocator&lt;pybind11::detail::function_call&gt; &gt;::vector (pygloo.so) (2 samples, 0.12%)</title><rect x="91.9836%" y="500" width="0.1170%" height="15" fill="rgb(242,28,8)" fg:x="1572" fg:w="2"/><text x="92.2336%" y="510.50"></text></g><g><title>std::_Vector_base&lt;pybind11::detail::function_call, std::allocator&lt;pybind11::detail::function_call&gt; &gt;::_Vector_base (pygloo.so) (2 samples, 0.12%)</title><rect x="91.9836%" y="516" width="0.1170%" height="15" fill="rgb(219,106,18)" fg:x="1572" fg:w="2"/><text x="92.2336%" y="526.50"></text></g><g><title>std::_Vector_base&lt;pybind11::detail::function_call, std::allocator&lt;pybind11::detail::function_call&gt; &gt;::_Vector_impl::_Vector_impl (pygloo.so) (2 samples, 0.12%)</title><rect x="91.9836%" y="532" width="0.1170%" height="15" fill="rgb(244,222,10)" fg:x="1572" fg:w="2"/><text x="92.2336%" y="542.50"></text></g><g><title>unicode_dealloc (python3.8) (2 samples, 0.12%)</title><rect x="92.1592%" y="500" width="0.1170%" height="15" fill="rgb(236,179,52)" fg:x="1575" fg:w="2"/><text x="92.4092%" y="510.50"></text></g><g><title>unicode_decode_utf8.constprop.0 (python3.8) (2 samples, 0.12%)</title><rect x="92.2762%" y="500" width="0.1170%" height="15" fill="rgb(213,23,39)" fg:x="1577" fg:w="2"/><text x="92.5262%" y="510.50"></text></g><g><title>p2p_fn (ray/util/collective/collective_group/gloo_collective_group.py:441) (398 samples, 23.29%)</title><rect x="69.1633%" y="468" width="23.2885%" height="15" fill="rgb(238,48,10)" fg:x="1182" fg:w="398"/><text x="69.4133%" y="478.50">p2p_fn (ray/util/collective/collectiv..</text></g><g><title>pybind11::cpp_function::dispatcher (pygloo.so) (388 samples, 22.70%)</title><rect x="69.7484%" y="484" width="22.7033%" height="15" fill="rgb(251,196,23)" fg:x="1192" fg:w="388"/><text x="69.9984%" y="494.50">pybind11::cpp_function::dispatcher (..</text></g><g><title>0x7f0f1963994b (libc-2.31.so) (2 samples, 0.12%)</title><rect x="93.7975%" y="516" width="0.1170%" height="15" fill="rgb(250,152,24)" fg:x="1603" fg:w="2"/><text x="94.0475%" y="526.50"></text></g><g><title>__init__ (numpy/core/_internal.py:255) (6 samples, 0.35%)</title><rect x="94.0901%" y="516" width="0.3511%" height="15" fill="rgb(209,150,17)" fg:x="1608" fg:w="6"/><text x="94.3401%" y="526.50"></text></g><g><title>array_ctypes_get (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (27 samples, 1.58%)</title><rect x="93.0369%" y="500" width="1.5799%" height="15" fill="rgb(234,202,34)" fg:x="1590" fg:w="27"/><text x="93.2869%" y="510.50"></text></g><g><title>p2p_fn (ray/util/collective/collective_group/gloo_collective_group.py:443) (38 samples, 2.22%)</title><rect x="92.4517%" y="468" width="2.2235%" height="15" fill="rgb(253,148,53)" fg:x="1580" fg:w="38"/><text x="92.7017%" y="478.50">p..</text></g><g><title>get_tensor_ptr (ray/util/collective/collective_group/gloo_util.py:143) (37 samples, 2.17%)</title><rect x="92.5102%" y="484" width="2.1650%" height="15" fill="rgb(218,129,16)" fg:x="1581" fg:w="37"/><text x="92.7602%" y="494.50">g..</text></g><g><title>p2p_fn (ray/util/collective/collective_group/gloo_collective_group.py:444) (5 samples, 0.29%)</title><rect x="94.6752%" y="468" width="0.2926%" height="15" fill="rgb(216,85,19)" fg:x="1618" fg:w="5"/><text x="94.9252%" y="478.50"></text></g><g><title>get_tensor_n_elements (ray/util/collective/collective_group/gloo_util.py:161) (2 samples, 0.12%)</title><rect x="94.8508%" y="484" width="0.1170%" height="15" fill="rgb(235,228,7)" fg:x="1621" fg:w="2"/><text x="95.1008%" y="494.50"></text></g><g><title>get_gloo_tensor_dtype (ray/util/collective/collective_group/gloo_util.py:113) (2 samples, 0.12%)</title><rect x="95.0263%" y="484" width="0.1170%" height="15" fill="rgb(245,175,0)" fg:x="1624" fg:w="2"/><text x="95.2763%" y="494.50"></text></g><g><title>p2p_fn (ray/util/collective/collective_group/gloo_collective_group.py:445) (7 samples, 0.41%)</title><rect x="94.9678%" y="468" width="0.4096%" height="15" fill="rgb(208,168,36)" fg:x="1623" fg:w="7"/><text x="95.2178%" y="478.50"></text></g><g><title>get_gloo_tensor_dtype (ray/util/collective/collective_group/gloo_util.py:114) (4 samples, 0.23%)</title><rect x="95.1434%" y="484" width="0.2341%" height="15" fill="rgb(246,171,24)" fg:x="1626" fg:w="4"/><text x="95.3934%" y="494.50"></text></g><g><title>write (ray/experimental/collective_channel.py:69) (482 samples, 28.20%)</title><rect x="67.2323%" y="404" width="28.2036%" height="15" fill="rgb(215,142,24)" fg:x="1149" fg:w="482"/><text x="67.4823%" y="414.50">write (ray/experimental/collective_channel.py..</text></g><g><title>send (ray/util/collective/collective.py:638) (456 samples, 26.68%)</title><rect x="68.7537%" y="420" width="26.6823%" height="15" fill="rgb(250,187,7)" fg:x="1175" fg:w="456"/><text x="69.0037%" y="430.50">send (ray/util/collective/collective.py:638)</text></g><g><title>send (ray/util/collective/collective_group/gloo_collective_group.py:459) (456 samples, 26.68%)</title><rect x="68.7537%" y="436" width="26.6823%" height="15" fill="rgb(228,66,33)" fg:x="1175" fg:w="456"/><text x="69.0037%" y="446.50">send (ray/util/collective/collective_group/..</text></g><g><title>_point2point (ray/util/collective/collective_group/gloo_collective_group.py:535) (450 samples, 26.33%)</title><rect x="69.1047%" y="452" width="26.3312%" height="15" fill="rgb(234,215,21)" fg:x="1181" fg:w="450"/><text x="69.3547%" y="462.50">_point2point (ray/util/collective/collecti..</text></g><g><title>write (ray/experimental/collective_channel.py:74) (2 samples, 0.12%)</title><rect x="95.4944%" y="404" width="0.1170%" height="15" fill="rgb(222,191,20)" fg:x="1632" fg:w="2"/><text x="95.7444%" y="414.50"></text></g><g><title>wait (ray/util/collective/collective_group/gloo_collective_group.py:39) (2 samples, 0.12%)</title><rect x="95.9040%" y="420" width="0.1170%" height="15" fill="rgb(245,79,54)" fg:x="1639" fg:w="2"/><text x="96.1540%" y="430.50"></text></g><g><title>pybind11::detail::get_global_type_info (pygloo.so) (2 samples, 0.12%)</title><rect x="96.6647%" y="628" width="0.1170%" height="15" fill="rgb(240,10,37)" fg:x="1652" fg:w="2"/><text x="96.9147%" y="638.50"></text></g><g><title>pybind11::detail::argument_loader&lt;pygloo::future::Future*, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt; &gt;::argument_loader (pygloo.so) (6 samples, 0.35%)</title><rect x="96.6062%" y="484" width="0.3511%" height="15" fill="rgb(214,192,32)" fg:x="1651" fg:w="6"/><text x="96.8562%" y="494.50"></text></g><g><title>std::tuple&lt;pybind11::detail::type_caster&lt;pygloo::future::Future, void&gt;, pybind11::detail::type_caster&lt;std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;, void&gt; &gt;::tuple&lt;pybind11::detail::type_caster&lt;pygloo::future::Future, void&gt;, pybind11::detail::type_caster&lt;std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;, void&gt;, true&gt; (pygloo.so) (6 samples, 0.35%)</title><rect x="96.6062%" y="500" width="0.3511%" height="15" fill="rgb(209,36,54)" fg:x="1651" fg:w="6"/><text x="96.8562%" y="510.50"></text></g><g><title>std::_Tuple_impl&lt;(unsigned long)0, pybind11::detail::type_caster&lt;pygloo::future::Future, void&gt;, pybind11::detail::type_caster&lt;std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;, void&gt; &gt;::_Tuple_impl (pygloo.so) (6 samples, 0.35%)</title><rect x="96.6062%" y="516" width="0.3511%" height="15" fill="rgb(220,10,11)" fg:x="1651" fg:w="6"/><text x="96.8562%" y="526.50"></text></g><g><title>std::_Head_base&lt;(unsigned long)0, pybind11::detail::type_caster&lt;pygloo::future::Future, void&gt;, false&gt;::_Head_base (pygloo.so) (6 samples, 0.35%)</title><rect x="96.6062%" y="532" width="0.3511%" height="15" fill="rgb(221,106,17)" fg:x="1651" fg:w="6"/><text x="96.8562%" y="542.50"></text></g><g><title>pybind11::detail::type_caster&lt;pygloo::future::Future, void&gt;::type_caster (pygloo.so) (6 samples, 0.35%)</title><rect x="96.6062%" y="548" width="0.3511%" height="15" fill="rgb(251,142,44)" fg:x="1651" fg:w="6"/><text x="96.8562%" y="558.50"></text></g><g><title>pybind11::detail::type_caster_base&lt;pygloo::future::Future&gt;::type_caster_base (pygloo.so) (6 samples, 0.35%)</title><rect x="96.6062%" y="564" width="0.3511%" height="15" fill="rgb(238,13,15)" fg:x="1651" fg:w="6"/><text x="96.8562%" y="574.50"></text></g><g><title>pybind11::detail::type_caster_base&lt;pygloo::future::Future&gt;::type_caster_base (pygloo.so) (6 samples, 0.35%)</title><rect x="96.6062%" y="580" width="0.3511%" height="15" fill="rgb(208,107,27)" fg:x="1651" fg:w="6"/><text x="96.8562%" y="590.50"></text></g><g><title>pybind11::detail::type_caster_generic::type_caster_generic (pygloo.so) (6 samples, 0.35%)</title><rect x="96.6062%" y="596" width="0.3511%" height="15" fill="rgb(205,136,37)" fg:x="1651" fg:w="6"/><text x="96.8562%" y="606.50"></text></g><g><title>pybind11::detail::get_type_info (pygloo.so) (5 samples, 0.29%)</title><rect x="96.6647%" y="612" width="0.2926%" height="15" fill="rgb(250,205,27)" fg:x="1652" fg:w="5"/><text x="96.9147%" y="622.50"></text></g><g><title>pybind11::detail::get_local_type_info (pygloo.so) (3 samples, 0.18%)</title><rect x="96.7817%" y="628" width="0.1755%" height="15" fill="rgb(210,80,43)" fg:x="1654" fg:w="3"/><text x="97.0317%" y="638.50"></text></g><g><title>std::unordered_map&lt;std::type_index, pybind11::detail::type_info*, std::hash&lt;std::type_index&gt;, std::equal_to&lt;std::type_index&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt; &gt;::find (pygloo.so) (3 samples, 0.18%)</title><rect x="96.7817%" y="644" width="0.1755%" height="15" fill="rgb(247,160,36)" fg:x="1654" fg:w="3"/><text x="97.0317%" y="654.50"></text></g><g><title>std::_Hashtable&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::type_index&gt;, std::hash&lt;std::type_index&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (pygloo.so) (3 samples, 0.18%)</title><rect x="96.7817%" y="660" width="0.1755%" height="15" fill="rgb(234,13,49)" fg:x="1654" fg:w="3"/><text x="97.0317%" y="670.50"></text></g><g><title>std::_Hashtable&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::type_index&gt;, std::hash&lt;std::type_index&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (pygloo.so) (3 samples, 0.18%)</title><rect x="96.7817%" y="676" width="0.1755%" height="15" fill="rgb(234,122,0)" fg:x="1654" fg:w="3"/><text x="97.0317%" y="686.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::__detail::_Select1st, std::hash&lt;std::type_index&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (pygloo.so) (3 samples, 0.18%)</title><rect x="96.7817%" y="692" width="0.1755%" height="15" fill="rgb(207,146,38)" fg:x="1654" fg:w="3"/><text x="97.0317%" y="702.50"></text></g><g><title>std::__detail::_Mod_range_hashing::operator() (pygloo.so) (3 samples, 0.18%)</title><rect x="96.7817%" y="708" width="0.1755%" height="15" fill="rgb(207,177,25)" fg:x="1654" fg:w="3"/><text x="97.0317%" y="718.50"></text></g><g><title>pybind11::cpp_function::cpp_function&lt;bool, pygloo::future::Future, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pygloo::future::Future*, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;)#1}::operator() const (pygloo.so) (8 samples, 0.47%)</title><rect x="96.9573%" y="516" width="0.4681%" height="15" fill="rgb(211,178,42)" fg:x="1657" fg:w="8"/><text x="97.2073%" y="526.50"></text></g><g><title>pygloo::future::Future::Wait (pygloo.so) (5 samples, 0.29%)</title><rect x="97.1328%" y="532" width="0.2926%" height="15" fill="rgb(230,69,54)" fg:x="1660" fg:w="5"/><text x="97.3828%" y="542.50"></text></g><g><title>gloo::transport::UnboundBuffer::waitSend (pygloo.so) (4 samples, 0.23%)</title><rect x="97.1913%" y="548" width="0.2341%" height="15" fill="rgb(214,135,41)" fg:x="1661" fg:w="4"/><text x="97.4413%" y="558.50"></text></g><g><title>gloo::transport::tcp::UnboundBuffer::waitSend (pygloo.so) (4 samples, 0.23%)</title><rect x="97.1913%" y="564" width="0.2341%" height="15" fill="rgb(237,67,25)" fg:x="1661" fg:w="4"/><text x="97.4413%" y="574.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libpthread-2.31.so) (4 samples, 0.23%)</title><rect x="97.1913%" y="580" width="0.2341%" height="15" fill="rgb(222,189,50)" fg:x="1661" fg:w="4"/><text x="97.4413%" y="590.50"></text></g><g><title>pybind11::detail::argument_loader&lt;pygloo::future::Future*, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt; &gt;::call&lt;bool, pybind11::detail::void_type, pybind11::cpp_function::cpp_function&lt;bool, pygloo::future::Future, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pygloo::future::Future*, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;&amp;)#1}&gt; &amp;&amp; (pygloo.so) (9 samples, 0.53%)</title><rect x="96.9573%" y="484" width="0.5266%" height="15" fill="rgb(245,148,34)" fg:x="1657" fg:w="9"/><text x="97.2073%" y="494.50"></text></g><g><title>pybind11::detail::argument_loader&lt;pygloo::future::Future*, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt; &gt;::call_impl&lt;bool, pybind11::cpp_function::cpp_function&lt;bool, pygloo::future::Future, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pygloo::future::Future*, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;&amp;)#1}, (unsigned long)0, (unsigned long)1, pybind11::detail::void_type&gt; &amp;&amp; (pygloo.so) (9 samples, 0.53%)</title><rect x="96.9573%" y="500" width="0.5266%" height="15" fill="rgb(222,29,6)" fg:x="1657" fg:w="9"/><text x="97.2073%" y="510.50"></text></g><g><title>std::chrono::operator+&lt;unsigned long, std::ratio&lt;(long)1, (long)1&gt;, long, std::ratio&lt;(long)1, (long)1000000&gt; &gt; (pygloo.so) (2 samples, 0.12%)</title><rect x="97.7765%" y="532" width="0.1170%" height="15" fill="rgb(221,189,43)" fg:x="1671" fg:w="2"/><text x="98.0265%" y="542.50"></text></g><g><title>pybind11::detail::duration_caster&lt;std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt; &gt;::load (pygloo.so) (8 samples, 0.47%)</title><rect x="97.5424%" y="516" width="0.4681%" height="15" fill="rgb(207,36,27)" fg:x="1667" fg:w="8"/><text x="97.7924%" y="526.50"></text></g><g><title>std::chrono::operator+&lt;unsigned long, std::ratio&lt;(long)86400, (long)1&gt;, long, std::ratio&lt;(long)1, (long)1&gt; &gt; (pygloo.so) (2 samples, 0.12%)</title><rect x="97.8935%" y="532" width="0.1170%" height="15" fill="rgb(217,90,24)" fg:x="1673" fg:w="2"/><text x="98.1435%" y="542.50"></text></g><g><title>std::chrono::duration&lt;unsigned long, std::ratio&lt;(long)1, (long)1&gt; &gt;::duration&lt;long, std::ratio&lt;(long)1, (long)1&gt;, void&gt; (pygloo.so) (2 samples, 0.12%)</title><rect x="97.8935%" y="548" width="0.1170%" height="15" fill="rgb(224,66,35)" fg:x="1673" fg:w="2"/><text x="98.1435%" y="558.50"></text></g><g><title>std::chrono::duration_cast&lt;std::chrono::duration&lt;unsigned long, std::ratio&lt;(long)1, (long)1&gt; &gt;, long, std::ratio&lt;(long)1, (long)1&gt; &gt; (pygloo.so) (2 samples, 0.12%)</title><rect x="97.8935%" y="564" width="0.1170%" height="15" fill="rgb(221,13,50)" fg:x="1673" fg:w="2"/><text x="98.1435%" y="574.50"></text></g><g><title>std::chrono::__duration_cast_impl&lt;std::chrono::duration&lt;unsigned long, std::ratio&lt;(long)1, (long)1&gt; &gt;, std::ratio&lt;(long)1, (long)1&gt;, unsigned long, true, true&gt;::__cast&lt;long, std::ratio&lt;(long)1, (long)1&gt; &gt; (pygloo.so) (2 samples, 0.12%)</title><rect x="97.8935%" y="580" width="0.1170%" height="15" fill="rgb(236,68,49)" fg:x="1673" fg:w="2"/><text x="98.1435%" y="590.50"></text></g><g><title>std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1&gt; &gt;::count (pygloo.so) (2 samples, 0.12%)</title><rect x="97.8935%" y="596" width="0.1170%" height="15" fill="rgb(229,146,28)" fg:x="1673" fg:w="2"/><text x="98.1435%" y="606.50"></text></g><g><title>std::get&lt;(unsigned long)0, pybind11::detail::type_caster&lt;pygloo::future::Future, void&gt;, pybind11::detail::type_caster&lt;std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;, void&gt; &gt; (pygloo.so) (4 samples, 0.23%)</title><rect x="98.0105%" y="516" width="0.2341%" height="15" fill="rgb(225,31,38)" fg:x="1675" fg:w="4"/><text x="98.2605%" y="526.50"></text></g><g><title>std::__get_helper&lt;(unsigned long)0, pybind11::detail::type_caster&lt;pygloo::future::Future, void&gt;, pybind11::detail::type_caster&lt;std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;, void&gt; &gt; (pygloo.so) (3 samples, 0.18%)</title><rect x="98.0690%" y="532" width="0.1755%" height="15" fill="rgb(250,208,3)" fg:x="1676" fg:w="3"/><text x="98.3190%" y="542.50"></text></g><g><title>std::_Tuple_impl&lt;(unsigned long)0, pybind11::detail::type_caster&lt;pygloo::future::Future, void&gt;, pybind11::detail::type_caster&lt;std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;, void&gt; &gt;::_M_head (pygloo.so) (3 samples, 0.18%)</title><rect x="98.0690%" y="548" width="0.1755%" height="15" fill="rgb(246,54,23)" fg:x="1676" fg:w="3"/><text x="98.3190%" y="558.50"></text></g><g><title>std::_Head_base&lt;(unsigned long)0, pybind11::detail::type_caster&lt;pygloo::future::Future, void&gt;, false&gt;::_M_head (pygloo.so) (2 samples, 0.12%)</title><rect x="98.1276%" y="564" width="0.1170%" height="15" fill="rgb(243,76,11)" fg:x="1677" fg:w="2"/><text x="98.3776%" y="574.50"></text></g><g><title>pybind11::detail::argument_loader&lt;pygloo::future::Future*, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt; &gt;::load_args (pygloo.so) (18 samples, 1.05%)</title><rect x="97.4839%" y="484" width="1.0532%" height="15" fill="rgb(245,21,50)" fg:x="1666" fg:w="18"/><text x="97.7339%" y="494.50"></text></g><g><title>pybind11::detail::argument_loader&lt;pygloo::future::Future*, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt; &gt;::load_impl_sequence&lt;(unsigned long)0, (unsigned long)1&gt; (pygloo.so) (18 samples, 1.05%)</title><rect x="97.4839%" y="500" width="1.0532%" height="15" fill="rgb(228,9,43)" fg:x="1666" fg:w="18"/><text x="97.7339%" y="510.50"></text></g><g><title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::operator[] (pygloo.so) (2 samples, 0.12%)</title><rect x="98.4201%" y="516" width="0.1170%" height="15" fill="rgb(208,100,47)" fg:x="1682" fg:w="2"/><text x="98.6701%" y="526.50"></text></g><g><title>pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;bool, pygloo::future::Future, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pygloo::future::Future*, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;)#1}, bool, pygloo::future::Future*, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(pybind11::cpp_function::cpp_function&lt;bool, pygloo::future::Future, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pygloo::future::Future*, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;&amp;&amp;)#1}, bool (*)(pygloo::future::Future*, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pygloo.so) (37 samples, 2.17%)</title><rect x="96.4307%" y="452" width="2.1650%" height="15" fill="rgb(232,26,8)" fg:x="1648" fg:w="37"/><text x="96.6807%" y="462.50">p..</text></g><g><title>pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;bool, pygloo::future::Future, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pygloo::future::Future*, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;)#1}, bool, pygloo::future::Future*, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(pybind11::cpp_function::cpp_function&lt;bool, pygloo::future::Future, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pygloo::future::Future*, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;&amp;&amp;)#1}, bool (*)(pygloo::future::Future*, std::chrono::duration&lt;long, std::ratio&lt;(long)1, (long)1000&gt; &gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pygloo.so) (35 samples, 2.05%)</title><rect x="96.5477%" y="468" width="2.0480%" height="15" fill="rgb(216,166,38)" fg:x="1650" fg:w="35"/><text x="96.7977%" y="478.50">p..</text></g><g><title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::reserve (pygloo.so) (2 samples, 0.12%)</title><rect x="98.6542%" y="468" width="0.1170%" height="15" fill="rgb(251,202,51)" fg:x="1686" fg:w="2"/><text x="98.9042%" y="478.50"></text></g><g><title>pybind11::detail::function_call::function_call (pygloo.so) (7 samples, 0.41%)</title><rect x="98.5957%" y="452" width="0.4096%" height="15" fill="rgb(254,216,34)" fg:x="1685" fg:w="7"/><text x="98.8457%" y="462.50"></text></g><g><title>std::vector&lt;pybind11::handle, std::allocator&lt;pybind11::handle&gt; &gt;::reserve (pygloo.so) (3 samples, 0.18%)</title><rect x="98.8297%" y="468" width="0.1755%" height="15" fill="rgb(251,32,27)" fg:x="1689" fg:w="3"/><text x="99.0797%" y="478.50"></text></g><g><title>pybind11::detail::function_call::~function_call (pygloo.so) (3 samples, 0.18%)</title><rect x="99.0053%" y="452" width="0.1755%" height="15" fill="rgb(208,127,28)" fg:x="1692" fg:w="3"/><text x="99.2553%" y="462.50"></text></g><g><title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::~vector (pygloo.so) (3 samples, 0.18%)</title><rect x="99.0053%" y="468" width="0.1755%" height="15" fill="rgb(224,137,22)" fg:x="1692" fg:w="3"/><text x="99.2553%" y="478.50"></text></g><g><title>std::_Bvector_base&lt;std::allocator&lt;bool&gt; &gt;::~_Bvector_base (pygloo.so) (3 samples, 0.18%)</title><rect x="99.0053%" y="484" width="0.1755%" height="15" fill="rgb(254,70,32)" fg:x="1692" fg:w="3"/><text x="99.2553%" y="494.50"></text></g><g><title>std::_Bvector_base&lt;std::allocator&lt;bool&gt; &gt;::_M_deallocate (pygloo.so) (3 samples, 0.18%)</title><rect x="99.0053%" y="500" width="0.1755%" height="15" fill="rgb(229,75,37)" fg:x="1692" fg:w="3"/><text x="99.2553%" y="510.50"></text></g><g><title>do_exec_compiled_task (ray/dag/compiled_dag_node.py:140) (676 samples, 39.56%)</title><rect x="60.0351%" y="388" width="39.5553%" height="15" fill="rgb(252,64,23)" fg:x="1026" fg:w="676"/><text x="60.2851%" y="398.50">do_exec_compiled_task (ray/dag/compiled_dag_node.py:140)</text></g><g><title>write (ray/experimental/collective_channel.py:75) (68 samples, 3.98%)</title><rect x="95.6115%" y="404" width="3.9789%" height="15" fill="rgb(232,162,48)" fg:x="1634" fg:w="68"/><text x="95.8615%" y="414.50">writ..</text></g><g><title>wait (ray/util/collective/collective_group/gloo_collective_group.py:41) (61 samples, 3.57%)</title><rect x="96.0211%" y="420" width="3.5693%" height="15" fill="rgb(246,160,12)" fg:x="1641" fg:w="61"/><text x="96.2711%" y="430.50">wait..</text></g><g><title>pybind11::cpp_function::dispatcher (pygloo.so) (56 samples, 3.28%)</title><rect x="96.3136%" y="436" width="3.2768%" height="15" fill="rgb(247,166,0)" fg:x="1646" fg:w="56"/><text x="96.5636%" y="446.50">pyb..</text></g><g><title>std::vector&lt;pybind11::handle, std::allocator&lt;pybind11::handle&gt; &gt;::push_back (pygloo.so) (2 samples, 0.12%)</title><rect x="99.4734%" y="452" width="0.1170%" height="15" fill="rgb(249,219,21)" fg:x="1700" fg:w="2"/><text x="99.7234%" y="462.50"></text></g><g><title>do_exec_compiled_task (ray/dag/compiled_dag_node.py:143) (3 samples, 0.18%)</title><rect x="99.5904%" y="388" width="0.1755%" height="15" fill="rgb(205,209,3)" fg:x="1702" fg:w="3"/><text x="99.8404%" y="398.50"></text></g><g><title>all (1,709 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(243,44,1)" fg:x="0" fg:w="1709"/><text x="0.2500%" y="62.50"></text></g><g><title>clone (libc-2.31.so) (1,624 samples, 95.03%)</title><rect x="4.9737%" y="68" width="95.0263%" height="15" fill="rgb(206,159,16)" fg:x="85" fg:w="1624"/><text x="5.2237%" y="78.50">clone (libc-2.31.so)</text></g><g><title>boost_asio_detail_posix_thread_function (ray/_raylet.so) (1,624 samples, 95.03%)</title><rect x="4.9737%" y="84" width="95.0263%" height="15" fill="rgb(244,77,30)" fg:x="85" fg:w="1624"/><text x="5.2237%" y="94.50">boost_asio_detail_posix_thread_function (ray/_raylet.so)</text></g><g><title>boost::asio::detail::posix_thread::func&lt;boost::asio::thread_pool::thread_function&gt;::run (ray/_raylet.so) (1,624 samples, 95.03%)</title><rect x="4.9737%" y="100" width="95.0263%" height="15" fill="rgb(218,69,12)" fg:x="85" fg:w="1624"/><text x="5.2237%" y="110.50">boost::asio::detail::posix_thread::func&lt;boost::asio::thread_pool::thread_function&gt;::run (ray/_raylet.so)</text></g><g><title>boost::asio::detail::scheduler::run (ray/_raylet.so) (1,624 samples, 95.03%)</title><rect x="4.9737%" y="116" width="95.0263%" height="15" fill="rgb(212,87,7)" fg:x="85" fg:w="1624"/><text x="5.2237%" y="126.50">boost::asio::detail::scheduler::run (ray/_raylet.so)</text></g><g><title>boost::asio::detail::scheduler::do_run_one (ray/_raylet.so) (1,624 samples, 95.03%)</title><rect x="4.9737%" y="132" width="95.0263%" height="15" fill="rgb(245,114,25)" fg:x="85" fg:w="1624"/><text x="5.2237%" y="142.50">boost::asio::detail::scheduler::do_run_one (ray/_raylet.so)</text></g><g><title>boost::asio::detail::executor_op&lt;boost::asio::detail::binder0&lt;std::function&lt;void ()&gt; &gt;, std::allocator&lt;void&gt;, boost::asio::detail::scheduler_operation&gt;::do_complete (ray/_raylet.so) (1,624 samples, 95.03%)</title><rect x="4.9737%" y="148" width="95.0263%" height="15" fill="rgb(210,61,42)" fg:x="85" fg:w="1624"/><text x="5.2237%" y="158.50">boost::asio::detail::executor_op&lt;boost::asio::detail::binder0&lt;std::function&lt;void ()&gt; &gt;, std::allocator&lt;void&gt;, boost::asio::detail::scheduler_operation&gt;::do_com..</text></g><g><title>std::_Function_handler&lt;void (), ray::core::ActorSchedulingQueue::ScheduleRequests()::{lambda()#2}&gt;::_M_invoke (ray/_raylet.so) (1,624 samples, 95.03%)</title><rect x="4.9737%" y="164" width="95.0263%" height="15" fill="rgb(211,52,33)" fg:x="85" fg:w="1624"/><text x="5.2237%" y="174.50">std::_Function_handler&lt;void (), ray::core::ActorSchedulingQueue::ScheduleRequests()::{lambda()#2}&gt;::_M_invoke (ray/_raylet.so)</text></g><g><title>ray::core::ActorSchedulingQueue::AcceptRequestOrRejectIfCanceled (ray/_raylet.so) (1,624 samples, 95.03%)</title><rect x="4.9737%" y="180" width="95.0263%" height="15" fill="rgb(234,58,33)" fg:x="85" fg:w="1624"/><text x="5.2237%" y="190.50">ray::core::ActorSchedulingQueue::AcceptRequestOrRejectIfCanceled (ray/_raylet.so)</text></g><g><title>ray::core::InboundRequest::Accept (ray/_raylet.so) (1,624 samples, 95.03%)</title><rect x="4.9737%" y="196" width="95.0263%" height="15" fill="rgb(220,115,36)" fg:x="85" fg:w="1624"/><text x="5.2237%" y="206.50">ray::core::InboundRequest::Accept (ray/_raylet.so)</text></g><g><title>std::_Function_handler&lt;void (std::function&lt;void (ray::Status, std::function&lt;void ()&gt;, std::function&lt;void ()&gt;)&gt;), ray::core::CoreWorkerDirectTaskReceiver::HandleTask(ray::rpc::PushTaskRequest const&amp;, ray::rpc::PushTaskReply*, std::function&lt;void (ray::Status, std::function&lt;void ()&gt;, std::function&lt;void ()&gt;)&gt;)::{lambda(std::function&lt;void (ray::Status, std::function&lt;void ()&gt;, std::function&lt;void ()&gt;)&gt;)#1}&gt;::_M_invoke (ray/_raylet.so) (1,624 samples, 95.03%)</title><rect x="4.9737%" y="212" width="95.0263%" height="15" fill="rgb(243,153,54)" fg:x="85" fg:w="1624"/><text x="5.2237%" y="222.50">std::_Function_handler&lt;void (std::function&lt;void (ray::Status, std::function&lt;void ()&gt;, std::function&lt;void ()&gt;)&gt;), ray::core::CoreWorkerDirectTaskReceiver::Handl..</text></g><g><title>ray::core::CoreWorkerDirectTaskReceiver::HandleTask(ray::rpc::PushTaskRequest const&amp;, ray::rpc::PushTaskReply*, std::function&lt;void (ray::Status, std::function&lt;void ()&gt;, std::function&lt;void ()&gt;)&gt;)::{lambda(std::function&lt;void (ray::Status, std::function&lt;void ()&gt;, std::function&lt;void ()&gt;)&gt;)#1}::operator() const (ray/_raylet.so) (1,624 samples, 95.03%)</title><rect x="4.9737%" y="228" width="95.0263%" height="15" fill="rgb(251,47,18)" fg:x="85" fg:w="1624"/><text x="5.2237%" y="238.50">ray::core::CoreWorkerDirectTaskReceiver::HandleTask(ray::rpc::PushTaskRequest const&amp;, ray::rpc::PushTaskReply*, std::function&lt;void (ray::Status, std::function&lt;..</text></g><g><title>std::_Function_handler&lt;ray::Status(ray::TaskSpecification const&amp;, std::shared_ptr&lt;std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;std::pair&lt;long, double&gt;, std::allocator&lt;std::pair&lt;long, double&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;long, double&gt;, std::allocator&lt;std::pair&lt;long, double&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::vector&lt;std::pair&lt;ray::ObjectID, std::shared_ptr&lt;ray::RayObject&gt; &gt;, std::allocator&lt;std::pair&lt;ray::ObjectID, std::shared_ptr&lt;ray::RayObject&gt; &gt; &gt; &gt;*, std::vector&lt;std::pair&lt;ray::ObjectID, std::shared_ptr&lt;ray::RayObject&gt; &gt;, std::allocator&lt;std::pair&lt;ray::ObjectID, std::shared_ptr&lt;ray::RayObject&gt; &gt; &gt; &gt;*, std::vector&lt;std::pair&lt;ray::ObjectID, bool&gt;, std::allocator&lt;std::pair&lt;ray::ObjectID, bool&gt; &gt; &gt;*, google::protobuf::RepeatedPtrField&lt;ray::rpc::ObjectReferenceCount&gt;*, bool*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*), std::_Bind&lt;ray::Status (ray::core::CoreWorker(ray::core::CoreWorker*, std::_Placeholder&lt;1&gt;, std::_Placeholder&lt;2&gt;, std::_Placeholder&lt;3&gt;, std::_Placeholder&lt;4&gt;, std::_Placeholder&lt;5&gt;, std::_Placeholder&lt;6&gt;, std::_Placeholder&lt;7&gt;, std::_Placeholder&lt;8&gt;)::*)(ray::TaskSpecification const&amp;, std::shared_ptr&lt;std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;std::pair&lt;long, double&gt;, std::allocator&lt;std::pair&lt;long, double&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::pair&lt;long, double&gt;, std::allocator&lt;std::pair&lt;long, double&gt; &gt; &gt; &gt; &gt; &gt; &gt; const&amp;, std::vector&lt;std::pair&lt;ray::ObjectID, std::shared_ptr&lt;ray::RayObject&gt; &gt;, std::allocator&lt;std::pair&lt;ray::ObjectID, std::shared_ptr&lt;ray::RayObject&gt; &gt; &gt; &gt;*, std::vector&lt;std::pair&lt;ray::ObjectID, std::shared_ptr&lt;ray::RayObject&gt; &gt;, std::allocator&lt;std::pair&lt;ray::ObjectID, std::shared_ptr&lt;ray::RayObject&gt; &gt; &gt; &gt;*, std::vector&lt;std::pair&lt;ray::ObjectID, bool&gt;, std::allocator&lt;std::pair&lt;ray::ObjectID, bool&gt; &gt; &gt;*, google::protobuf::RepeatedPtrField&lt;ray::rpc::ObjectReferenceCount&gt;*, bool*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*)&gt; &gt;::_M_invoke (ray/_raylet.so) (1,624 samples, 95.03%)</title><rect x="4.9737%" y="244" width="95.0263%" height="15" fill="rgb(242,102,42)" fg:x="85" fg:w="1624"/><text x="5.2237%" y="254.50">std::_Function_handler&lt;ray::Status(ray::TaskSpecification const&amp;, std::shared_ptr&lt;std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, s..</text></g><g><title>ray::core::CoreWorker::ExecuteTask (ray/_raylet.so) (1,624 samples, 95.03%)</title><rect x="4.9737%" y="260" width="95.0263%" height="15" fill="rgb(234,31,38)" fg:x="85" fg:w="1624"/><text x="5.2237%" y="270.50">ray::core::CoreWorker::ExecuteTask (ray/_raylet.so)</text></g><g><title>std::_Function_handler&lt;ray::Status(ray::rpc::Address const&amp;, ray::rpc::TaskType, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, ray::core::RayFunction const&amp;, std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt; const&amp;, std::vector&lt;std::shared_ptr&lt;ray::RayObject&gt;, std::allocator&lt;std::shared_ptr&lt;ray::RayObject&gt; &gt; &gt; const&amp;, std::vector&lt;ray::rpc::ObjectReference, std::allocator&lt;ray::rpc::ObjectReference&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::vector&lt;std::pair&lt;ray::ObjectID, std::shared_ptr&lt;ray::RayObject&gt; &gt;, std::allocator&lt;std::pair&lt;ray::ObjectID, std::shared_ptr&lt;ray::RayObject&gt; &gt; &gt; &gt;*, std::vector&lt;std::pair&lt;ray::ObjectID, std::shared_ptr&lt;ray::RayObject&gt; &gt;, std::allocator&lt;std::pair&lt;ray::ObjectID, std::shared_ptr&lt;ray::RayObject&gt; &gt; &gt; &gt;*, std::vector&lt;std::pair&lt;ray::ObjectID, bool&gt;, std::allocator&lt;std::pair&lt;ray::ObjectID, bool&gt; &gt; &gt;*, std::shared_ptr&lt;ray::LocalMemoryBuffer&gt;&amp;, bool*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;ray::ConcurrencyGroup, std::allocator&lt;ray::ConcurrencyGroup&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, bool, bool, long), ray::Status (*)(ray::rpc::Address const&amp;, ray::rpc::TaskType, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, ray::core::RayFunction const&amp;, std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt; const&amp;, std::vector&lt;std::shared_ptr&lt;ray::RayObject&gt;, std::allocator&lt;std::shared_ptr&lt;ray::RayObject&gt; &gt; &gt; const&amp;, std::vector&lt;ray::rpc::ObjectReference, std::allocator&lt;ray::rpc::ObjectReference&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;std::pair&lt;ray::ObjectID, std::shared_ptr&lt;ray::RayObject&gt; &gt;, std::allocator&lt;std::pair&lt;ray::ObjectID, std::shared_ptr&lt;ray::RayObject&gt; &gt; &gt; &gt;*, std::vector&lt;std::pair&lt;ray::ObjectID, std::shared_ptr&lt;ray::RayObject&gt; &gt;, std::allocator&lt;std::pair&lt;ray::ObjectID, std::shared_ptr&lt;ray::RayObject&gt; &gt; &gt; &gt;*, std::vector&lt;std::pair&lt;ray::ObjectID, bool&gt;, std::allocator&lt;std::pair&lt;ray::ObjectID, bool&gt; &gt; &gt;*, std::shared_ptr&lt;ray::LocalMemoryBuffer&gt;&amp;, bool*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;ray::ConcurrencyGroup, std::allocator&lt;ray::ConcurrencyGroup&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, bool, bool, long)&gt;::_M_invoke (ray/_raylet.so) (1,624 samples, 95.03%)</title><rect x="4.9737%" y="276" width="95.0263%" height="15" fill="rgb(221,117,51)" fg:x="85" fg:w="1624"/><text x="5.2237%" y="286.50">std::_Function_handler&lt;ray::Status(ray::rpc::Address const&amp;, ray::rpc::TaskType, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; ..</text></g><g><title>_raylet_task_execution_handler (ray/_raylet.so) (1,624 samples, 95.03%)</title><rect x="4.9737%" y="292" width="95.0263%" height="15" fill="rgb(212,20,18)" fg:x="85" fg:w="1624"/><text x="5.2237%" y="302.50">_raylet_task_execution_handler (ray/_raylet.so)</text></g><g><title>_raylet_execute_task_with_cancellation_handler (ray/_raylet.so) (1,624 samples, 95.03%)</title><rect x="4.9737%" y="308" width="95.0263%" height="15" fill="rgb(245,133,36)" fg:x="85" fg:w="1624"/><text x="5.2237%" y="318.50">_raylet_execute_task_with_cancellation_handler (ray/_raylet.so)</text></g><g><title>function_executor (ray/_raylet.so) (1,624 samples, 95.03%)</title><rect x="4.9737%" y="324" width="95.0263%" height="15" fill="rgb(212,6,19)" fg:x="85" fg:w="1624"/><text x="5.2237%" y="334.50">function_executor (ray/_raylet.so)</text></g><g><title>actor_method_executor (ray/_private/function_manager.py:728) (1,624 samples, 95.03%)</title><rect x="4.9737%" y="340" width="95.0263%" height="15" fill="rgb(218,1,36)" fg:x="85" fg:w="1624"/><text x="5.2237%" y="350.50">actor_method_executor (ray/_private/function_manager.py:728)</text></g><g><title>_resume_span (ray/util/tracing/tracing_helper.py:467) (1,624 samples, 95.03%)</title><rect x="4.9737%" y="356" width="95.0263%" height="15" fill="rgb(246,84,54)" fg:x="85" fg:w="1624"/><text x="5.2237%" y="366.50">_resume_span (ray/util/tracing/tracing_helper.py:467)</text></g><g><title>__ray_call__ (ray/actor.py:1581) (1,624 samples, 95.03%)</title><rect x="4.9737%" y="372" width="95.0263%" height="15" fill="rgb(242,110,6)" fg:x="85" fg:w="1624"/><text x="5.2237%" y="382.50">__ray_call__ (ray/actor.py:1581)</text></g><g><title>do_exec_compiled_task (ray/dag/compiled_dag_node.py:144) (4 samples, 0.23%)</title><rect x="99.7659%" y="388" width="0.2341%" height="15" fill="rgb(214,47,5)" fg:x="1705" fg:w="4"/><text x="100.0159%" y="398.50"></text></g></svg></svg>