// Plasma protocol specification

enum ProtocolVersion:short {
  V0,
}

enum MessageType:int {
  // Create a new object.
  PlasmaCreateRequest = 1,
  PlasmaCreateReply,
  // Seal an object.
  PlasmaSealRequest,
  PlasmaSealReply,
  // Release an object.
  PlasmaReleaseRequest,
  PlasmaReleaseReply,
  // Delete an object.
  PlasmaDeleteRequest,
  PlasmaDeleteReply,
  // Get an object stored on local Plasma store.
  PlasmaGetLocalRequest,
  PlasmaGetLocalReply,
  // Evict a list of objects.
  PlasmaEvictRequest,
  // Fetch objects from remote Plasma stores.
  PlasmaFetchRemoteRequest,
  PlasmaFetchRemoteReply,
  // Fetch objects from remote Plasma stores and don't wait for reply.
  PlasmaFetchRemoteNoReplyRequest,
  // Wait for objects to be ready either from local or remote Plasma stores.
  PlasmaWaitRequest,
  PlasmaWaitReply,
}

// table MessageHeader {
//   version: ProtocolVersion;
//   message_type: MessageType;
//   message_size: ulong;
// }

enum PlasmaError:int {
  // No error
  OK,
  // Trying to create an object that already exists.
  ObjectExists,
  // Trying to access an object that doesn't exist.
  ObjectNonExistent
}

// Plasma store messages

table PlasmaCreateRequest {
  // ID of the object to be created.
  object_id: string;
  // The size of the object's data in bytes.
  data_size: ulong;
  // The size of the object's metadata in bytes.
  metadata_size: ulong;
}

struct PlasmaObject {
  // Index of the memory segment (= memory mapped file) that
  // this object is allocated in.
  segment_index: int;
  // Size in bytes of this segment (needed to call mmap).
  mmap_size: ulong;
  // The offset in bytes in the memory mapped file of the data.
  data_offset: ulong;
  // The size in bytes of the data.
  data_size: ulong;
  // The offset in bytes in the memory mapped file of the metadata.
  metadata_offset: ulong;
  // The size in bytes of the metadata.
  metadata_size: ulong;
}

table PlasmaCreateReply {
  // ID of the object that was created.
  object_id: string;
  // The object that is returned with this reply.
  plasma_object: PlasmaObject;
  // Error that occurred for this call.
  error: PlasmaError;
}

// This is the format of the following messages
// - PlasmaSealRequest
// - PlasmaReleaseRequest
// - PlasmaDeleteRequest

table ObjectId {
  // ID of the object in the local Plasma store to be released.
  object_id: string;
}

// This is the format of the following messages
// - PlasmaSealReply
// - PlasmaReleaseReply
// - PlasmaDeleteReply

table ObjectIdAndInfo {
  // ID of the object.
  object_id: string;
  // Information associated to the object, e.g., error, status
  info: int;
}

// This is the format of the following messages
// - PlasmaGetLocalRequest
// - PlasmaStatusRequest
// - PlasmaEvictRequest

table ObjectIds {
  // IDs of the requested objects stored at local Plasma store.
  object_ids: [string];
}

table PlasmaGetLocalRequest {
  // IDs of the requested objects stored at local Plasma store.
  object_ids: [string];
}

table PlasmaGetLocalReply {
  // IDs of the objects being returned.
  // This number can be smaller than the number of requested
  // objects if not all requested objects are stored and sealed
  // in the local Plasma store.
  object_ids: [string];
  // Plasma object information, in the same order as their IDs.
  plasma_objects: [PlasmaObject];
  // The number of elements in both object_ids and plasma_objects arrays must agree.
}

table ObjectIdsAndInfos {
  // IDs of the objects being returned.
  object_ids: [string];
  // Array containing the information of each object ID in object_ids.
  object_infos: [int];
  // The number of elements in both object_ids and object_infos arrays must agree, i.e.,
  // object_infos[i] is the information associated with object_ids[i].
}

table ObjectRequest {
  // ID of the object.
  id: string;
  // The type of the object. This specifies whether we
  // will be waiting for an object store in the local or
  // global Plasma store.
  type: int;
  // The object status. This specifies where the object is stored.
  status: int;
}

table PlasmaWaitRequest {
  // Array of object requests whose status we are asking for.
  object_requests: [ObjectRequest];
  // Number of objects expected to be returned, if available.
  num_ready_objects: int;
  // timeout
  timeout: long;
}

table PlasmaWaitReply {
  // Array of object requests being returned.
  object_requests: [ObjectRequest];
  // Number of objects expected to be returned, if available.
  num_ready_objects: int;
}


