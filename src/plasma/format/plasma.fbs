// Plasma protocol specification

enum MessageType:int {
  // Create a new object.
  PlasmaCreateRequest = 1,
  PlasmaCreateReply,
  // Seal an object.
  PlasmaSealRequest,
  PlasmaSealReply,
  // Get an object that is stored on the local Plasma store.
  PlasmaGetRequest,
  PlasmaGetReply,
  // Release an object.
  PlasmaReleaseRequest,
  PlasmaReleaseReply,
  // Delete an object.
  PlasmaDeleteRequest,
  PlasmaDeleteReply,
  // Get status of an object.
  PlasmaStatusRequest,
  PlasmaStatusReply,
  // Make room for new objects in the plasma store.
  PlasmaEvictRequest,
  PlasmaEvictReply,
  // Fetch objects from remote Plasma stores.
  PlasmaFetchRequest,
  // Wait for objects to be ready either from local or remote Plasma stores.
  PlasmaWaitRequest,
  PlasmaWaitReply,
  // Subscribe to a list of objects or to all objects.
  PlasmaSubscribeRequest,
  // Unsubscribe.
  PlasmaUnsubscribeRequest,
}

enum PlasmaError:int {
  // Operation was successful.
  OK,
  // Trying to create an object that already exists.
  ObjectExists,
  // Trying to access an object that doesn't exist.
  ObjectNonexistent
}

// Plasma store messages

struct PlasmaObject {
  // Index of the memory segment (= memory mapped file) that
  // this object is allocated in.
  segment_index: int;
  // Size in bytes of this segment (needed to call mmap).
  mmap_size: ulong;
  // The offset in bytes in the memory mapped file of the data.
  data_offset: ulong;
  // The size in bytes of the data.
  data_size: ulong;
  // The offset in bytes in the memory mapped file of the metadata.
  metadata_offset: ulong;
  // The size in bytes of the metadata.
  metadata_size: ulong;
}

table PlasmaCreateRequest {
  // ID of the object to be created.
  object_id: string;
  // The size of the object's data in bytes.
  data_size: ulong;
  // The size of the object's metadata in bytes.
  metadata_size: ulong;
}

table PlasmaCreateReply {
  // ID of the object that was created.
  object_id: string;
  // The object that is returned with this reply.
  plasma_object: PlasmaObject;
  // Error that occurred for this call.
  error: PlasmaError;
}

table PlasmaSealRequest {
  // ID of the object to be sealed.
  object_id: string;
  // Hash of the object data.
  digest: [ubyte];
}

table PlasmaSealReply {
  // ID of the object that was sealed.
  object_id: string;
  // Error code.
  error: PlasmaError;
}

table PlasmaGetRequest {
  // IDs of the objects stored at local Plasma store we are getting.
  object_ids: [string];
}

table PlasmaGetReply {
  // IDs of the objects being returned.
  // This number can be smaller than the number of requested
  // objects if not all requested objects are stored and sealed
  // in the local Plasma store.
  object_ids: [string];
  // Plasma object information, in the same order as their IDs.
  plasma_objects: [PlasmaObject];
  // The number of elements in both object_ids and plasma_objects arrays must agree.
}

table PlasmaReleaseRequest {
  // ID of the object to be released.
  object_id: string;
}

table PlasmaReleaseReply {
  // ID of the object that was released.
  object_id: string;
  // Error code.
  error: PlasmaError;
}

table PlasmaDeleteRequest {
  // ID of the object to be deleted.
  object_id: string;
}

table PlasmaDeleteReply {
  // ID of the object that was deleted.
  object_id: string;
  // Error code.
  error: PlasmaError;
}

table PlasmaStatusRequest {
  // IDs of the objects stored at local Plasma store we request the status of.
  object_ids: [string];
}

enum ObjectStatus:int {
  Local = 1,
  Remote,
  Nonexistent,
  InTransfer
}

table PlasmaStatusReply {
  // IDs of the objects being returned.
  object_ids: [string];
  // Status of the object.
  status: [ObjectStatus];
}

table PlasmaEvictRequest {
  // Number of bytes that shall be freed.
  num_bytes: ulong;
}

table PlasmaEvictReply {
  // Number of bytes that have been freed.
  num_bytes: ulong;
}

table PlasmaFetchRequest {
  // IDs of objects to be gotten.
  object_ids: [string];
}

table ObjectRequest {
  // ID of the object.
  object_id: string;
  // The type of the object. This specifies whether we
  // will be waiting for an object store in the local or
  // global Plasma store.
  type: int;
}

table PlasmaWaitRequest {
  // Array of object requests whose status we are asking for.
  object_requests: [ObjectRequest];
  // Number of objects expected to be returned, if available.
  num_ready_objects: int;
  // timeout
  timeout: long;
}

table ObjectReply {
  // ID of the object.
  object_id: string;
  // The object status. This specifies where the object is stored.
  status: int;
}

table PlasmaWaitReply {
  // Array of object requests being returned.
  object_requests: [ObjectReply];
  // Number of objects expected to be returned, if available.
  num_ready_objects: int;
}

table PlasmaSubscribeRequest {
}
