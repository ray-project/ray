enum Language:int {
  PYTHON = 0,
  CPP = 1,
  JAVA = 2
}

enum TablePrefix:int {
  UNUSED = 0,
  TASK,
  RAYLET_TASK,
  CLIENT,
  OBJECT,
  FUNCTION,
  TASK_RECONSTRUCTION,
  HEARTBEAT
}

// The channel that Add operations to the Table should be published on, if any.
enum TablePubsub:int {
  NO_PUBLISH = 0,
  TASK,
  RAYLET_TASK,
  CLIENT,
  OBJECT,
  ACTOR,
  HEARTBEAT
}

table GcsTableEntry {
  id: string;
  entries: [string];
}

table FunctionTableData {
  language: Language;
  name: string;
  data: string;
}

table ObjectTableData {
  // The size of the object.
  object_size: long;
  // The node manager ID that this object appeared on or was evicted by.
  manager: string;
  // Whether this entry is an addition or a deletion.
  is_eviction: bool;
  // The number of times this object has been evicted from this node so far.
  num_evictions: int;
}

table TaskReconstructionData {
  num_executions: int;
  node_manager_id: string;
}

enum SchedulingState:int {
  NONE = 0,
  WAITING = 1,
  SCHEDULED = 2,
  QUEUED = 4,
  RUNNING = 8,
  DONE = 16,
  LOST = 32,
  RECONSTRUCTING = 64
}

table TaskTableData {
  // The state of the task.
  scheduling_state: SchedulingState;
  // A local scheduler ID.
  scheduler_id: string;
  // A string of bytes representing the task's TaskExecutionDependencies.
  execution_dependencies: string;
  // The number of times the task was spilled back by local schedulers.
  spillback_count: long;
  // A string of bytes representing the task specification.
  task_info: string;
  // TODO(pcm): This is at the moment duplicated in task_info, remove that one
  updated: bool;
}

table TaskTableTestAndUpdate {
  test_scheduler_id: string;
  test_state_bitmask: int;
  update_state: SchedulingState;
}

table ClassTableData {
}

table ActorTableData {
}

table ErrorTableData {
}

table CustomSerializerData {
}

table ConfigTableData {
}

table RayResource {
  // The type of the resource.
  resource_name: string;
  // The total capacity of this resource type.
  resource_capacity: double;
}

table ClientTableData {
  // The client ID of the client that the message is about.
  client_id: string;
  // The IP address of the client's node manager.
  node_manager_address: string;
  // The port at which the client's node manager is listening for TCP
  // connections from other node managers.
  node_manager_port: int;
  // The port at which the client's object manager is listening for TCP
  // connections from other object managers.
  object_manager_port: int;
  // True if the message is about the addition of a client and false if it is
  // about the deletion of a client.
  is_insertion: bool;
  resources_total_label: [string];
  resources_total_capacity: [double];
}

table HeartbeatTableData {
  // Node manager client id
  client_id: string;
  // Resource capacity currently available on this node manager.
  resources_available_label: [string];
  resources_available_capacity: [double];
  // Total resource capacity configured for this node manager.
  resources_total_label: [string];
  resources_total_capacity: [double];
}
