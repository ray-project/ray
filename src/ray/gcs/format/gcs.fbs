// TODO(hchen): Migrate data structures in this file to protobuf (`gcs.proto`).

enum Language:int {
  PYTHON=0,
  JAVA=1,
  CPP=2,
}

table Arg {
  // Object ID for pass-by-reference arguments. Normally there is only one
  // object ID in this list which represents the object that is being passed.
  // However to support reducers in a MapReduce workload, we also support
  // passing multiple object IDs for each argument.
  // Note that this is a long string that concatenate all of the object IDs.
  object_ids: string;
  // Data for pass-by-value arguments.
  data: string;
}

table TaskInfo {
  // ID of the job that created this task.
  job_id: string;
  // Task ID of the task.
  task_id: string;
  // Task ID of the parent task.
  parent_task_id: string;
  // A count of the number of tasks submitted by the parent task before this one.
  parent_counter: int;
  // The ID of the actor to create if this is an actor creation task.
  actor_creation_id: string;
  // The dummy object ID of the actor creation task if this is an actor method.
  actor_creation_dummy_object_id: string;
  // The max number of times this actor should be recontructed.
  // If this number of 0 or negative, the actor won't be reconstructed on failure.
  max_actor_reconstructions: int;
  // Actor ID of the task. This is the actor that this task is executed on
  // or NIL_ACTOR_ID if the task is just a normal task.
  actor_id: string;
  // The ID of the handle that was used to submit the task. This should be
  // unique across handles with the same actor_id.
  actor_handle_id: string;
  // Number of tasks that have been submitted to this actor so far.
  actor_counter: int;
  // If this is an actor task, then this will be populated with all of the new
  // actor handles that were forked from this handle since the last task on
  // this handle was submitted.
  // Note that this is a long string that concatenate all of the new_actor_handle IDs.
  new_actor_handles: string;
  // Task arguments.
  args: [Arg];
  // Number of return objects.
  num_returns: int;
  // The required_resources vector indicates the quantities of the different
  // resources required by this task.
  required_resources: [ResourcePair];
  // The resources required for placing this task on a node. If this is empty,
  // then the placement resources are equal to the required_resources.
  required_placement_resources: [ResourcePair];
  // The language that this task belongs to.
  language: Language;
  // Function descriptor, which is a list of strings that can
  // uniquely describe a function.
  // For a Python function, it should be: [module_name, class_name, function_name]
  // For a Java function, it should be: [class_name, method_name, type_descriptor]
  function_descriptor: [string];
  // The dynamic options used in the worker command when starting the worker process for
  // an actor creation task. If the list isn't empty, the options will be used to replace
  // the placeholder strings (`RAY_WORKER_OPTION_0`, `RAY_WORKER_OPTION_1`, etc) in the
  // worker command.
  dynamic_worker_options: [string];
}

table ResourcePair {
  // The name of the resource.
  key: string;
  // The quantity of the resource.
  value: double;
}

table ProfileEvent {
  // The type of the event.
  event_type: string;
  // The start time of the event.
  start_time: double;
  // The end time of the event. If the event is a point event, then this should
  // be the same as the start time.
  end_time: double;
  // Additional data associated with the event. This data must be serialized
  // using JSON.
  extra_data: string;
}

table ProfileTableData {
  // The type of the component that generated the event, e.g., worker or
  // object_manager, or node_manager.
  component_type: string;
  // An identifier for the component that generated the event.
  component_id: string;
  // An identifier for the node that generated the event.
  node_ip_address: string;
  // This is a batch of profiling events. We batch these together for
  // performance reasons because a single task may generate many events, and
  // we don't want each event to require a GCS command.
  profile_events: [ProfileEvent];
}
