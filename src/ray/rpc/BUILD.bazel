load("//bazel:ray.bzl", "ray_cc_library")

ray_cc_library(
    name = "common",
    srcs = ["common.cc"],
    hdrs = ["common.h"],
    visibility = ["//visibility:private"],
)

ray_cc_library(
    name = "client_call",
    hdrs = ["client_call.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//src/ray/common:asio",
        "//src/ray/common:grpc_util",
        "//src/ray/common:id",
        "//src/ray/common:status",
        "@com_google_absl//absl/synchronization",
    ],
)

ray_cc_library(
    name = "grpc_client",
    hdrs = ["grpc_client.h"],
    visibility = ["//visibility:public"],
    deps = [
        ":client_call",
        ":common",
        ":rpc_chaos",
        "//src/ray/common:grpc_util",
        "//src/ray/common:ray_config",
        "//src/ray/common:status",
    ],
)

ray_cc_library(
    name = "retryable_grpc_client",
    srcs = ["retryable_grpc_client.cc"],
    hdrs = ["retryable_grpc_client.h"],
    visibility = ["//visibility:public"],
    deps = [
        ":client_call",
        ":grpc_client",
        "@com_google_absl//absl/container:btree",
        "@com_google_absl//absl/strings:str_format",
        "@com_google_absl//absl/time",
    ],
)

ray_cc_library(
    name = "metrics_agent_client",
    hdrs = ["metrics_agent_client.h"],
    visibility = ["//visibility:public"],
    deps = [
        ":grpc_client",
        "//src/ray/protobuf:reporter_cc_grpc",
        "//src/ray/protobuf:reporter_cc_proto",
        "//src/ray/util:logging",
        "@com_github_grpc_grpc//:grpc++",
    ],
)

ray_cc_library(
    name = "event_aggregator_client",
    hdrs = ["event_aggregator_client.h"],
    visibility = ["//visibility:public"],
    deps = [
        ":grpc_client",
        "//src/ray/protobuf:events_event_aggregator_service_cc_grpc",
        "//src/ray/util:logging",
        "@com_github_grpc_grpc//:grpc++",
    ],
)

ray_cc_library(
    name = "rpc_chaos",
    srcs = ["rpc_chaos.cc"],
    hdrs = ["rpc_chaos.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//src/ray/common:ray_config",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/synchronization",
    ],
)

ray_cc_library(
    name = "server_call",
    srcs = ["server_call.cc"],
    hdrs = ["server_call.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//src/ray/common:asio",
        "//src/ray/common:grpc_util",
        "//src/ray/common:id",
        "//src/ray/common:ray_config",
        "//src/ray/common:status",
        "//src/ray/stats:stats_metric",
        "@com_github_grpc_grpc//:grpc++",
    ],
)

ray_cc_library(
    name = "grpc_server",
    srcs = ["grpc_server.cc"],
    hdrs = ["grpc_server.h"],
    visibility = ["//visibility:public"],
    deps = [
        ":common",
        ":server_call",
        "//src/ray/common:asio",
        "//src/ray/common:ray_config",
        "//src/ray/common:status",
        "//src/ray/util:thread_utils",
        "@com_github_grpc_grpc//:grpc++",
        "@com_github_grpc_grpc//:grpc++_reflection",
        "@com_github_grpc_grpc//:grpcpp_admin",
    ],
)

ray_cc_library(
    name = "node_manager_client",
    srcs = ["node_manager/raylet_client_pool.cc"],
    hdrs = [
        "node_manager/node_manager_client.h",
        "node_manager/node_manager_server.h",
        "node_manager/raylet_client_pool.h",
    ] + [
        # TODO(eoakes): these are needed due to a circular dependency:
        # raylet_client_pool.cc -> raylet_client.h -> node_manager_client.h
        "//src/ray/raylet_client:raylet_client.h",
        "//src/ray/raylet_client:raylet_connection.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":client_call",
        ":grpc_client",
        "//src/ray/common:id",
        "//src/ray/gcs/gcs_client:gcs_client_lib",
        "//src/ray/protobuf:node_manager_cc_grpc",
    ] + [
        # TODO(eoakes): these three come from raylet_client.h, remove after breaking the circular dependency.
        "//src/ray/ipc:client_connection",
        "//src/ray/common:ray_object",
        "//src/ray/common:task_common",
    ],
)

ray_cc_library(
    name = "node_manager_server",
    hdrs = [
        "node_manager/node_manager_server.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":grpc_server",
        ":server_call",
        "//src/ray/protobuf:node_manager_cc_grpc",
        "@com_github_grpc_grpc//:grpc++",
    ],
)

ray_cc_library(
    name = "gcs_client",
    hdrs = [
        "gcs/gcs_rpc_client.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":client_call",
        ":retryable_grpc_client",
        "//src/ray/common:ray_config",
        "//src/ray/protobuf:autoscaler_cc_grpc",
        "//src/ray/protobuf:gcs_service_cc_grpc",
        "@com_google_absl//absl/container:btree",
    ],
)

ray_cc_library(
    name = "gcs_server",
    hdrs = [
        "gcs/gcs_rpc_server.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":grpc_server",
        ":server_call",
        "//src/ray/common:asio",
        "//src/ray/common:id",
        "//src/ray/common:ray_config",
        "//src/ray/protobuf:autoscaler_cc_grpc",
        "//src/ray/protobuf:events_event_aggregator_service_cc_grpc",
        "//src/ray/protobuf:gcs_service_cc_grpc",
        "@boost//:asio",
        "@com_github_grpc_grpc//:grpc++",
    ],
)

ray_cc_library(
    name = "object_manager_client",
    hdrs = [
        "object_manager/object_manager_client.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//src/ray/object_manager:object_manager_grpc_client_manager",
        "//src/ray/protobuf:object_manager_cc_grpc",
        "//src/ray/util:logging",
        "@com_github_grpc_grpc//:grpc++",
    ],
)

ray_cc_library(
    name = "object_manager_server",
    hdrs = [
        "object_manager/object_manager_server.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":grpc_server",
        ":server_call",
        "//src/ray/common:asio",
        "//src/ray/object_manager:object_manager_grpc_client_manager",
        "//src/ray/protobuf:object_manager_cc_grpc",
        "@boost//:asio",
        "@com_github_grpc_grpc//:grpc++",
    ],
)

ray_cc_library(
    name = "core_worker_client",
    srcs = [
        "worker/core_worker_client.cc",
        "worker/core_worker_client_pool.cc",
    ],
    hdrs = [
        "worker/core_worker_client.h",
        "worker/core_worker_client_pool.h",
        "worker/core_worker_server.h",
    ],
    deps = [
        "//src/ray/common:id",
        "//src/ray/common:status",
        "//src/ray/gcs/gcs_client:gcs_client_lib",
        "//src/ray/protobuf:core_worker_cc_grpc",
        "//src/ray/pubsub:subscriber",
        "//src/ray/raylet_client:raylet_client_lib",
        "//src/ray/util:logging",
        "@com_github_grpc_grpc//:grpc++",
        "@com_google_absl//absl/synchronization",
    ],
)

ray_cc_library(
    name = "core_worker_server",
    hdrs = [
        "worker/core_worker_server.h",
    ],
    deps = [
        ":grpc_server",
        ":server_call",
        "//src/ray/common:asio",
        "//src/ray/protobuf:core_worker_cc_grpc",
    ],
)
