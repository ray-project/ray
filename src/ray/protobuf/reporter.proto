// Copyright 2017 The Ray Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
option cc_enable_arenas = true;

package ray.rpc;

import "opencensus/proto/metrics/v1/metrics.proto";

import "src/ray/protobuf/common.proto";

message GetProfilingStatsRequest {
  // PID of the worker process.
  uint32 pid = 1;
  // Duration of the profiling in seconds.
  int32 duration = 2;
}

message GetProfilingStatsReply {
  // Profiling stats.
  string profiling_stats = 1;
  // Standard output of the profiler process.
  string std_out = 2;
  // Standard error of the profiler process.
  string std_err = 3;
}

message ReportMetricsRequest {
  repeated MetricPoint metrics_points = 1;
}

message ReportMetricsReply {
  bool metrcs_description_required = 1;
}

message ReportOCMetricsRequest {
  repeated opencensus.proto.metrics.v1.Metric metrics = 1;
}

message ReportOCMetricsReply {
}

// Resource usage reported by the node reporter.
message NodeResourceUsage {
  // Node resource usage in serialized json.
  // TODO: add schema for the subfields, e.g.
  // https://github.com/ray-project/ray/blob/e54d3117a40c20ca5441d38ffc72b908bc1b0609/dashboard/modules/reporter/reporter_agent.py#L330-L347
  string json = 1;
}

// Service for communicating with the reporter agent module on a remote node.
service ReporterService {
  // Get the profiling stats.
  rpc GetProfilingStats(GetProfilingStatsRequest) returns (GetProfilingStatsReply);
  // Report metrics to the local metrics agents.
  rpc ReportMetrics(ReportMetricsRequest) returns (ReportMetricsReply);
  // Report OpenCensus metrics to the local metrics agent.
  rpc ReportOCMetrics(ReportOCMetricsRequest) returns (ReportOCMetricsReply);
}

message StreamLogRequest {
  // File name of the log file
  string log_file_name = 1;
  // Keeps stream alive perpertually if true, else terminates on EOF
  bool keep_alive = 2;
  // Number of lines to tail from the log file initially
  // -1 indicates to fetch the whole file
  optional int32 lines = 3;
  // if keep_alive is true, this indicates how frequently to poll the
  // log file for new lines
  optional float interval = 4;
}

message StreamLogReply {
  // The raw bytes of the log file chunk
  bytes data = 1;
}

message ListLogsRequest {}

message ListLogsReply {
  // The file names of all the log files in this node's
  // log directory
  repeated string log_files = 1;
}

// Service for communicating with the log agent module on a remote node.
service LogService {
  // Get the list of logs from the agent.
  rpc ListLogs(ListLogsRequest) returns (ListLogsReply);
  // Streams a log file from the agent.
  rpc StreamLog(StreamLogRequest) returns (stream StreamLogReply);
}
