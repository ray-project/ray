syntax = "proto3";
option cc_enable_arenas = true;

package ray.rpc;

// Represents the state of a launched instance.
// An instance is considered launched as long as
// it has a unique instance_id associated with it.
//
// Note a launched instance may be DEAD. In this case,
// the state will be garbage collected after some timeout
// period (by default 30 minutes).
message LaunchedInstance {
  enum LaunchedInstanceState {
    // The instance is known to have finished booststrapping and
    // should join the cluster soon/or have already
    // joined the cluster.
    ALIVE = 1;
    // The instance is known to be dead. 
    DEAD = 2;
    // The node is going to be preempted by the node manager.
    PREMEPTING = 3;
    // The node is being terminated by the node provider.
    TERMINATING = 4;
    // The node has being allocated but envirnoment is not ready yet.
    BOOSTRAPPING = 5;
  }
  bytes instance_id = 1;
  string node_type = 2;
  LaunchedInstanceState instance_state = 3; 
}

// Representing a pending request to launch an instance.
//
// Note a request could be failed due to various reasons.
// The detailed reqson could be queried through description
// field. A failed launching request will be GCed
// after some timeout period (by default 30 minutes).
message LauchingInstance {
  enum LauchingRequestState {
    QUEUED = 1;
    REQUESTED = 2;
    RESOURCES_ALLOCATED = 3;
    FAILED = 4;
  }
  string node_type = 1;
  string description = 2;
  PendingRequestState pending_request_state = 3;
}

message GetInstanceManagerStateRequest {}

message GetInstanceManagerStateReply {
  // a monotonically increasing version number.
  // the version number is incremented whenever
  // the state is updated (either by successful adjusting request,
  // or instance state change).
  int64 version = 1;

  // this number is increased whenever a successful
  // adjusting request is received. Unlike the version,
  // this doesn't change when instance state changes.
  int64 num_successful_adjustments = 2;
  repeated LaunchedInstance launched_instances = 3;
  map<LauchingInstance, int32> launching_instances = 4;
}

// Represents a conditional update request to launch/terminate
// instances. 
//
// The request will be rejected if the expected_version
// doesn't match the current version of the instance manager state,
// or the expected_num_successful_adjustments doesn't match the
// num_successful_adjustments.
// If the expected_version is -1, the version condition is ignored.
// similarly, if the expected_num_successful_adjustments is -1, the
// num_successful_adjustments condition is ignored.
message AdjustInstancesRequest {
  int64 expected_version = 1;
  int64 expected_num_successful_adjustments = 2; 
  map<node_type, int32> new_nodes_to_launch = 3;
  repeated bytes nodes_to_terminate = 4;
}

message AdjustInstancesReply {
  bool success = 1;
  int64 version = 2;
  int64 num_successful_adjustments = 3;
}

service InstanceManagerService {
  rpc GetInstanceManagerState(GetInstanceManagerStateRequest) returns (GetInstanceManagerStateReply);
  rpc AdjustInstancesRequest(AdjustInstancesRequest) returns (AdjustInstancesReply);
}
