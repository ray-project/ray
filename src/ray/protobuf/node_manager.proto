syntax = "proto3";

package ray.rpc;

import "src/ray/protobuf/common.proto";

// Request a worker from the raylet with the specified resources.
message WorkerLeaseRequest {
  // TaskSpec containing the requested resources.
  TaskSpec resource_spec = 1;
}

message WorkerLeaseReply {
  // Address of the leased worker. If this is empty, then the request should be
  // retried at the provided raylet address.
  Address worker_address = 1;
  // Address of the raylet to spill back to, if any.
  Address retry_at_raylet_address = 2;
  // Resource mapping ids acquired by the leased worker.
  repeated ResourceMapEntry resource_mapping = 3;
}

// Release a worker back to its raylet.
message ReturnWorkerRequest {
  // Port of the leased worker that we are now returning.
  int32 worker_port = 1;
  // Unique id of the leased worker we are now returning.
  bytes worker_id = 2;
  // If true, there was some unrecoverable error and the raylet should
  // disconnect the worker.
  bool disconnect_worker = 3;
}

message ReturnWorkerReply {
}

message ForwardTaskRequest {
  // The ID of the task to be forwarded.
  bytes task_id = 1;
  // The tasks in the uncommitted lineage of the forwarded task. This
  // should include task_id.
  repeated Task uncommitted_tasks = 2;
}

message ForwardTaskReply {
}

message NodeStatsRequest {
}

message WorkerStats {
  // PID of the worker process.
  uint32 pid = 1;
  // Whether this is a driver.
  bool is_driver = 2;
}

message ViewData {
  message Measure {
    // A short string that describes the tags for this mesaure, e.g.,
    // "Tag1:Value1,Tag2:Value2,Tag3:Value3"
    string tags = 1;
    // Int64 type value (if present).
    int64 int_value = 2;
    // Double type value (if present).
    double double_value = 3;
    // Distribution type value (if present).
    double distribution_min = 4;
    double distribution_mean = 5;
    double distribution_max = 6;
    double distribution_count = 7;
    repeated double distribution_bucket_boundaries = 8;
    repeated double distribution_bucket_counts = 9;
  }

  // The name of this Census view.
  string view_name = 1;
  // The list of measures recorded under this view.
  repeated Measure measures = 2;
}

message NodeStatsReply {
  repeated WorkerStats workers_stats = 1;
  repeated ViewData view_data = 2;
}

// Service for inter-node-manager communication.
service NodeManagerService {
  // Request a worker from the raylet.
  rpc RequestWorkerLease(WorkerLeaseRequest) returns (WorkerLeaseReply);
  // Release a worker back to its raylet.
  rpc ReturnWorker(ReturnWorkerRequest) returns (ReturnWorkerReply);
  // Forward a task and its uncommitted lineage to the remote node manager.
  rpc ForwardTask(ForwardTaskRequest) returns (ForwardTaskReply);
  // Get the current node stats.
  rpc GetNodeStats(NodeStatsRequest) returns (NodeStatsReply);
}
