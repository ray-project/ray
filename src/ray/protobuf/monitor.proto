// Copyright 2017 The Ray Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
option cc_enable_arenas = true;
package ray.rpc;

message GetRayVersionRequest {}

message GetRayVersionReply {
  string version = 1;
}

message DrainAndKillNodeRequest {
  // The node ids to drain.
  repeated bytes node_ids = 1;
}

message DrainAndKillNodeReply {
  // The node ids which are beginning to drain.
  repeated bytes drained_nodes = 2;
}

message ResourceBundle {
  // Mapping from resource name to quantity.
  map<string, double> resources = 1;
}

message ResourceRequest {
  enum ResourceRequestType {
    // A request which needs resources for a short period of time (like a
    // task). It may make sense for the autoscaler to not provision enough
    // resources to satisfy these since they could run sequentially on the same
    // node.
    TASK_RESERVATION = 0;
    // A strict spread placement group reservation.
    STRICT_SPREAD_RESERVATION = 1;
    // A soft spread placement group reservation.
    SPREAD_RESERVATION = 2;
    // A soft pack placement group reservation.
    PACK_RESERVATION = 3;
    // A strict pack reservation.
    STRICT_PACK_RESERVATION = 4;
    // A request to provision resources, even though this request won't use
    // them. This is useful for API's like
    // `autoscaler.sdk.request_resources()`.
    MIN_RESOURCES = 5;
  }

  // The request type. See enum values for more details.
  ResourceRequestType resource_request_type = 1;

  // The number of requests of this type. Note this is a performance
  // optimization. Clients should provide the same semantics as if many
  // ResourceRequests of count=1 were returned.
  int32 count = 2;

  // The bundles in this request. By default, there are no placement
  // constraints on these bundles.
  repeated ResourceBundle bundles = 3;
}

message NodeStatus {
  // The unique id of this node in the cluster.
  bytes node_id = 1;

  // The address of the node.
  string address = 2;

  // The available resources on the node.
  map<string, double> available_resources = 3;

  // The corresponding total resources on the node.
  map<string, double> total_resources = 4;
}

message GetSchedulingStatusRequest {}

message GetSchedulingStatusReply {
  // The total resource requests by the cluster.
  repeated ResourceRequest resource_requests = 1;

  // The status of the nodes in the cluster.
  repeated NodeStatus node_statuses = 2;
}

// This service provides a stable interface for a monitor/autoscaler process to interact
// with Ray.
service MonitorGcsService {
  // Get the ray version of the service.
  rpc GetRayVersion(GetRayVersionRequest) returns (GetRayVersionReply);
  // Request that GCS drain and kill a node. This call is idempotent, and could
  // need to be retried if the head node fails.
  rpc DrainAndKillNode(DrainAndKillNodeRequest) returns (DrainAndKillNodeReply);

  rpc GetSchedulingStatus(GetSchedulingStatusRequest) returns (GetSchedulingStatusReply);
}
