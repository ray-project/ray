syntax = "proto3";

package ray.rpc;

import "src/ray/protobuf/gcs.proto";

message AddJobRequest {
  JobTableData data = 1;
}

message AddJobReply {
  bool success = 1;
}

message MarkJobFinishedRequest {
  bytes job_id = 1;
}

message MarkJobFinishedReply {
  bool success = 1;
}

// Service for job info access.
service JobInfoGcsService {
  // Add job to gcs server.
  rpc AddJob(AddJobRequest) returns (AddJobReply);
  // Mark job as finished to gcs server.
  rpc MarkJobFinished(MarkJobFinishedRequest) returns (MarkJobFinishedReply);
}

message GetActorInfoRequest {
  // ID of this actor.
  bytes actor_id = 1;
}

message GetActorInfoReply {
  // Data of actor.
  ActorTableData actor_table_data = 1;
}

message RegisterActorInfoRequest {
  // Data of actor.
  ActorTableData actor_table_data = 1;
}

message RegisterActorInfoReply {
}

message UpdateActorInfoRequest {
  // ID of this actor.
  bytes actor_id = 1;
  // Data of actor.
  ActorTableData actor_table_data = 2;
}

message UpdateActorInfoReply {
}

// Service for actor info access.
service ActorInfoGcsService {
  // Get actor data from GCS Service.
  rpc GetActorInfo(GetActorInfoRequest) returns (GetActorInfoReply);
  // Register an actor to GCS Service.
  rpc RegisterActorInfo(RegisterActorInfoRequest) returns (RegisterActorInfoReply);
  // Update actor info in GCS Service.
  rpc UpdateActorInfo(UpdateActorInfoRequest) returns (UpdateActorInfoReply);
}

message RegisterNodeRequest {
  // Info of node.
  GcsNodeInfo node_info = 1;
}

message RegisterNodeReply {
}

message UnregisterNodeRequest {
  // The ID of node.
  bytes node_id = 1;
}

message UnregisterNodeReply {
}

message GetAllNodeInfoRequest {
}

message GetAllNodeInfoReply {
  repeated GcsNodeInfo node_info_list = 1;
}

// Service for node info access.
service NodeInfoGcsService {
  // Register a node to GCS Service.
  rpc RegisterNode(RegisterNodeRequest) returns (RegisterNodeReply);
  // Unregister a node from GCS Service.
  rpc UnregisterNode(UnregisterNodeRequest) returns (UnregisterNodeReply);
  // Get information of all nodes from GCS Service.
  rpc GetAllNodeInfo(GetAllNodeInfoRequest) returns (GetAllNodeInfoReply);
}

message GetObjectLocationsRequest {
  // The ID of object to lookup in GCS Service.
  bytes object_id = 1;
}

message GetObjectLocationsReply {
  // Data of object
  repeated ObjectTableData object_table_data_list = 1;
}

message AddObjectLocationRequest {
  // The ID of object which location will be added to GCS Service.
  bytes object_id = 1;
  // The location that will be added to GCS Service.
  bytes node_id = 2;
}

message AddObjectLocationReply {
}

message RemoveObjectLocationRequest {
  // The ID of object which location will be removed from GCS Service.
  bytes object_id = 1;
  // The location that will be removed from GCS Service.
  bytes node_id = 2;
}

message RemoveObjectLocationReply {
}

// Service for object info access.
service ObjectInfoGcsService {
  // Get object's locations from GCS Service.
  rpc GetObjectLocations(GetObjectLocationsRequest) returns (GetObjectLocationsReply);
  // Add location of object to GCS Service.
  rpc AddObjectLocation(AddObjectLocationRequest) returns (AddObjectLocationReply);
  // Remove location of object from GCS Service.
  rpc RemoveObjectLocation(RemoveObjectLocationRequest)
      returns (RemoveObjectLocationReply);
}
