// Copyright 2017 The Ray Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package ray.rpc;

import "src/ray/protobuf/common.proto";
import "src/ray/protobuf/gcs.proto";

message GcsStatus {
  int32 code = 1;
  string message = 2;
}

message AddJobRequest {
  JobTableData data = 1;
}

message AddJobReply {
  GcsStatus status = 1;
}

message MarkJobFinishedRequest {
  bytes job_id = 1;
}

message MarkJobFinishedReply {
  GcsStatus status = 1;
}

message GetAllJobInfoRequest {
}

message GetAllJobInfoReply {
  GcsStatus status = 1;
  repeated JobTableData job_info_list = 2;
}

// Service for job info access.
service JobInfoGcsService {
  // Add job to GCS Service.
  rpc AddJob(AddJobRequest) returns (AddJobReply);
  // Mark job as finished to GCS Service.
  rpc MarkJobFinished(MarkJobFinishedRequest) returns (MarkJobFinishedReply);
  // Get information of all jobs from GCS Service.
  rpc GetAllJobInfo(GetAllJobInfoRequest) returns (GetAllJobInfoReply);
}

message GetActorInfoRequest {
  // ID of this actor. If actor_id is set, name will not be set.
  bytes actor_id = 1;
  // Name of the actor. This is only used for detached actors. If name is set,
  // actor_id will not be set.
  string name = 2;
}

message GetActorInfoReply {
  GcsStatus status = 1;
  // Data of actor.
  ActorTableData actor_table_data = 2;
}

message GetNamedActorInfoRequest {
  // Name of the actor.
  string name = 2;
}

message GetNamedActorInfoReply {
  GcsStatus status = 1;
  // Data of actor.
  ActorTableData actor_table_data = 2;
}

message GetAllActorInfoRequest {
}

message GetAllActorInfoReply {
  GcsStatus status = 1;
  // Data of actor.
  repeated ActorTableData actor_table_data = 2;
}

message RegisterActorInfoRequest {
  // Data of actor.
  ActorTableData actor_table_data = 1;
}

message RegisterActorInfoReply {
  GcsStatus status = 1;
}

message UpdateActorInfoRequest {
  // ID of this actor.
  bytes actor_id = 1;
  // Data of actor.
  ActorTableData actor_table_data = 2;
}

message UpdateActorInfoReply {
  GcsStatus status = 1;
}

message AddActorCheckpointRequest {
  ActorCheckpointData checkpoint_data = 1;
}

message AddActorCheckpointReply {
  GcsStatus status = 1;
}

message GetActorCheckpointRequest {
  bytes actor_id = 1;
  bytes checkpoint_id = 2;
}

message GetActorCheckpointReply {
  GcsStatus status = 1;
  ActorCheckpointData checkpoint_data = 2;
}

message GetActorCheckpointIDRequest {
  bytes actor_id = 1;
}

message GetActorCheckpointIDReply {
  GcsStatus status = 1;
  ActorCheckpointIdData checkpoint_id_data = 2;
}

// Service for actor info access.
service ActorInfoGcsService {
  // Register actor to gcs service.
  rpc RegisterActor(RegisterActorRequest) returns (RegisterActorReply);
  // Create actor which local dependencies are resolved.
  rpc CreateActor(CreateActorRequest) returns (CreateActorReply);
  // Get actor data from GCS Service by actor id.
  rpc GetActorInfo(GetActorInfoRequest) returns (GetActorInfoReply);
  // Get actor data from GCS Service by name.
  rpc GetNamedActorInfo(GetNamedActorInfoRequest) returns (GetNamedActorInfoReply);
  // Get information of all actor from GCS Service.
  rpc GetAllActorInfo(GetAllActorInfoRequest) returns (GetAllActorInfoReply);
  // Register an actor to GCS Service.
  rpc RegisterActorInfo(RegisterActorInfoRequest) returns (RegisterActorInfoReply);
  // Update actor info in GCS Service.
  rpc UpdateActorInfo(UpdateActorInfoRequest) returns (UpdateActorInfoReply);
  // Add actor checkpoint data to GCS Service.
  rpc AddActorCheckpoint(AddActorCheckpointRequest) returns (AddActorCheckpointReply);
  // Get actor checkpoint data from GCS Service.
  rpc GetActorCheckpoint(GetActorCheckpointRequest) returns (GetActorCheckpointReply);
  // Get actor checkpoint id data from GCS Service.
  rpc GetActorCheckpointID(GetActorCheckpointIDRequest)
      returns (GetActorCheckpointIDReply);
}

// Service for placement group info access.
service PlacementGroupInfoGcsService {
  // Create placement group via gcs service
  rpc CreatePlacementGroup(CreatePlacementGroupRequest)
      returns (CreatePlacementGroupReply);
}

message RegisterNodeRequest {
  // Info of node.
  GcsNodeInfo node_info = 1;
}

message RegisterNodeReply {
  GcsStatus status = 1;
}

message UnregisterNodeRequest {
  // The ID of node.
  bytes node_id = 1;
}

message UnregisterNodeReply {
  GcsStatus status = 1;
}

message GetAllNodeInfoRequest {
}

message GetAllNodeInfoReply {
  GcsStatus status = 1;
  repeated GcsNodeInfo node_info_list = 2;
}

message ReportHeartbeatRequest {
  HeartbeatTableData heartbeat = 1;
}

message ReportHeartbeatReply {
  GcsStatus status = 1;
}

message ReportBatchHeartbeatRequest {
  HeartbeatBatchTableData heartbeat_batch = 1;
}

message ReportBatchHeartbeatReply {
  GcsStatus status = 1;
}

message GetResourcesRequest {
  bytes node_id = 1;
}

message GetResourcesReply {
  GcsStatus status = 1;
  map<string, ResourceTableData> resources = 2;
}

message UpdateResourcesRequest {
  bytes node_id = 1;
  map<string, ResourceTableData> resources = 2;
}

message UpdateResourcesReply {
  GcsStatus status = 1;
}

message DeleteResourcesRequest {
  bytes node_id = 1;
  repeated string resource_name_list = 2;
}

message DeleteResourcesReply {
  GcsStatus status = 1;
}

message SetInternalConfigRequest {
  StoredConfig config = 1;
}

message SetInternalConfigReply {
  GcsStatus status = 1;
}

message GetInternalConfigRequest {
}

message GetInternalConfigReply {
  GcsStatus status = 1;
  StoredConfig config = 2;
}

// Service for node info access.
service NodeInfoGcsService {
  // Register a node to GCS Service.
  rpc RegisterNode(RegisterNodeRequest) returns (RegisterNodeReply);
  // Unregister a node from GCS Service.
  rpc UnregisterNode(UnregisterNodeRequest) returns (UnregisterNodeReply);
  // Get information of all nodes from GCS Service.
  rpc GetAllNodeInfo(GetAllNodeInfoRequest) returns (GetAllNodeInfoReply);
  // Report heartbeat of a node to GCS Service.
  rpc ReportHeartbeat(ReportHeartbeatRequest) returns (ReportHeartbeatReply);
  // Get node's resources from GCS Service.
  rpc GetResources(GetResourcesRequest) returns (GetResourcesReply);
  // Update resources of a node in GCS Service.
  rpc UpdateResources(UpdateResourcesRequest) returns (UpdateResourcesReply);
  // Delete resources of a node in GCS Service.
  rpc DeleteResources(DeleteResourcesRequest) returns (DeleteResourcesReply);
  // Set cluster internal config.
  rpc SetInternalConfig(SetInternalConfigRequest) returns (SetInternalConfigReply);
  // Get cluster internal config.
  rpc GetInternalConfig(GetInternalConfigRequest) returns (GetInternalConfigReply);
}

message GetObjectLocationsRequest {
  // The ID of object to lookup in GCS Service.
  bytes object_id = 1;
}

message GetObjectLocationsReply {
  GcsStatus status = 1;
  // Data of object.
  repeated ObjectTableData object_table_data_list = 2;
}

message GetAllObjectLocationsRequest {
}

message GetAllObjectLocationsReply {
  GcsStatus status = 1;
  // Data of object location info.
  repeated ObjectLocationInfo object_location_info_list = 2;
}

message AddObjectLocationRequest {
  // The ID of object which location will be added to GCS Service.
  bytes object_id = 1;
  // The location that will be added to GCS Service.
  bytes node_id = 2;
}

message AddObjectLocationReply {
  GcsStatus status = 1;
}

message RemoveObjectLocationRequest {
  // The ID of object which location will be removed from GCS Service.
  bytes object_id = 1;
  // The location that will be removed from GCS Service.
  bytes node_id = 2;
}

message RemoveObjectLocationReply {
  GcsStatus status = 1;
}

// Service for object info access.
service ObjectInfoGcsService {
  // Get object's locations from GCS Service.
  rpc GetObjectLocations(GetObjectLocationsRequest) returns (GetObjectLocationsReply);
  // Get all object's locations from GCS Service.
  rpc GetAllObjectLocations(GetAllObjectLocationsRequest)
      returns (GetAllObjectLocationsReply);
  // Add location of object to GCS Service.
  rpc AddObjectLocation(AddObjectLocationRequest) returns (AddObjectLocationReply);
  // Remove location of object from GCS Service.
  rpc RemoveObjectLocation(RemoveObjectLocationRequest)
      returns (RemoveObjectLocationReply);
}

message AddTaskRequest {
  TaskTableData task_data = 1;
}

message AddTaskReply {
  GcsStatus status = 1;
}

message GetTaskRequest {
  bytes task_id = 1;
}

message GetTaskReply {
  GcsStatus status = 1;
  TaskTableData task_data = 2;
}

message DeleteTasksRequest {
  repeated bytes task_id_list = 1;
}

message DeleteTasksReply {
  GcsStatus status = 1;
}

message AddTaskLeaseRequest {
  TaskLeaseData task_lease_data = 1;
}

message AddTaskLeaseReply {
  GcsStatus status = 1;
}

message GetTaskLeaseRequest {
  bytes task_id = 1;
}

message GetTaskLeaseReply {
  GcsStatus status = 1;
  TaskLeaseData task_lease_data = 2;
}

message AttemptTaskReconstructionRequest {
  TaskReconstructionData task_reconstruction = 1;
}

message AttemptTaskReconstructionReply {
  GcsStatus status = 1;
}

// Service for task info access.
service TaskInfoGcsService {
  // Add a task to GCS Service.
  rpc AddTask(AddTaskRequest) returns (AddTaskReply);
  // Get task information from GCS Service.
  rpc GetTask(GetTaskRequest) returns (GetTaskReply);
  // Delete tasks from GCS Service.
  rpc DeleteTasks(DeleteTasksRequest) returns (DeleteTasksReply);
  // Add a task lease to GCS Service.
  rpc AddTaskLease(AddTaskLeaseRequest) returns (AddTaskLeaseReply);
  // Get task lease information from GCS Service.
  rpc GetTaskLease(GetTaskLeaseRequest) returns (GetTaskLeaseReply);
  // Attempt task reconstruction to GCS Service.
  rpc AttemptTaskReconstruction(AttemptTaskReconstructionRequest)
      returns (AttemptTaskReconstructionReply);
}

message AddProfileDataRequest {
  ProfileTableData profile_data = 1;
}

message AddProfileDataReply {
  GcsStatus status = 1;
}

message GetAllProfileInfoRequest {
}

message GetAllProfileInfoReply {
  GcsStatus status = 1;
  repeated ProfileTableData profile_info_list = 2;
}

// Service for stats access.
service StatsGcsService {
  // Add profile data to GCS Service.
  rpc AddProfileData(AddProfileDataRequest) returns (AddProfileDataReply);
  // Get information of all profiles from GCS Service.
  rpc GetAllProfileInfo(GetAllProfileInfoRequest) returns (GetAllProfileInfoReply);
}

message ReportWorkerFailureRequest {
  WorkerTableData worker_failure = 1;
}

message ReportWorkerFailureReply {
  GcsStatus status = 1;
}

message GetWorkerInfoRequest {
  // ID of this worker.
  bytes worker_id = 1;
}

message GetWorkerInfoReply {
  GcsStatus status = 1;
  // Data of worker.
  WorkerTableData worker_table_data = 2;
}

message GetAllWorkerInfoRequest {
}

message GetAllWorkerInfoReply {
  GcsStatus status = 1;
  // Data of worker
  repeated WorkerTableData worker_table_data = 2;
}

message AddWorkerInfoRequest {
  WorkerTableData worker_data = 1;
}

message AddWorkerInfoReply {
  GcsStatus status = 1;
}

// Service for worker info access.
service WorkerInfoGcsService {
  // Report a worker failure to GCS Service.
  rpc ReportWorkerFailure(ReportWorkerFailureRequest) returns (ReportWorkerFailureReply);
  // Get worker information from GCS Service by worker id.
  rpc GetWorkerInfo(GetWorkerInfoRequest) returns (GetWorkerInfoReply);
  // Get information of all workers from GCS Service.
  rpc GetAllWorkerInfo(GetAllWorkerInfoRequest) returns (GetAllWorkerInfoReply);
  // Add worker information to GCS Service.
  rpc AddWorkerInfo(AddWorkerInfoRequest) returns (AddWorkerInfoReply);
}

message CreateActorRequest {
  TaskSpec task_spec = 1;
}

message CreateActorReply {
  GcsStatus status = 1;
}

message RegisterActorRequest {
  TaskSpec task_spec = 1;
}

message RegisterActorReply {
  GcsStatus status = 1;
}

message CreatePlacementGroupRequest {
  PlacementGroupSpec placement_group_spec = 1;
}

message CreatePlacementGroupReply {
  GcsStatus status = 1;
}

enum GcsServiceFailureType {
  RPC_DISCONNECT = 0;
  GCS_SERVER_RESTART = 1;
}
