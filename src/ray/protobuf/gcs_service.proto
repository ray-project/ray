syntax = "proto3";

package ray.rpc;

import "src/ray/protobuf/gcs.proto";

message AddJobRequest {
  JobTableData data = 1;
}

message AddJobReply {
  bool success = 1;
}

message MarkJobFinishedRequest {
  bytes job_id = 1;
}

message MarkJobFinishedReply {
  bool success = 1;
}

// Service for job info access.
service JobInfoGcsService {
  // Add job to gcs server.
  rpc AddJob(AddJobRequest) returns (AddJobReply);
  // Mark job as finished to gcs server.
  rpc MarkJobFinished(MarkJobFinishedRequest) returns (MarkJobFinishedReply);
}

message GetActorRequest {
  // ID of this actor.
  bytes actor_id = 1;
}

message GetActorReply {
  // Data of actor.
  ActorTableData actor_table_data = 1;
}

message RegisterActorRequest {
  // Data of actor.
  ActorTableData actor_table_data = 1;
}

message RegisterActorReply {
}

message UpdateActorRequest {
  // ID of this actor.
  bytes actor_id = 1;
  // Data of actor.
  ActorTableData actor_table_data = 2;
}

message UpdateActorReply {
}

// Service for actor info access.
service ActorInfoGcsService {
  // Get actor specification from GCS Service asynchronously.
  rpc GetActor(GetActorRequest) returns (GetActorReply);
  // Register an actor to GCS Service asynchronously.
  rpc RegisterActor(RegisterActorRequest) returns (RegisterActorReply);
  // Update dynamic states of actor in GCS Service asynchronously.
  rpc UpdateActor(UpdateActorRequest) returns (UpdateActorReply);
}
