syntax = "proto3";

package ray.rpc;

import "src/ray/protobuf/gcs.proto";

message AddJobRequest {
  JobTableData data = 1;
}

message AddJobReply {
  bool success = 1;
}

message MarkJobFinishedRequest {
  bytes job_id = 1;
}

message MarkJobFinishedReply {
  bool success = 1;
}

// Service for job info access.
service JobInfoGcsService {
  // Add job to gcs server.
  rpc AddJob(AddJobRequest) returns (AddJobReply);
  // Mark job as finished to gcs server.
  rpc MarkJobFinished(MarkJobFinishedRequest) returns (MarkJobFinishedReply);
}

message GetActorInfoRequest {
  // ID of this actor.
  bytes actor_id = 1;
}

message GetActorInfoReply {
  // Data of actor.
  ActorTableData actor_table_data = 1;
}

message RegisterActorInfoRequest {
  // Data of actor.
  ActorTableData actor_table_data = 1;
}

message RegisterActorInfoReply {
}

message UpdateActorInfoRequest {
  // ID of this actor.
  bytes actor_id = 1;
  // Data of actor.
  ActorTableData actor_table_data = 2;
}

message UpdateActorInfoReply {
}

// Service for actor info access.
service ActorInfoGcsService {
  // Get actor data from GCS Service.
  rpc GetActorInfo(GetActorInfoRequest) returns (GetActorInfoReply);
  // Register an actor to GCS Service.
  rpc RegisterActorInfo(RegisterActorInfoRequest) returns (RegisterActorInfoReply);
  // Update actor info in GCS Service.
  rpc UpdateActorInfo(UpdateActorInfoRequest) returns (UpdateActorInfoReply);
}

message RegisterNodeInfoRequest {
  // Info of node.
  GcsNodeInfo node_info = 1;
}

message RegisterNodeInfoReply {
}

message UnregisterNodeInfoRequest {
  // The ID of node.
  bytes node_id = 1;
}

message UnregisterNodeInfoReply {
}

message GetAllNodesInfoRequest {
}

message GetAllNodesInfoReply {
  repeated GcsNodeInfo node_infos = 1;
}

// Service for node info access.
service NodeInfoGcsService {
  // Register an node to GCS Service.
  rpc RegisterNodeInfo(RegisterNodeInfoRequest) returns (RegisterNodeInfoReply);
  // Unregister an node from GCS Service.
  rpc UnregisterNodeInfo(UnregisterNodeInfoRequest) returns (UnregisterNodeInfoReply);
  // Get information of all nodes from GCS Service.
  rpc GetAllNodesInfo(GetAllNodesInfoRequest) returns (GetAllNodesInfoReply);
}
