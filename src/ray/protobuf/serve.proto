// Copyright 2017 The Ray Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
option cc_enable_arenas = true;

package ray.serve;

option java_package = "io.ray.serve.generated";

option java_outer_classname = "ServeProtos";

option java_multiple_files = true;

// Configuration options for Serve's replica autoscaler.
message AutoscalingConfig {
  // Minimal number of replicas, must be a non-negative integer.
  uint32 min_replicas = 1;
  // Maximal number of replicas, must be a non-negative integer and greater or equals
  // to min_replicas.
  uint32 max_replicas = 2;
  // Target number of in flight requests per replicas. This is the primary configuration
  // knob for replica autoscaler. Lower the number, the more rapidly will the replicas
  // being scaled up. Must be a non-negative integer.
  uint32 target_num_ongoing_requests_per_replica = 3;

  // The frequency of how long does each replica sending metrics to autoscaler.
  double metrics_interval_s = 4;

  // The window (in seconds) for autoscaler to calculate rolling average of metrics on.
  double look_back_period_s = 5;

  // The multiplicative "gain" factor to limit scaling decisions.
  double smoothing_factor = 6;

  // How long to wait before scaling down replicas.
  double downscale_delay_s = 7;

  // How long to wait before scaling up replicas.
  double upscale_delay_s = 8;
}

// Configuration options for a deployment, to be set by the user.
message DeploymentConfig {
  // The number of processes to start up that will handle requests to this deployment.
  // Defaults to 1.
  int32 num_replicas = 1;

  // The maximum number of queries that will be sent to a replica of this deployment
  // without receiving a response. Defaults to 100.
  int32 max_concurrent_queries = 2;

  // Arguments to pass to the reconfigure method of the deployment. The reconfigure method
  // is called if user_config is not None.
  bytes user_config = 3;

  // Duration that deployment replicas will wait until there is no more work to be done
  // before shutting down. Defaults to 2s.
  double graceful_shutdown_wait_loop_s = 4;

  // Controller waits for this duration to forcefully kill the replica for shutdown.
  // Defaults to 20s.
  double graceful_shutdown_timeout_s = 5;

  // Is the construction of deployment is cross language?
  bool is_cross_language = 6;

  // The deployment's programming language.
  DeploymentLanguage deployment_language = 7;

  // The deployment's autoscaling configuration.
  AutoscalingConfig autoscaling_config = 8;
}

// Deployment language.
enum DeploymentLanguage {
  PYTHON = 0;
  JAVA = 1;
}

message RequestMetadata {
  string request_id = 1;

  string endpoint = 2;

  string call_method = 3;

  map<string, string> context = 4;
}

message RequestWrapper {
  bytes body = 1;
}

message UpdatedObject {
  bytes object_snapshot = 1;
  int32 snapshot_id = 2;
}

message LongPollRequest {
  map<string, int32> keys_to_snapshot_ids = 1;
}

message LongPollResult {
  map<string, UpdatedObject> updated_objects = 1;
}

message EndpointInfo {
  string endpoint_name = 1;
  string route = 2;
  map<string, string> config = 3;
}

message EndpointSet {
  map<string, EndpointInfo> endpoints = 1;
}

message ActorSet {
  repeated string names = 1;
}

message DeploymentVersion {
  string code_version = 1;
  bytes user_config = 2;
}
