// Copyright 2017 The Ray Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
option cc_enable_arenas = true;

package ray.serve;

option java_package = "io.ray.serve.generated";

option java_outer_classname = "ServeProtos";

option java_multiple_files = true;

// Configuration options for Serve's replica autoscaler.
message AutoscalingConfig {
  // Minimal number of replicas, must be a non-negative integer.
  uint32 min_replicas = 1;

  // Maximal number of replicas, must be a non-negative integer and greater or equals
  // to min_replicas.
  uint32 max_replicas = 2;

  // Target number of in flight requests per replicas. This is the primary configuration
  // knob for replica autoscaler. Lower the number, the more rapidly will the replicas
  // being scaled up. Must be a non-negative integer.
  double target_num_ongoing_requests_per_replica = 3;

  // The frequency of how long does each replica sending metrics to autoscaler.
  double metrics_interval_s = 4;

  // The window (in seconds) for autoscaler to calculate rolling average of metrics on.
  double look_back_period_s = 5;

  // The multiplicative "gain" factor to limit scaling decisions.
  double smoothing_factor = 6;

  // How long to wait before scaling down replicas.
  double downscale_delay_s = 7;

  // How long to wait before scaling up replicas.
  double upscale_delay_s = 8;

  // Initial number of replicas deployment should start with. Must be non-negative.
  optional uint32 initial_replicas = 9;

  // The multiplicative "gain" factor to limit upscale.
  optional double upscale_smoothing_factor = 10;

  // The multiplicative "gain" factor to limit downscale.
  optional double downscale_smoothing_factor = 11;
}

// Configuration options for a deployment, to be set by the user.
message DeploymentConfig {
  // The number of processes to start up that will handle requests to this deployment.
  // Defaults to 1.
  int32 num_replicas = 1;

  // The maximum number of queries that will be sent to a replica of this deployment
  // without receiving a response. Defaults to 100.
  int32 max_concurrent_queries = 2;

  // Arguments to pass to the reconfigure method of the deployment. The reconfigure method
  // is called if user_config is not None.
  bytes user_config = 3;

  // Duration that deployment replicas will wait until there is no more work to be done
  // before shutting down.
  double graceful_shutdown_wait_loop_s = 4;

  // Controller waits for this duration to forcefully kill the replica for shutdown.
  double graceful_shutdown_timeout_s = 5;

  // Frequency at which the controller health checks replicas.
  double health_check_period_s = 6;

  // Timeout after which a replica is marked unhealthy without a response.
  double health_check_timeout_s = 7;

  // Is the construction of deployment is cross language?
  bool is_cross_language = 8;

  // The deployment's programming language.
  DeploymentLanguage deployment_language = 9;

  // The deployment's autoscaling configuration.
  AutoscalingConfig autoscaling_config = 10;

  string version = 11;

  repeated string user_configured_option_names = 12;
}

// Deployment language.
enum DeploymentLanguage {
  PYTHON = 0;
  JAVA = 1;
}

message RequestMetadata {
  string request_id = 1;

  string endpoint = 2;

  string call_method = 3;

  map<string, string> context = 4;
}

message RequestWrapper {
  bytes body = 1;
}

message UpdatedObject {
  bytes object_snapshot = 1;
  int32 snapshot_id = 2;
}

message LongPollRequest {
  map<string, int32> keys_to_snapshot_ids = 1;
}

message LongPollResult {
  map<string, UpdatedObject> updated_objects = 1;
}

message EndpointInfo {
  string endpoint_name = 1;
  string route = 2;
  map<string, string> config = 3;
}

message EndpointSet {
  map<string, EndpointInfo> endpoints = 1;
}

// Now Actor handle can be transfered across language through ray call, but the list of
// Actor handles can't. So we use this message wrapped a Actor name list to pass actor
// list across language. When Actor handle list supports across language, this message can
// be replaced.
message ActorNameList {
  repeated string names = 1;
}

message DeploymentVersion {
  string code_version = 1;
  DeploymentConfig deployment_config = 2;
  string ray_actor_options = 3;
  string placement_group_bundles = 4;
  string placement_group_strategy = 5;
  int32 max_replicas_per_node = 6;
}

message ReplicaConfig {
  string deployment_def_name = 1;
  bytes deployment_def = 2;
  bytes init_args = 3;
  bytes init_kwargs = 4;
  string ray_actor_options = 5;
  string placement_group_bundles = 6;
  string placement_group_strategy = 7;
  int32 max_replicas_per_node = 8;
}

message DeploymentInfo {
  string name = 1;
  DeploymentConfig deployment_config = 2;
  ReplicaConfig replica_config = 3;
  int64 start_time_ms = 4;
  string actor_name = 5;
  string version = 6;
  int64 end_time_ms = 7;
}

// Wrap DeploymentInfo and route. The "" route value need to be convert to None/null.
message DeploymentRoute {
  DeploymentInfo deployment_info = 1;
  string route = 2;
}

// Wrap a list for DeploymentRoute.
message DeploymentRouteList {
  repeated DeploymentRoute deployment_routes = 1;
}

enum DeploymentStatus {
  // Keep frontend code of ServeDeploymentStatus in dashboard/client/src/type/serve.ts
  // in sync with this enum
  DEPLOYMENT_STATUS_UPDATING = 0;
  DEPLOYMENT_STATUS_HEALTHY = 1;
  DEPLOYMENT_STATUS_UNHEALTHY = 2;
}

message DeploymentStatusInfo {
  string name = 1;
  DeploymentStatus status = 2;
  string message = 3;
}

// Wrap a list for DeploymentStatusInfo.
message DeploymentStatusInfoList {
  repeated DeploymentStatusInfo deployment_status_infos = 1;
}

enum ApplicationStatus {
  // Keep frontend code of ServeApplicationStatus in dashboard/client/src/type/serve.ts
  // in sync with this enum
  APPLICATION_STATUS_DEPLOYING = 0;
  APPLICATION_STATUS_RUNNING = 1;
  APPLICATION_STATUS_DEPLOY_FAILED = 2;
  APPLICATION_STATUS_DELETING = 3;
  APPLICATION_STATUS_NOT_STARTED = 5;
  APPLICATION_STATUS_UNHEALTHY = 6;
}

message ApplicationStatusInfo {
  ApplicationStatus status = 1;
  string message = 2;
  double deployment_timestamp = 3;
}

message StatusOverview {
  ApplicationStatusInfo app_status = 1;
  DeploymentStatusInfoList deployment_statuses = 2;
  string name = 3;
}

// Used for gRPC proxy health check
message ListApplicationsRequest {}

message ListApplicationsResponse {
  repeated string application_names = 1;
}

message HealthzRequest {}

message HealthzResponse {
  string message = 1;
}

service RayServeAPIService {
  rpc ListApplications(ListApplicationsRequest) returns (ListApplicationsResponse);
  rpc Healthz(HealthzRequest) returns (HealthzResponse);
}

// Used for gRPC related tests
message UserDefinedMessage {
  string name = 1;
  string foo = 2;
  int64 num = 3;
}

message UserDefinedResponse {
  string greeting = 1;
  int64 num_x2 = 2;
}

message UserDefinedMessage2 {}

message UserDefinedResponse2 {
  string greeting = 1;
}

message FruitAmounts {
  int64 orange = 1;
  int64 apple = 2;
  int64 banana = 3;
}

message FruitCosts {
  float costs = 1;
}

service UserDefinedService {
  rpc __call__(UserDefinedMessage) returns (UserDefinedResponse);
  rpc Method1(UserDefinedMessage) returns (UserDefinedResponse);
  rpc Method2(UserDefinedMessage2) returns (UserDefinedResponse2);
  rpc Streaming(UserDefinedMessage) returns (stream UserDefinedResponse);
}

service FruitService {
  rpc FruitStand(FruitAmounts) returns (FruitCosts);
}

// Used for gRPC benchmark
message RawData {
  repeated float nums = 1;
}

message ModelOutput {
  float output = 1;
}

service RayServeBenchmarkService {
  rpc grpc_call(RawData) returns (ModelOutput);
}
