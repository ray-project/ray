// Copyright 2017 The Ray Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
option cc_enable_arenas = true;

package ray.rpc;

option java_package = "io.ray.runtime.generated";

/// The pip type runtime env.
message PipRuntimeEnv {
  /// The pip packages config.
  message Config {
    /// A list of pip packages, such as ["redis >= 3.5.0", "numpy"].
    repeated string packages = 1;
  }
  oneof pip_runtime_env {
    /// The pip packages config.
    Config config = 1;
    /// The name of a local virtual env.
    string virtual_env_name = 2;
  }
}

/// The conda type runtime env.
message CondaRuntimeEnv {
  oneof conda_runtime_env {
    /// The conda YAML config.
    string config = 1;
    /// The name of a local conda env.
    string conda_env_name = 2;
  }
}

/// The container type runtime env.
message ContainerRuntimeEnv {
  /// The container image.
  string image = 1;
  /// The default worker path in the container.
  string worker_path = 2;
  /// A list of docker run options. Refer to
  /// https://docs.docker.com/engine/reference/run/.
  repeated string run_options = 3;
}

/// A set of plugin runtime envs.
message PluginRuntimeEnv {
  message Plugin {
    /// The python class which implements the runtime env plugin.
    string class_path = 1;
    /// The serialized config.
    string config = 2;
  }
  repeated Plugin plugins = 1;
}

message PythonRuntimeEnv {
  /// List of URIs (either in the GCS or external
  /// storage), each of which is a zip file that will be unpacked and
  /// inserted into the PYTHONPATH of the workers.
  repeated string py_modules = 1;
  /// One of typed runtime env of python
  oneof python_runtime_env {
    /// pip runtime env
    PipRuntimeEnv pip_runtime_env = 2;
    /// conda runtime env
    CondaRuntimeEnv conda_runtime_env = 3;
    /// container runtime env
    ContainerRuntimeEnv container_runtime_env = 4;
    /// plugin runtime env
    PluginRuntimeEnv plugin_runtime_env = 5;
  }
}

/// The maven type runtime env.
message MavenRuntimeEnv {
  /// TODO(SongGuyang)
}

message JavaRuntimeEnv {
  /// List of URIs, each of which is a zip file that will be unpacked
  /// and inserted into the CLASSPATH of the java workers.
  repeated string jars = 1;
  /// One of typed runtime env of java
  oneof java_runtime_env {
    /// maven runtime env
    MavenRuntimeEnv maven_runtime_env = 2;
    /// container runtime env
    ContainerRuntimeEnv container_runtime_env = 3;
    /// plugin runtime env
    PluginRuntimeEnv plugin_runtime_env = 4;
  }
}

message CppRuntimeEnv {
  /// List of URIs, each of which is a zip file that will be unpacked
  /// and inserted into the LD_LIBRARY_PATH of the C++ workers.
  repeated string dynamic_library = 1;
  /// One of typed runtime env of C++
  oneof cpp_runtime_env {
    /// container runtime env
    ContainerRuntimeEnv container_runtime_env = 2;
    /// plugin runtime env
    PluginRuntimeEnv plugin_runtime_env = 3;
  }
}

message RuntimeEnvUris {
  /// working dir uri
  string working_dir_uri = 1;
  /// python modules uris
  repeated string py_modules_uris = 2;
  /// conda uri
  string conda_uri = 3;
  /// pip uri
  string pip_uri = 4;
  /// plugin uris
  repeated string plugin_uris = 5;
}

/// The runtime environment describes all the runtime packages needed to
/// run some task or actor.
message RuntimeEnv {
  /// Specifies the working directory of the worker.
  string working_dir = 1;
  /// Environment variables to set.
  map<string, string> env_vars = 2;
  /// The extension fields.
  map<string, string> extensions = 3;
  /// python runtime env
  optional PythonRuntimeEnv python_runtime_env = 4;
  /// java runtime env
  optional JavaRuntimeEnv java_runtime_env = 5;
  /// cpp runtime env
  optional CppRuntimeEnv cpp_runtime_env = 6;
  /// Runtime env uris of different types.
  RuntimeEnvUris uris = 7;
}

/// The runtime env information which is transfered between ray core processes.
message RuntimeEnvInfo {
  /// The serialized runtime env passed from the user.
  string serialized_runtime_env = 1;
  /// URIs used in this runtime env. These will be used for reference counting.
  repeated string uris = 2;
  /// Indicates whether to install runtime env eagerly before the workers are leased.
  bool runtime_env_eager_install = 3;
}
