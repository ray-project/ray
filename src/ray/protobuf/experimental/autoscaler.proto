syntax = "proto3";
option cc_enable_arenas = true;

package ray.rpc;

// ============= Cluster Resources ====================
//
// Following fields represents the Cluster Resources autoscaler interested
// in.

// Represents an anti-affinity constraint. A bundle with this constraint
// can't be allocated to a node that has a label with the same name and
// value. This is used to implement placement group anti-affinity.
//
// For placement group, the label_name is "_pg" (reserved),
// and the label_value is the placement group id.
message AntiAffinityConstraint {
  string label_name = 1;
  string label_value = 2;
  // If true, the label will be created on the node 
  // where the request with this constraint is scheduled.
  bool create_label_on_schedule = 3;
}

message PlacementConstraint {
  oneof constraint {
    AntiAffinityConstraint anti_affinity = 1;
  }
}

message ResourceRequest {
  // resource requirements for the request.
  map<string, double> resources_bundle = 1;
  // placement constraint for the request.
  PlacementConstraint placement_constraint = 2;
}

message ResourceRequestByCount {
  ResourceRequest request = 1;
  int64 count = 2;
}

// All bundles in the same resource request require gang
// allocation semantics: they should be allocated all or nothing.
message GangResourceRequest {
  // a map from bundles to the number of bundles requested.
  repeated ResourceRequest requests = 1;
}

// Cluster resource constraint represents minimial cluster size requirement,
// this is issued through ray.autoscaler.sdk.request_resources.
message ClusterResourceConstraint {
  // If not empty, the cluster should have the capacity (total resource) to
  // fit the min_resources.
  map<string, double> min_resources = 1;
  // If not emtpy, the cluster should have the capacity (total resource) to fit
  // the min_bundles.
  repeated ResourceRequest min_bundles = 2;
  // Id of the requester who issued this constraint.
  bytes requester_id = 3;
}

message NodeState {
  enum NodeStatus {
    // Node is alive.
    ALIVE = 0;
    // Node is dead.
    DEAD = 1;
    // Node is being drained.
    DRAIN_PENDING = 2;
    // Node is being drained.
    DRAIN_FAILED = 3;
    // Node is being drained.
    DRAINING = 4;
    // Node is already drained, and ready to be removed.
    DRAINED = 5;
  }
  // The node id internal to Ray.
  bytes node_id = 11;

  // The instance id that the node is running on.
  // This is passed in when the node is registered.
  bytes instance_id = 12;

  // The available resources on the node.
  map<string, double> available_resources = 13;

  // The corresponding total resources on the node.
  map<string, double> total_resources = 14;

  // Dynamic labels associated with the node.
  map<string, string> dynamic_labels = 15;

  // A monotonic increasing version of the node resource state.
  int64 node_state_version = 16;

  // The status of the node.
  NodeStatus status = 17;
}

// ============= Autoscaling State Service API =======================
//
// Autoscaler periodically calls to
// two snapshot APIs, GetClusterResourceState
// and ReportAutoscalingState. 
// The GetClusterResourceState will return a snapshot
// of Ray state that Autoscaler interested, along with
// the cluster_resource_state_version (version).
//
// Separately, autoscaler will constantly making decisions
// based on the latest Ray state, and also change its
// state based on the information from node provider.
// Autoscaler will periodically report its state to GCS
// through ReportAutoscalingState API.

message GetClusterResourceStateRequest {
  // The last seen cluster resource state version. The default value is reserved for if a
  // previous scheduling state has never been seen.
  int64 last_seen_cluster_resource_state_version = 1;
}


message GetClusterResourceStateReply {
  // an monotonically increasing version of the cluster resources.
  int64 cluster_resource_state_version = 1;
  // last seen autoscaler state.
  int64 last_seen_autoscaler_state_version = 2;
  // Current cluster resources.
  repeated NodeState node_states = 3;
  // Resource requests pending scheduling.
  repeated ResourceRequestByCount pending_resource_requests = 4;
  // Gang resource requests pending scheduling.
  repeated GangResourceRequest pending_gang_resource_requests = 5;
  // Cluster resource constraints.
  repeated ClusterResourceConstraint cluster_resource_constraints = 6;
}


message Instance {
  enum InstanceStatus {
    // Instances that are queued to be launched.
    QUEUED = 0;
    // Instances that are being launched.
    REQUESTED = 1;
    // The instance is known to have finished booststrapping and
    // should join the cluster soon/or have already
    // joined the cluster.
    // The node has being allocated but envirnoment is not ready yet.
    BOOSTRAPPING = 2;
    // The instance is known to have joined the cluster.
    ALIVE = 3;
    // The instance is known to be dead.
    DEAD = 4;
    // The node is going to be preempted by the node manager.
    // The node will be terminated even if its not drainable.
    TO_BE_PREEMPTED = 5;
    // The node is going to be drained by the node manager.
    // The node may not be terminated if drain failed.
    TO_BE_DRAINED = 6;
    // The node is being terminated by the node provider.
    TERMINATING = 7;
  }
  // an unique id for the instance that's generated by the
  // instance manager.
  bytes instance_id = 11;
  // the status of the instance.
  InstanceStatus status = 12; 
  // the node id of the instance.
  string node_type = 13;
  // The corresponding total resources on the node.
  map<string, double> total_resources = 14;
  // timestamp of the last state changed.
  int64 timestamp_since_last_state_change = 15;
}

message ReportAutoscalingStateRequest {
  int64 last_seen_cluster_resource_state_version = 1;
  // A monotonically increasing version identifies
  // the state of autoscaler.
  // Note: for the same cluster resource state, the
  // autoscaler state might be different, since
  // the autoscaler's state could also be updated by
  // node provider.
  int64 autoscaler_state_version = 2;
  repeated Instance instances = 3;
  // infeasible resource requests.
  repeated ResourceRequest infeasible_resource_requests = 4;
  repeated ClusterResourceConstraint infeasible_gange_resource_requests = 5;
  repeated ClusterResourceConstraint infeasible_cluster_resource_constraints = 6;
}

message ReportAutoscalingStateReply {}

service AutoscalerStateService {
  rpc GetClusterResourceState(GetClusterResourceStateRequest) returns (GetClusterResourceStateReply);
  rpc ReportAutoscalingState(ReportAutoscalingStateRequest) returns (ReportAutoscalingStateReply);
}