// Copyright 2017 The Ray Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
option cc_enable_arenas = true;

package ray.rpc.autoscaler;

import "src/ray/protobuf/autoscaler.proto";

enum RayNodeKind {
  UNKNOWN = 0;
  HEAD = 1;
  WORKER = 2;
}

// A node type that's available for the cluster.
message InstanceType {
  // the name of the instance type. e.g. "m4.large"
  string type_name = 1;
  RayNodeKind node_kind = 2;
  // avaialble resources on the node. such as {"CPU": 4, "GPU": 1}
  map<string, double> resources = 3;
}

message GetAvailableInstanceTypesRequest {}

message GetAvailableInstanceTypesResponse {
  repeated InstanceType instance_types = 1;
  // number of instances that are available for starting.
  // this can change if the cloud provider has a limit on
  // number of instances that can be started.
  int64 available_instances = 2;
}

// Represents the state of a launched instance.
// An instance is considered launched as long as
// it has a unique instance_id associated with it.
//
// Note a launched instance may be DEAD. In this case,
// the state will be garbage collected after some timeout
// period (by default 30 minutes).
message Instance {
  enum InstanceStatus {
    // The unspecified state
    UNKNOWN = 0;
    // The instance is queued to be allocated.
    QEUEUD = 1;
    // The instance is requested to be allocated - follows from the QUEUED state.
    REQUESTED = 2;
    // The instance is allocated - follows from the REQUESTED state.
    ALLOCATED = 3;
    // The instance allocation failed - follows from the REQUESTED state.
    ALLOCATION_FAILED = 4;
    // The instance is stopping - follows from the ALLOCATED state.
    STOPPING = 5;
    // The instance is stopped - follows from the STOPPING state.
    STOPPED = 6;
    // The instnace record is deleted from the storage - follows from the STOPPED state.
    GARBAGE_COLLECTED = 7;
  }

  enum RayStatus {
    // The unspecified state
    RAY_STATUS_UNKOWN = 0;
    // The instance is installing ray.
    RAY_INSTALLING = 1;
    // Ray installation failed - follows from the RAY_INSTALLING state.
    RAY_INSTALL_FAILED = 2;
    // Ray started and connected to gcs - follows from the RAY_INSTALLING state.
    RAY_RUNNING = 3;
    // Ray stopped - follows from the RAY_RUNNING state.
    RAY_STOPPED = 4;
  }

  // an unique id for the instance that's generated by the
  // instance manager. This may be optional if
  // the instance hasn't be started yet.
  string instance_id = 11;
  // the status of the instance.
  InstanceStatus status = 12;
  // the node type of the instance.
  string instance_type = 13;
  // The corresponding total resources on the node.
  map<string, double> total_resources = 14;
  // timestamp of the last time the instance get modified.
  int64 timestamp_since_last_modified = 15;
  // the external id of the instance that's generated by
  // the cloud provider like AWS, GCP, etc.
  // Note this id can be reused by different instances.
  string cloud_instance_id = 16;
  // internal ip address of the instance.
  string internal_ip = 17;
  // external ip address of the instance.
  string external_ip = 18;
  // the monotonically increasing version number of the instance.
  int64 version = 19;
  // the status of the ray process on the instance.
  RayStatus ray_status = 20;
}

message UpdateInstanceManagerStateRequest {
  int64 expected_version = 1;
  repeated InstanceType new_nodes_to_start = 2;
  repeated string instance_ids_to_terminate = 3;
}

message UpdateInstanceManagerStateReply {
  bool success = 1;
  string error_message = 2;
  int64 version = 3;
}

message InstanceManagerState {
  // a monotonically increasing version number.
  // the version number is incremented whenever
  // the state is updated (either by successful adjusting request,
  // or instance state change).
  int64 version = 1;
  repeated Instance instances = 2;
}

message GetInstanceManagerStateRequest {}

message GetInstanceManagerStateReply {
  InstanceManagerState state = 1;
}

service InstanceManagerService {
  rpc GetInstanceManagerState(GetInstanceManagerStateRequest)
      returns (GetInstanceManagerStateReply);
  rpc UpdateInstanceManagerState(UpdateInstanceManagerStateRequest)
      returns (UpdateInstanceManagerStateReply);
  rpc GetAvailableInstanceTypes(GetAvailableInstanceTypesRequest)
      returns (GetAvailableInstanceTypesResponse);
}

// ============= Resource Scheduling Service API =======================
//
// ResourceSchedulerService is a service that schedules resource bundles
// to nodes. It's used by the autoscaler to schedule resource bundles
// to determine the desired cluster size to satisfy the current resource
// demands.
//
// NOTE(rickyx): This service could actually be implemented by GCS
// (or a separate service) in the future.

// Node type config for each node type. This is derived from the ray schema's
// 'available_node_types'. It captures the minimal node provider agnostic
// information about each node type that's needed for scheduling.
message NodeTypeConfig {
  // The name of the node type.
  string name = 1;
  // The minimal number of workers to be launched for this node type.
  int32 min_workers = 2;
  // The maximal number of workers can be launched for this node type.
  int32 max_workers = 3;
  // The resources on the node.
  map<string, double> resources = 4;
  // The labels on the node.
  map<string, string> labels = 5;
}

// Resource scheduling config. This is derived from the autoscaling config.
message ResourceScheduleConfig {
  // The node type configs.
  map<string, NodeTypeConfig> node_type_configs = 1;

  // The max number of nodes that could be launched for the entire cluster.
  optional int32 max_num_nodes = 2;
}

message ScheduleResourceBundlesRequest {
  // The resource bundles to be scheduled.
  repeated ResourceRequestByCount resource_requests = 1;
  // The gang resource bundles to be scheduled.
  repeated GangResourceRequest gang_resource_requests = 2;
  // The cluster resource state version.
  repeated ClusterResourceConstraint cluster_resource_constraints = 3;
  // The current nodes reported by ray cluster.
  repeated NodeState node_states = 4;
  // The current pending instances.
  repeated Instance pending_instances = 5;
  // The scheduling config.
  ResourceScheduleConfig schedule_config = 6;
}

message ScheduleResourceBundlesReply {
  // The infeasible resource bundles.
  repeated ResourceRequestByCount infeasible_resource_requests = 1;
  // The infeasible gang resource bundles.
  repeated GangResourceRequest infeasible_gang_resource_requests = 2;
  // The infeasible cluster resource constraints.
  repeated ClusterResourceConstraint infeasible_cluster_resource_constraints = 3;
  // Any additional nodes that need to be launched, given the current
  // resource demands and instances.
  // Key is the node type name, value is the number of nodes to launch.
  map<string, int32> to_launch_nodes = 4;
}

service ResourceSchedulerService {
  rpc ScheduleResourceBundles(ScheduleResourceBundlesRequest)
      returns (ScheduleResourceBundlesReply);
}