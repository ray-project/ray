// Copyright 2024 The Ray Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
option cc_enable_arenas = true;

package ray.rpc;

// ExportNodeData defines the event_data stored by the export API
// for EXPORT_NODE type events. This schema is public and any changes must
// be backward compatible.
message ExportNodeData {
  // State of a node.
  enum GcsNodeState {
    // Node is alive.
    ALIVE = 0;
    // Node is dead.
    DEAD = 1;
  }

  message NodeDeathInfo {
    enum Reason {
      UNSPECIFIED = 0;
      EXPECTED_TERMINATION = 1;
      UNEXPECTED_TERMINATION = 2;
      AUTOSCALER_DRAIN_PREEMPTED = 3;
      AUTOSCALER_DRAIN_IDLE = 4;
    }
    Reason reason = 1;
    // A message describing the reason for the node death.
    string reason_message = 2;
  }

  // The ID of node.
  bytes node_id = 1;
  // The IP address of the node manager.
  string node_manager_address = 2;

  // Current state of this node.
  GcsNodeState state = 3;

  // The total resources of this node.
  map<string, double> resources_total = 4;

  // The user-provided identifier or name for this node.
  string node_name = 5;

  // The unix ms timestamp the node was started at.
  uint64 start_time_ms = 6;
  // The unix ms timestamp the node was ended at.
  uint64 end_time_ms = 7;
  // If this is a head node.
  bool is_head_node = 8;
  // The key-value labels of this node.
  map<string, string> labels = 9;

  // The death info of this node.
  NodeDeathInfo death_info = 10;
}
