
// ============= Cluster Resources ====================
//
// Following fields represents the Cluster Resources autoscaler interested
// in.

// Represents an anti-affinity constraint. A bundle with this constraint
// can't be allocated to a node that has a label with the same name and
// value.
message AntiAffinityConstraint {
  string label_name = 1;
  string label_value = 2;
}

message PlacementConstraint {
  oneof constraint {
    AntiAffinityConstraint anti_affinity = 1;
  }
}

message ResourceBundle {
  map<string, double> resources = 1;
  PlacementConstraint placement_constraint = 2;
  // If the resource bundle is allocated, the node will be labeled
  // with the following labels.
  // map<string, string> new_labels = 3;
}

// All bundles in the same resource request require gang
// allocation semantics: they should be allocated together.
message GangSchedulingRequest {
  // a map from bundles to the number of bundles requested.
  map<ResourceBundle, int32_t> bundles = 1;
}

// Cluster constraint represents minimial cluster size requirement,
// issued through ray.autoscaler.sdk.request_resources.
message OnDemandResourceRequest {
  bytes request_id = 1;
  GangSchedulingRequest resource_request = 2;
}

message NodeResourceState {
  bytes node_id = 1;

  // The address of the node.
  string address = 2;

  // The available resources on the node.
  map<string, double> available_resources = 3;

  // The corresponding total resources on the node.
  map<string, double> total_resources = 4;

  // Dynamic labels associated with the node.
  map<string, string> dynamic_labels = 5;

  // TODO: we can support static labels proposed in
  // https://github.com/ray-project/enhancements/pull/22 as
  // following.
  // map<string, string> static_labels = 6;
}

// =========== Primitives autoscaler insights ====================

// Following states present the Autoscaler state GCS interested in,
// for observability and scheduling purpose.


// ============= Snapshot based Autoscaling Service API =======================
//
// Autoscaler periodically calls to
// two snapshot APIs, GetClusterResourceState
// and ReportAutoscalingState. 
// The GetClusterResourceState will return a snapshot
// of Ray state that Autoscaler interested, along with
// the snapshot_id (version).
//
// Separately, autoscaler will constantly making decisions
// based on the latest Ray state, and also change its
// state based on the information from node provider.
// Autoscaler will periodically report its state to GCS
// through ReportAutoscalingState API.

message ReportAutoscalingStateReply {}

message ReportAutoscalingStateRequest {
  int64 last_seen_cluster_resource_state_version = 1;
  // A monotonically increasing version identifies
  // the state of autoscaler.
  // Note: for the same cluster resource state, the
  // autoscaler state might be different, since
  // the autoscaler's state could also be updated by
  // node provider.
  int64 autoscaler_state_version = 2;
  repeated LaunchedInstance launched_instances = 3;
  map<LauchingInstance, int32> launching_instances = 4;
  repeated ResourceRequest infeasible_requests = 5;
}

message GetClusterResourceStateReply {
  // an monotonically increasing version of the cluster resources.
  int64 cluster_resource_state_version = 1;
  repeated NodeResourceState node_resource_states = 2;
  map<GangSchedulingRequest, int64> resource_requests = 3;
  repeated OnDemandResourceRequest on_demand_resource_requests = 4;
}

message GetClusterResourceStateRequest {
  // The last seen cluster resource state version. The default value is reserved for if a
  // previous scheduling state has never been seen.
  int64 last_seen_cluster_resource_state_version = 1;
}

service AutoscalerStateService {
  rpc GetClusterResourceState(GetClusterResourceStateRequest) returns GetClusterResourceStateReply;
  rpc ReportAutoscalingState(ReportAutoscalingStateRequest) returns ReportAutoscalingStateReply;
}