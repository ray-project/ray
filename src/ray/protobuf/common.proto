syntax = "proto3";

package ray.rpc;

option java_package = "org.ray.runtime.generated";

// Language of a task or worker.
enum Language {
  PYTHON = 0;
  JAVA = 1;
  CPP = 2;
}

// Type of a worker.
enum WorkerType {
  WORKER = 0;
  DRIVER = 1;
}

// Type of a task.
enum TaskType {
  // Normal task.
  NORMAL_TASK = 0;
  // Actor creation task.
  ACTOR_CREATION_TASK = 1;
  // Actor task.
  ACTOR_TASK = 2;
  // Driver task.
  DRIVER_TASK = 3;
}

// Address of a worker or node manager.
message Address {
  bytes raylet_id = 1;
  string ip_address = 2;
  int32 port = 3;
  // Optional unique id for the worker.
  bytes worker_id = 4;
}

/// Function descriptor for Java.
message JavaFunctionDescriptor {
  string class_name = 1;
  string function_name = 2;
  string signature = 3;
}

/// Function descriptor for Python.
message PythonFunctionDescriptor {
  string module_name = 1;
  string class_name = 2;
  string function_name = 3;
  string function_hash = 4;
}

// A union wrapper for various function descriptor types.
message FunctionDescriptor {
  oneof function_descriptor {
    JavaFunctionDescriptor java_function_descriptor = 1;
    PythonFunctionDescriptor python_function_descriptor = 2;
  }
}

/// The task specification encapsulates all immutable information about the
/// task. These fields are determined at submission time, converse to the
/// `TaskExecutionSpec` may change at execution time.
message TaskSpec {
  // Type of this task.
  TaskType type = 1;
  // Language of this task.
  Language language = 2;
  // Function descriptor of this task uniquely describe the function to execute.
  FunctionDescriptor function_descriptor = 3;
  // ID of the job that this task belongs to.
  bytes job_id = 4;
  // Task ID of the task.
  bytes task_id = 5;
  // Task ID of the parent task.
  bytes parent_task_id = 6;
  // A count of the number of tasks submitted by the parent task before this one.
  uint64 parent_counter = 7;
  // Task ID of the caller. This is the same as parent_task_id for non-actors.
  // This is the actor ID (embedded in a nil task ID) for actors.
  bytes caller_id = 8;
  /// Address of the caller.
  Address caller_address = 9;
  // Task arguments.
  repeated TaskArg args = 10;
  // Number of return objects.
  uint64 num_returns = 11;
  // Quantities of the different resources required by this task.
  map<string, double> required_resources = 12;
  // The resources required for placing this task on a node. If this is empty,
  // then the placement resources are equal to the required_resources.
  map<string, double> required_placement_resources = 13;
  // Task specification for an actor creation task.
  // This field is only valid when `type == ACTOR_CREATION_TASK`.
  ActorCreationTaskSpec actor_creation_task_spec = 14;
  // Task specification for an actor task.
  // This field is only valid when `type == ACTOR_TASK`.
  ActorTaskSpec actor_task_spec = 15;
  // Whether this task is a direct call task.
  bool is_direct_call = 16;
  // Number of times this task may be retried on worker failure.
  int32 max_retries = 17;
}

// Argument in the task.
message TaskArg {
  // Object IDs for pass-by-reference arguments. Normally there is only one
  // object ID in this list which represents the object that is being passed.
  // However to support reducers in a MapReduce workload, we also support
  // passing multiple object IDs for each argument.
  repeated bytes object_ids = 1;
  // Data for pass-by-value arguments.
  bytes data = 2;
  // Metadata for pass-by-value arguments.
  bytes metadata = 3;
  // ObjectIDs that were nested in the inlined arguments of the data field.
  repeated bytes nested_inlined_ids = 4;
}

// Task spec of an actor creation task.
message ActorCreationTaskSpec {
  // ID of the actor that will be created by this task.
  bytes actor_id = 2;
  // The max number of times this actor should be recontructed.
  // If this number of 0 or negative, the actor won't be reconstructed on failure.
  uint64 max_actor_reconstructions = 3;
  // The dynamic options used in the worker command when starting a worker process for
  // an actor creation task. If the list isn't empty, the options will be used to replace
  // the placeholder strings (`RAY_WORKER_DYNAMIC_OPTION_PLACEHOLDER_0`,
  // `RAY_WORKER_DYNAMIC_OPTION_PLACEHOLDER_1`, etc) in the worker command.
  repeated string dynamic_worker_options = 4;
  // Whether direct actor call is used.
  bool is_direct_call = 5;
  // The max number of concurrent calls for direct call actors.
  int32 max_concurrency = 6;
  // Whether the actor is persistent
  bool is_detached = 7;
  // Whether the actor use async actor calls
  bool is_asyncio = 8;
}

// Task spec of an actor task.
message ActorTaskSpec {
  // Actor ID of the actor that this task is executed on.
  bytes actor_id = 2;
  // The dummy object ID of the actor creation task.
  bytes actor_creation_dummy_object_id = 4;
  // Number of tasks that have been submitted to this actor so far.
  uint64 actor_counter = 5;
  // The dummy object ID of the previous actor task.
  bytes previous_actor_task_dummy_object_id = 7;
}

// The task execution specification encapsulates all mutable information about
// the task. These fields may change at execution time, converse to the
// `TaskSpec` is determined at submission time.
message TaskExecutionSpec {
  // The last time this task was received for scheduling.
  double last_timestamp = 2;
  // The number of times this task was spilled back by raylets.
  uint64 num_forwards = 3;
}

// Represents a task, including task spec, and task execution spec.
message Task {
  TaskSpec task_spec = 1;
  TaskExecutionSpec task_execution_spec = 2;
}

// Represents a resource id.
message ResourceId {
  // The index of the resource (i.e., CPU #3).
  int64 index = 1;
  // The quantity of the resource assigned (i.e., 0.5 CPU).
  double quantity = 2;
}

// Represents a set of resource ids.
message ResourceMapEntry {
  // The name of the resource (i.e., "CPU").
  string name = 1;
  // The set of resource ids assigned.
  repeated ResourceId resource_ids = 2;
}

message ViewData {
  message Measure {
    // A short string that describes the tags for this mesaure, e.g.,
    // "Tag1:Value1,Tag2:Value2,Tag3:Value3"
    string tags = 1;
    // Int64 type value (if present).
    int64 int_value = 2;
    // Double type value (if present).
    double double_value = 3;
    // Distribution type value (if present).
    double distribution_min = 4;
    double distribution_mean = 5;
    double distribution_max = 6;
    double distribution_count = 7;
    repeated double distribution_bucket_boundaries = 8;
    repeated double distribution_bucket_counts = 9;
  }

  // The name of this Census view.
  string view_name = 1;
  // The list of measures recorded under this view.
  repeated Measure measures = 2;
}

// Debug info returned from the core worker.
message CoreWorkerStats {
  // Debug string of the currently executing task.
  string current_task_desc = 1;
  // Number of pending normal and actor tasks.
  int32 num_pending_tasks = 2;
  // Number of object ids in local scope.
  int32 num_object_ids_in_scope = 3;
  // String representation of the function descriptor of the currently executing task.
  string current_task_func_desc = 4;
  // IP address of the core worker.
  string ip_address = 6;
  // Port of the core worker.
  int64 port = 7;
  // Actor ID.
  bytes actor_id = 8;
  // A map from the resource name (e.g. "CPU") to the amount of resource used.
  map<string, double> used_resources = 9;
  // A string displayed on Dashboard.
  map<string, string> webui_display = 10;
  // Number of objects stored in local memory.
  int32 num_local_objects = 11;
  // Used local object store memory.
  int64 used_object_store_memory = 12;
  // Length of the task queue.
  int32 task_queue_length = 13;
  // Number of executed tasks.
  int32 num_executed_tasks = 14;
  // Actor constructor.
  string actor_title = 15;
}
