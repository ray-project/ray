syntax = "proto3";

package ray.rpc;

import "src/ray/protobuf/common.proto";

message ReturnObject {
  // Object ID.
  bytes object_id = 1;
  // Data of the object.
  bytes data = 2;
  // Metaata of the object.
  bytes metadata = 3;
}

message PushTaskRequest {
  // The task to be pushed.
  TaskSpec task_spec = 1;
  // The sequence number of the task for this client. This must increase
  // sequentially starting from zero for each actor handle. The server
  // will guarantee tasks execute in this sequence, waiting for any
  // out-of-order request messages to arrive as necessary.
  int64 sequence_number = 2;
  // The max sequence number the client has processed responses for. This
  // is a performance optimization that allows the client to tell the server
  // to cancel any PushTaskRequests with seqno <= this value, rather than
  // waiting for the server to time out waiting for missing messages.
  int64 client_processed_up_to = 3;
}

message PushTaskReply {
  // The returned objects.
  repeated ReturnObject return_objects = 1;
}

// Service for direct actor.
service DirectActorService {
  // Push a task to a worker.
  rpc PushTask(PushTaskRequest) returns (PushTaskReply);
}
