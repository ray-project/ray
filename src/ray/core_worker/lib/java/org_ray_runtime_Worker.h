/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class org_ray_runtime_Worker */

#ifndef _Included_org_ray_runtime_Worker
#define _Included_org_ray_runtime_Worker
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     org_ray_runtime_Worker
 * Method:    createCoreWorker
 * Signature: (ILjava/lang/String;Ljava/lang/String;[B)J
 */
JNIEXPORT jlong JNICALL Java_org_ray_runtime_Worker_createCoreWorker(JNIEnv *, jclass,
                                                                     jint, jstring,
                                                                     jstring, jbyteArray);

/*
 * Class:     org_ray_runtime_Worker
 * Method:    runCoreWorker
 * Signature: (JLorg/ray/runtime/Worker;)V
 */
JNIEXPORT void JNICALL Java_org_ray_runtime_Worker_runCoreWorker(JNIEnv *, jclass, jlong,
                                                                 jobject);

/*
 * Class:     org_ray_runtime_Worker
 * Method:    getCurrentDriverId
 * Signature: (J)[B
 */
JNIEXPORT jbyteArray JNICALL Java_org_ray_runtime_Worker_getCurrentDriverId(JNIEnv *,
                                                                            jclass,
                                                                            jlong);

/*
 * Class:     org_ray_runtime_Worker
 * Method:    getTaskReturnId
 * Signature: ([BJ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_org_ray_runtime_Worker_getTaskReturnId(JNIEnv *, jclass,
                                                                         jbyteArray,
                                                                         jlong);

#ifdef __cplusplus
}
#endif
#endif
