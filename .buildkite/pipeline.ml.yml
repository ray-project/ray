#ci:group=ML tests

# TODO(amogkam): Re-enable Ludwig tests after Ludwig supports Ray 2.0
#- label: ":octopus: Ludwig tests and examples. Python 3.7"
#  conditions: ["NO_WHEELS_REQUIRED", "RAY_CI_TUNE_AFFECTED"]
#  commands:
#    - cleanup() { if [ "${BUILDKITE_PULL_REQUEST}" = "false" ]; then ./ci/build/upload_build_info.sh; fi }; trap cleanup EXIT
#    - INSTALL_LUDWIG=1 INSTALL_HOROVOD=1 ./ci/env/install-dependencies.sh
#    - bazel test --config=ci $(./ci/run/bazel_export_options) --build_tests_only python/ray/tests/ludwig/...

- label: ":exploding_death_star: RLlib Contrib: A3C Tests"
  conditions: ["NO_WHEELS_REQUIRED", "RAY_CI_RLLIB_CONTRIB_AFFECTED"]
  commands:
    - cleanup() { if [ "${BUILDKITE_PULL_REQUEST}" = "false" ]; then ./ci/build/upload_build_info.sh; fi }; trap cleanup EXIT
    - conda deactivate
    - conda create -n rllib_contrib python=3.8 -y
    - conda activate rllib_contrib
    - (cd rllib_contrib/a3c && pip install -r requirements.txt && pip install -e ".[development]")
    - ./ci/env/env_info.sh
    # Download files needed for running the bazel tests.
    - wget https://raw.githubusercontent.com/ray-project/ray/releases/2.5.1/rllib/tests/run_regression_tests.py -P rllib_contrib/a3c/
    # BAZEL (learning and compilation) tests:
    - bazel test --config=ci $(./ci/run/bazel_export_options) --build_tests_only --test_tag_filters=-flaky rllib_contrib/a3c/...
    - bazel test --config=ci $(./ci/run/bazel_export_options) --build_tests_only --test_tag_filters=-flaky,learning_tests --test_arg=--framework=torch rllib_contrib/a3c/...
    - bazel test --config=ci $(./ci/run/bazel_export_options) --build_tests_only --test_tag_filters=-flaky,learning_tests --test_arg=--framework=tf2 rllib_contrib/a3c/...

- label: ":exploding_death_star: RLlib Contrib: CRR Tests"
  conditions: ["NO_WHEELS_REQUIRED", "RAY_CI_RLLIB_CONTRIB_AFFECTED"]
  commands:
    - cleanup() { if [ "${BUILDKITE_PULL_REQUEST}" = "false" ]; then ./ci/build/upload_build_info.sh; fi }; trap cleanup EXIT
    - conda deactivate
    - conda create -n rllib_contrib python=3.8 -y
    - conda activate rllib_contrib
    - (cd rllib_contrib/crr && pip install -r requirements.txt && pip install -e ".[development]")
    - ./ci/env/env_info.sh
    # Download files needed for running the bazel tests.
    - wget https://raw.githubusercontent.com/ray-project/ray/releases/2.5.1/rllib/tests/run_regression_tests.py -P rllib_contrib/crr/
    - wget https://raw.githubusercontent.com/ray-project/ray/master/rllib/tests/data/pendulum/pendulum_replay_v1.1.0.zip -P rllib_contrib/crr/tuned_examples/
    # BAZEL (learning and compilation) tests:
    - bazel test --config=ci $(./ci/run/bazel_export_options) --build_tests_only --test_tag_filters=-flaky,-learning_tests rllib_contrib/crr/...

- label: ":exploding_death_star: RLlib Contrib: DDPPO Tests"
  conditions: ["NO_WHEELS_REQUIRED", "RAY_CI_RLLIB_CONTRIB_AFFECTED"]
  commands:
    - cleanup() { if [ "${BUILDKITE_PULL_REQUEST}" = "false" ]; then ./ci/build/upload_build_info.sh; fi }; trap cleanup EXIT
    - conda deactivate
    - conda create -n rllib_contrib python=3.8 -y
    - conda activate rllib_contrib
    - (cd rllib_contrib/ddppo && pip install -r requirements.txt && pip install -e ".[development]")
    - ./ci/env/env_info.sh
    # Download files needed for running the bazel tests.
    - wget https://raw.githubusercontent.com/ray-project/ray/releases/2.5.1/rllib/tests/run_regression_tests.py -P rllib_contrib/ddppo/
    # BAZEL (learning and compilation) tests:
    - bazel test --config=ci $(./ci/run/bazel_export_options) --build_tests_only --test_tag_filters=-flaky,-learning_tests rllib_contrib/ddppo/...
    - bazel test --config=ci $(./ci/run/bazel_export_options) --build_tests_only --test_tag_filters=-flaky,learning_tests --test_arg=--framework=torch rllib_contrib/ddppo/...

- label: ":exploding_death_star: RLlib Contrib: Decision Transformer (DT) Tests"
  conditions: ["NO_WHEELS_REQUIRED", "RAY_CI_RLLIB_CONTRIB_AFFECTED"]
  commands:
    - cleanup() { if [ "${BUILDKITE_PULL_REQUEST}" = "false" ]; then ./ci/build/upload_build_info.sh; fi }; trap cleanup EXIT
    - conda deactivate
    - conda create -n rllib_contrib python=3.8 -y
    - conda activate rllib_contrib
    - (cd rllib_contrib/dt && pip install -r requirements.txt && pip install -e ".[development]")
    - ./ci/env/env_info.sh
    # Download files needed for running the bazel tests.
    - wget https://raw.githubusercontent.com/ray-project/ray/releases/2.5.1/rllib/tests/run_regression_tests.py -P rllib_contrib/dt/
    - wget https://github.com/ray-project/ray/raw/releases/2.5.1/rllib/tests/data/pendulum/pendulum_expert_sac_50eps.zip -P rllib_contrib/dt/tuned_examples/
    - wget https://github.com/ray-project/ray/raw/releases/2.5.1/rllib/tests/data/pendulum/pendulum_medium_sac_50eps.zip -P rllib_contrib/dt/tuned_examples/
    # BAZEL (learning and compilation) tests:
    - bazel test --config=ci $(./ci/run/bazel_export_options) --build_tests_only --test_tag_filters=-flaky,-learning_tests rllib_contrib/dt/...

- label: ":exploding_death_star: RLlib Contrib: Leela Chess Zero Tests"
  conditions: ["NO_WHEELS_REQUIRED", "RAY_CI_RLLIB_CONTRIB_AFFECTED"]
  commands:
    - cleanup() { if [ "${BUILDKITE_PULL_REQUEST}" = "false" ]; then ./ci/build/upload_build_info.sh; fi }; trap cleanup EXIT
    - conda deactivate
    - conda create -n rllib_contrib python=3.8 -y
    - conda activate rllib_contrib
    - (cd rllib_contrib/leela_chess_zero && pip install -r requirements.txt && pip install -e ".[development]")
    - ./ci/env/env_info.sh
    # Download files needed for running the bazel tests.
    - wget https://raw.githubusercontent.com/ray-project/ray/releases/2.5.1/rllib/tests/run_regression_tests.py -P rllib_contrib/leela_chess_zero/
    # BAZEL (learning and compilation) tests:
    - bazel test --config=ci $(./ci/run/bazel_export_options) --build_tests_only --test_tag_filters=-flaky rllib_contrib/leela_chess_zero/...

- label: ":exploding_death_star: RLlib Contrib: MBMPO Tests"
  conditions: ["NO_WHEELS_REQUIRED", "RAY_CI_RLLIB_CONTRIB_AFFECTED"]
  commands:
    - cleanup() { if [ "${BUILDKITE_PULL_REQUEST}" = "false" ]; then ./ci/build/upload_build_info.sh; fi }; trap cleanup EXIT

    # Install mujoco necessary for the testing environments
    - sudo apt install libosmesa6-dev libgl1-mesa-glx libglfw3 patchelf -y
    - mkdir -p /root/.mujoco
    - wget https://github.com/google-deepmind/mujoco/releases/download/2.1.1/mujoco-2.1.1-linux-x86_64.tar.gz
    - mv mujoco-2.1.1-linux-x86_64.tar.gz /root/.mujoco/.
    - (cd /root/.mujoco && tar -xf /root/.mujoco/mujoco-2.1.1-linux-x86_64.tar.gz)
    - echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/root/.mujoco/mujoco-2.1.1/bin' >> /root/.bashrc
    - source /root/.bashrc

    - (cd rllib_contrib/mbmpo && pip install -r requirements.txt && pip install -e ".[development]")
    - ./ci/env/env_info.sh

    # Download files needed for running the bazel tests.
    - wget https://raw.githubusercontent.com/ray-project/ray/releases/2.5.1/rllib/tests/run_regression_tests.py -P rllib_contrib/mbmpo/
    # BAZEL (learning and compilation) tests:
    - bazel test --config=ci $(./ci/run/bazel_export_options) --build_tests_only --test_tag_filters=-flaky rllib_contrib/mbmpo/...

- label: ":exploding_death_star: RLlib Contrib: TD3 Tests"
  conditions: ["NO_WHEELS_REQUIRED", "RAY_CI_RLLIB_CONTRIB_AFFECTED"]
  commands:
    - cleanup() { if [ "${BUILDKITE_PULL_REQUEST}" = "false" ]; then ./ci/build/upload_build_info.sh; fi }; trap cleanup EXIT
    - conda deactivate
    - conda create -n rllib_contrib python=3.8 -y
    - conda activate rllib_contrib
    - (cd rllib_contrib/td3 && pip install -r requirements.txt && pip install -e ".[development]")
    - ./ci/env/env_info.sh
    # Download files needed for running the bazel tests.
    - wget https://raw.githubusercontent.com/ray-project/ray/releases/2.5.1/rllib/tests/run_regression_tests.py -P rllib_contrib/td3/
    # BAZEL (learning and compilation) tests:
    - bazel test --config=ci $(./ci/run/bazel_export_options) --build_tests_only --test_tag_filters=-flaky rllib_contrib/td3/...
