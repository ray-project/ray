# Bazel build
# C/C++ documentation: https://docs.bazel.build/versions/master/be/c-cpp.html

load("//bazel:ray.bzl", "COPTS")
load("@rules_rust//rust:defs.bzl", "rust_binary", "rust_dylib_library", "rust_library")
load("@rules_rust//cargo:defs.bzl", "cargo_build_script")

cargo_build_script(
    name = "ray_wasm_buildrs",
    srcs = ["build.rs"],
    build_script_env = {
        "PROTOC": "$(execpath @com_google_protobuf//:protoc)",
        "PROTO_SRCS": "$(locations //src/ray/protobuf:gcs_proto_file)",
    },
    data = [
        "//:ray_common_headers",
        "//src/ray/protobuf",
        "//src/ray/protobuf:common_proto_file",
        "//src/ray/protobuf:gcs_proto_file",
        "@io_opencensus_proto//opencensus/proto/metrics/v1:metrics_proto",
    ],
    rustc_env = {
    },
    tools = [
        "@com_google_protobuf//:protoc",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "@wasm_crate_index//:prost-build",
    ],
)

rust_library(
    name = "ray_wasm_lib",
    srcs = glob(
        [
            "src/**/*.rs",
        ],
        exclude = [
            "src/cmd/*.rs",
        ],
    ),
    crate_name = "wasm_on_ray",
    crate_root = "src/lib.rs",
    visibility = ["//visibility:public"],
    deps = [
        "ray_wasm_buildrs",
        "//:core_worker_lib",
        "//:global_state_accessor_lib",
        "@wasm_crate_index//:anyhow",
        "@wasm_crate_index//:clap",
        "@wasm_crate_index//:lazy_static",
        "@wasm_crate_index//:prost",
        "@wasm_crate_index//:serde",
        "@wasm_crate_index//:serde_json",
        "@wasm_crate_index//:tokio",
        "@wasm_crate_index//:tracing",
        "@wasm_crate_index//:tracing-subscriber",
        "@wasm_crate_index//:uuid",
        "@wasm_crate_index//:wasmtime",
        "@wasm_crate_index//:libc",
    ],
)

# this rule is trying to use shared library.
# but it doesn't work on Mac right now due to
# issues with the rust libstd.
rust_dylib_library(
    name = "ray_wasm_lib.dylib",
    srcs = glob(
        [
            "src/**/*.rs",
        ],
        exclude = [
            "src/cmd/*.rs",
        ],
    ),
    crate_name = "wasm_on_ray",
    crate_root = "src/lib.rs",
    rustc_flags = [
        "-C", "prefer-dynamic",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "ray_wasm_buildrs",
        "//:core_worker_lib",
        "//:global_state_accessor_lib",
        "@wasm_crate_index//:anyhow",
        "@wasm_crate_index//:clap",
        "@wasm_crate_index//:lazy_static",
        "@wasm_crate_index//:prost",
        "@wasm_crate_index//:serde",
        "@wasm_crate_index//:serde_json",
        "@wasm_crate_index//:tokio",
        "@wasm_crate_index//:tracing",
        "@wasm_crate_index//:tracing-subscriber",
        "@wasm_crate_index//:uuid",
        "@wasm_crate_index//:wasmtime",
        "@wasm_crate_index//:libc",
    ],
)

cc_binary(
    name = "libray_wasm.so",
    copts = COPTS,
    linkopts = select({
        "@bazel_tools//src/conditions:darwin": [
            #TODO: Hide symbols on Mac.
        ],
        "@bazel_tools//src/conditions:windows": [
            #TODO: Hide symbols on Windows.
        ],
        "//conditions:default": [
            #TODO: Hide symbols on Linux.
        ],
    }),
    linkshared = 1,
    linkstatic = 1,
    visibility = ["//visibility:public"],
    deps = [
        "ray_wasm_lib",
    ],
)

rust_binary(
    name = "wasm_worker",
    srcs = glob([
        "src/cmd/wasm_worker.rs",
    ]),
    crate_name = "wasm_worker",
    crate_root = "src/cmd/wasm_worker.rs",
    visibility = ["//visibility:public"],
    deps = [
        ":ray_wasm_lib",
        "@wasm_crate_index//:anyhow",
        "@wasm_crate_index//:clap",
        "@wasm_crate_index//:lazy_static",
        "@wasm_crate_index//:prost",
        "@wasm_crate_index//:serde",
        "@wasm_crate_index//:serde_json",
        "@wasm_crate_index//:tokio",
        "@wasm_crate_index//:tracing",
        "@wasm_crate_index//:tracing-subscriber",
        "@wasm_crate_index//:uuid",
    ],
)

rust_binary(
    name = "raywa",
    srcs = glob([
        "src/cmd/raywa.rs",
    ]),
    crate_name = "raywa",
    crate_root = "src/cmd/raywa.rs",
    visibility = ["//visibility:public"],
    deps = [
        #":ray_wasm_lib.dylib",
        ":ray_wasm_lib",
        "@com_google_absl//absl/time",
        "@wasm_crate_index//:anyhow",
        "@wasm_crate_index//:clap",
        "@wasm_crate_index//:lazy_static",
        "@wasm_crate_index//:tokio",
        "@wasm_crate_index//:tracing",
        "@wasm_crate_index//:tracing-subscriber",
        "@wasm_crate_index//:libc",
    ],
)

genrule(
    name = "ray_wasm_pkg",
    srcs = [
        "wasm_worker",
        "raywa",
        "libray_wasm.so",
        "ray_wasm_lib.dylib",
    ],
    outs = ["ray_wasm_pkg.out"],
    cmd = """
        WORK_DIR="$$(pwd)" &&
        PY_WASM_DIR="$$WORK_DIR/python/ray/wasm" &&
        rm -rf $$PY_WASM_DIR && 
        mkdir -p "$$PY_WASM_DIR/lib/" &&
        cp -f $(location wasm_worker) "$$PY_WASM_DIR/" &&
        cp -f $(location libray_wasm.so) "$$PY_WASM_DIR/lib/" &&
        cp -f $(location ray_wasm_lib.dylib) "$$PY_WASM_DIR/lib/" &&
        cp -f $(location raywa) "$$PY_WASM_DIR/" &&
        echo "$$WORK_DIR" > $@
    """,
    local = True,
    visibility = ["//visibility:public"],
)
