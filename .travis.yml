sudo: required

language: generic

matrix:
  include:
    - os: linux
      dist: trusty
      env: PYTHON=2.7

    - os: linux
      dist: trusty
      env: PYTHON=3.5

    - os: osx
      osx_image: xcode7
      env: PYTHON=2.7

    - os: osx
      osx_image: xcode7
      env: PYTHON=3.5

    - os: linux
      dist: trusty
      env: LINT=1
      before_install:
        # In case we ever want to use a different version of clang-format:
        #- wget -O - http://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        #- echo "deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty main" | sudo tee -a /etc/apt/sources.list > /dev/null
        - sudo apt-get update -qq
        - sudo apt-get install -qq clang-format-3.8
      install: []
      script:
        - .travis/check-git-clang-format-output.sh
        # Try generating Sphinx documentation. To do this, we need to install
        # Ray first.
        - ./.travis/install-dependencies.sh
        - export PATH="$HOME/miniconda/bin:$PATH"
        - cd doc
        - pip install -r requirements-doc.txt
        - sphinx-build -W -b html -d _build/doctrees source _build/html
        - cd ..
        # Run Python linting.
        - flake8 --exclude=python/ray/core/src/common/flatbuffers_ep-prefix/,python/ray/core/generated/,src/common/format/,doc/source/conf.py

    - os: linux
      dist: trusty
      env: VALGRIND=1 PYTHON=2.7
      before_install:
        - sudo apt-get update -qq
        - sudo apt-get install -qq valgrind
      install:
        - ./.travis/install-dependencies.sh
        - export PATH="$HOME/miniconda/bin:$PATH"
        - ./.travis/install-ray.sh

        - cd python/ray/core
        - bash ../../../src/common/test/run_valgrind.sh
        - bash ../../../src/plasma/test/run_valgrind.sh
        - bash ../../../src/local_scheduler/test/run_valgrind.sh
        - cd ../../..

      script:
        - python ./python/ray/plasma/test/test.py valgrind
        - python ./python/ray/local_scheduler/test/test.py valgrind
        - python ./python/ray/global_scheduler/test/test.py valgrind

    # Build Linux wheels.
    - os: linux
      dist: trusty
      env: LINUX_WHEELS=1
      install:
        - ./.travis/install-dependencies.sh
        # This command should be kept in sync with ray/python/README-building-wheels.md.
        - docker run --rm -w /ray -v `pwd`:/ray -ti quay.io/xhochy/arrow_manylinux1_x86_64_base:ARROW-1024 /ray/python/build-wheel-manylinux1.sh
      script:
        - ./.travis/test-wheels.sh

    # Build MacOS wheels.
    - os: osx
      osx_image: xcode7
      env: MAC_WHEELS=1
      install:
        - ./.travis/install-dependencies.sh
        # This command should be kept in sync with ray/python/README-building-wheels.md.
        - ./python/build-wheel-macos.sh
      script:
        - ./.travis/test-wheels.sh

install:
  - ./.travis/install-dependencies.sh
  - export PATH="$HOME/miniconda/bin:$PATH"
  - ./.travis/install-ray.sh

  - cd python/ray/core
  - bash ../../../src/common/test/run_tests.sh
  - bash ../../../src/plasma/test/run_tests.sh
  - bash ../../../src/local_scheduler/test/run_tests.sh
  - cd ../../..

script:
  - export PATH="$HOME/miniconda/bin:$PATH"

  - python python/ray/common/test/test.py
  - python python/ray/common/redis_module/runtest.py
  - python python/ray/plasma/test/test.py
  - python python/ray/local_scheduler/test/test.py
  - python python/ray/global_scheduler/test/test.py

  - python test/runtest.py
  - python test/array_test.py
  - python test/actor_test.py
  - python test/tensorflow_test.py
  - python test/failure_test.py
  - python test/microbenchmarks.py
  - python test/stress_tests.py
  - python test/component_failures_test.py
  - python test/multi_node_test.py
  - python test/recursion_test.py
  - python test/monitor_test.py

  - python -m pytest python/ray/rllib/test/test_catalog.py
