from typing import Any, Callable, Generic, Optional, TypeVar, Union, cast, overload

T0 = TypeVar('T0')
T1 = TypeVar('T1')
T2 = TypeVar('T2')
T3 = TypeVar('T3')
T4 = TypeVar('T4')
T5 = TypeVar('T5')
T6 = TypeVar('T6')
T7 = TypeVar('T7')
T8 = TypeVar('T8')
T9 = TypeVar('T9')
R = TypeVar('R')

class RemoteFunction(Generic[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9]):
  def __init__(self, function: Callable[[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9], Any]) -> None:
    @overload
    def _remote_proxy() -> ObjectID: ...
    @overload
    def _remote_proxy(arg0: Union[T0, ObjectID]) -> ObjectID: ...
    @overload
    def _remote_proxy(arg0: Union[T0, ObjectID], arg1: Union[T1, ObjectID]) -> ObjectID: ...
    @overload
    def _remote_proxy(arg0: Union[T0, ObjectID], arg1: Union[T1, ObjectID], arg2: Union[T2, ObjectID]) -> ObjectID: ...
    @overload
    def _remote_proxy(arg0: Union[T0, ObjectID], arg1: Union[T1, ObjectID], arg2: Union[T2, ObjectID], arg3: Union[T3, ObjectID]) -> ObjectID: ...
    @overload
    def _remote_proxy(arg0: Union[T0, ObjectID], arg1: Union[T1, ObjectID], arg2: Union[T2, ObjectID], arg3: Union[T3, ObjectID], arg4: Union[T4, ObjectID]) -> ObjectID: ...
    @overload
    def _remote_proxy(arg0: Union[T0, ObjectID], arg1: Union[T1, ObjectID], arg2: Union[T2, ObjectID], arg3: Union[T3, ObjectID], arg4: Union[T4, ObjectID], arg5: Union[T5, ObjectID]) -> ObjectID: ...
    @overload
    def _remote_proxy(arg0: Union[T0, ObjectID], arg1: Union[T1, ObjectID], arg2: Union[T2, ObjectID], arg3: Union[T3, ObjectID], arg4: Union[T4, ObjectID], arg5: Union[T5, ObjectID], arg6: Union[T6, ObjectID]) -> ObjectID: ...
    @overload
    def _remote_proxy(arg0: Union[T0, ObjectID], arg1: Union[T1, ObjectID], arg2: Union[T2, ObjectID], arg3: Union[T3, ObjectID], arg4: Union[T4, ObjectID], arg5: Union[T5, ObjectID], arg6: Union[T6, ObjectID], arg7: Union[T7, ObjectID]) -> ObjectID: ...
    @overload
    def _remote_proxy(arg0: Union[T0, ObjectID], arg1: Union[T1, ObjectID], arg2: Union[T2, ObjectID], arg3: Union[T3, ObjectID], arg4: Union[T4, ObjectID], arg5: Union[T5, ObjectID], arg6: Union[T6, ObjectID], arg7: Union[T7, ObjectID], arg8: Union[T8, ObjectID]) -> ObjectID: ...
    @overload
    def _remote_proxy(arg0: Union[T0, ObjectID], arg1: Union[T1, ObjectID], arg2: Union[T2, ObjectID], arg3: Union[T3, ObjectID], arg4: Union[T4, ObjectID], arg5: Union[T5, ObjectID], arg6: Union[T6, ObjectID], arg7: Union[T7, ObjectID], arg8: Union[T8, ObjectID], arg9: Union[T9, ObjectID]) -> ObjectID: ...
    def _remote_proxy(*args: Any, **kwargs: Any) -> ObjectID: pass

    self.remote = _remote_proxy

@overload
def remote(function: Callable[[], R]) -> RemoteFunction[None, None, None, None, None, None, None, None, None, None]: ...
@overload
def remote(function: Callable[[T0], R]) -> RemoteFunction[T0, None, None, None, None, None, None, None, None, None]: ...
@overload
def remote(function: Callable[[T0, T1], R]) -> RemoteFunction[T0, T1, None, None, None, None, None, None, None, None]: ...
@overload
def remote(function: Callable[[T0, T1, T2], R]) -> RemoteFunction[T0, T1, T2, None, None, None, None, None, None, None]: ...
@overload
def remote(function: Callable[[T0, T1, T2, T3], R]) -> RemoteFunction[T0, T1, T2, T3, None, None, None, None, None, None]: ...
@overload
def remote(function: Callable[[T0, T1, T2, T3, T4], R]) -> RemoteFunction[T0, T1, T2, T3, T4, None, None, None, None, None]: ...
@overload
def remote(function: Callable[[T0, T1, T2, T3, T4, T5], R]) -> RemoteFunction[T0, T1, T2, T3, T4, T5, None, None, None, None]: ...
@overload
def remote(function: Callable[[T0, T1, T2, T3, T4, T5, T6], R]) -> RemoteFunction[T0, T1, T2, T3, T4, T5, T6, None, None, None]: ...
@overload
def remote(function: Callable[[T0, T1, T2, T3, T4, T5, T6, T7], R]) -> RemoteFunction[T0, T1, T2, T3, T4, T5, T6, T7, None, None]: ...
@overload
def remote(function: Callable[[T0, T1, T2, T3, T4, T5, T6, T7, T8], R]) -> RemoteFunction[T0, T1, T2, T3, T4, T5, T6, T7, T8, None]: ...
@overload
def remote(function: Callable[[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9], R]) -> RemoteFunction[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9]: ...
# Pass on typing actors for now. The following makes it so no type errors are generated for actors.
@overload
def remote(t: type) -> Any: ...
def remote(function: Callable[..., R]) -> RemoteFunction[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9]: pass