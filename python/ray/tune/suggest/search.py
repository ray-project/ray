from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import itertools

from ray.tune.variant_generator import generate_trials


class SearchAlgorithm(object):
    """Interface of an event handler API for hyperparameter search.

    Unlike TrialSchedulers, SearchAlgorithms will not have the ability
    to modify the execution (i.e., stop and pause trials).

    Trials added manually (i.e., via the Client API) will also notify
    this class upon new events, so custom search algorithms should
    maintain a list of trials ID generated from this class.

    See `VariantGenerationAlgorithm`.
    """

    def add_experiment(self, experiment):
        """Adds an Experiment to the search algorithm.

        Arguments:
            experiment (Experiment): Specification of a single experiment.
        """
        raise NotImplementedError

    def next_trial(self):
        """Provides Trial objects to be queued into the TrialRunner.

        Returns:
            Trial|None: If SearchAlgorithm cannot be queried at
                a certain time (i.e. due to constrained concurrency), this will
                return None. Otherwise, return a trial.
        """
        raise NotImplementedError

    def on_trial_result(self, trial_id, result):
        """Called on each intermediate result returned by a trial.

        This will only be called when the trial is in the RUNNING state.

        Arguments:
            trial_id: Identifier for the trial.
        """
        pass

    def on_trial_complete(self,
                          trial_id,
                          result=None,
                          error=False,
                          early_terminated=False):
        """Notification for the completion of trial.

        Arguments:
            trial_id: Identifier for the trial.
            result (TrainingResult): Defaults to None. A TrainingResult will
                be provided with this notification when the trial is in
                the RUNNING state AND either completes naturally or
                by manual termination.
            error (bool): Defaults to False. True if the trial is in
                the RUNNING state and errors.
            early_terminated (bool): Defaults to False. True if the trial
                is stopped while in PAUSED or PENDING state.
        """
        pass


class VariantAlgorithm(SearchAlgorithm):
    """Uses Tune's variant generation for resolving variables.

    Custom search algorithms can extend this class easily by overriding the
    `try_suggest` method, which will override conflicting fields from
    the initially generated parameters. See `ray.tune.variant_generator`.

    To track suggestions and their corresponding evaluations, the method
    `try_suggest` will need to generate a trial_id. This trial_id will
    be used in subsequent notifications.

    Attributes:
        NOT_READY (str): Status string for `try_suggest` if VariantAlgorithm
            currently cannot be queried for parameters (i.e. due to
            constrained concurrency).

    Example:
        >>> suggester = VariantAlgorithm()
        >>> new_parameters, trial_id = suggester.try_suggest()
        >>> suggester.on_trial_complete(trial_id, result)
        >>> better_parameters, trial_id2 = suggester.try_suggest()
    """

    NOT_READY = "NOT_READY"

    def __init__(self):
        self._generator = []

    def add_experiment(self, experiment):
        """Adds an Experiment to the search algorithm into a Queue.

        Arguments:
            experiment (Experiment): Specification of a single experiment.
        """

        self._generator = itertools.chain(
            self._generator,
            generate_trials(experiment.spec, experiment.name, self))

    def next_trial(self):
        return next(self._generator)

    def try_suggest(self):
        """Queries the algorithm to retrieve the next set of parameters.

        Returns:
            dict|NOT_READY: Partial configuration for a trial, if possible.
                Else, will return VariantAlgorithm.NOT_READY.
            trial_id: Trial ID used for subsequent notifications. If None,
                Trial ID will be generated by Trial.

        Example:
            >>> suggester = VariantAlgorithm(max_concurrent=1)
            >>> parameters_1, trial_id = suggester.try_suggest()
            >>> parameters_2, trial_id2 = suggester.try_suggest()
            >>> parameters_2 == VariantAlgorithm.NOT_READY
            >>> suggester.on_trial_complete(trial_id, result)
            >>> parameters_2, trial_id2 = suggester.try_suggest()
            >>> not(parameters_2 == VariantAlgorithm.NOT_READY)
        """
        return {}, None


class _MockAlgorithm(VariantAlgorithm):
    def __init__(self, max_concurrent=2):
        self._id = 0
        self._max_concurrent = max_concurrent
        self.live_trials = {}

    def try_suggest(self):
        if len(self.live_trials) < self._max_concurrent:
            id_str = self._generate_id()
            self.live_trials[id_str] = 1
            return {"test_variable": 2}, id_str
        else:
            return VariantAlgorithm.NOT_READY, None

    def _generate_id(self):
        self._id += 1
        return str(self._id) * 5

    def on_trial_complete(self, trial_id, *args, **kwargs):
        del self.live_trials[trial_id]
