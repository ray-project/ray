# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import node_manager_pb2 as src_dot_ray_dot_protobuf_dot_node__manager__pb2


class NodeManagerServiceStub(object):
    """Service for inter-node-manager communication.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UpdateResourceUsage = channel.unary_unary(
                '/ray.rpc.NodeManagerService/UpdateResourceUsage',
                request_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.UpdateResourceUsageRequest.SerializeToString,
                response_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.UpdateResourceUsageReply.FromString,
                )
        self.NotifyGCSRestart = channel.unary_unary(
                '/ray.rpc.NodeManagerService/NotifyGCSRestart',
                request_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.NotifyGCSRestartRequest.SerializeToString,
                response_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.NotifyGCSRestartReply.FromString,
                )
        self.GetResourceLoad = channel.unary_unary(
                '/ray.rpc.NodeManagerService/GetResourceLoad',
                request_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.GetResourceLoadRequest.SerializeToString,
                response_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.GetResourceLoadReply.FromString,
                )
        self.RequestWorkerLease = channel.unary_unary(
                '/ray.rpc.NodeManagerService/RequestWorkerLease',
                request_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.RequestWorkerLeaseRequest.SerializeToString,
                response_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.RequestWorkerLeaseReply.FromString,
                )
        self.ReportWorkerBacklog = channel.unary_unary(
                '/ray.rpc.NodeManagerService/ReportWorkerBacklog',
                request_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.ReportWorkerBacklogRequest.SerializeToString,
                response_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.ReportWorkerBacklogReply.FromString,
                )
        self.ReturnWorker = channel.unary_unary(
                '/ray.rpc.NodeManagerService/ReturnWorker',
                request_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.ReturnWorkerRequest.SerializeToString,
                response_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.ReturnWorkerReply.FromString,
                )
        self.ReleaseUnusedWorkers = channel.unary_unary(
                '/ray.rpc.NodeManagerService/ReleaseUnusedWorkers',
                request_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.ReleaseUnusedWorkersRequest.SerializeToString,
                response_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.ReleaseUnusedWorkersReply.FromString,
                )
        self.ShutdownRaylet = channel.unary_unary(
                '/ray.rpc.NodeManagerService/ShutdownRaylet',
                request_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.ShutdownRayletRequest.SerializeToString,
                response_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.ShutdownRayletReply.FromString,
                )
        self.DrainRaylet = channel.unary_unary(
                '/ray.rpc.NodeManagerService/DrainRaylet',
                request_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.DrainRayletRequest.SerializeToString,
                response_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.DrainRayletReply.FromString,
                )
        self.PrepareBundleResources = channel.unary_unary(
                '/ray.rpc.NodeManagerService/PrepareBundleResources',
                request_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.PrepareBundleResourcesRequest.SerializeToString,
                response_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.PrepareBundleResourcesReply.FromString,
                )
        self.CommitBundleResources = channel.unary_unary(
                '/ray.rpc.NodeManagerService/CommitBundleResources',
                request_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.CommitBundleResourcesRequest.SerializeToString,
                response_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.CommitBundleResourcesReply.FromString,
                )
        self.CancelResourceReserve = channel.unary_unary(
                '/ray.rpc.NodeManagerService/CancelResourceReserve',
                request_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.CancelResourceReserveRequest.SerializeToString,
                response_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.CancelResourceReserveReply.FromString,
                )
        self.CancelWorkerLease = channel.unary_unary(
                '/ray.rpc.NodeManagerService/CancelWorkerLease',
                request_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.CancelWorkerLeaseRequest.SerializeToString,
                response_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.CancelWorkerLeaseReply.FromString,
                )
        self.PinObjectIDs = channel.unary_unary(
                '/ray.rpc.NodeManagerService/PinObjectIDs',
                request_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.PinObjectIDsRequest.SerializeToString,
                response_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.PinObjectIDsReply.FromString,
                )
        self.GetNodeStats = channel.unary_unary(
                '/ray.rpc.NodeManagerService/GetNodeStats',
                request_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.GetNodeStatsRequest.SerializeToString,
                response_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.GetNodeStatsReply.FromString,
                )
        self.GlobalGC = channel.unary_unary(
                '/ray.rpc.NodeManagerService/GlobalGC',
                request_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.GlobalGCRequest.SerializeToString,
                response_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.GlobalGCReply.FromString,
                )
        self.FormatGlobalMemoryInfo = channel.unary_unary(
                '/ray.rpc.NodeManagerService/FormatGlobalMemoryInfo',
                request_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.FormatGlobalMemoryInfoRequest.SerializeToString,
                response_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.FormatGlobalMemoryInfoReply.FromString,
                )
        self.RequestObjectSpillage = channel.unary_unary(
                '/ray.rpc.NodeManagerService/RequestObjectSpillage',
                request_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.RequestObjectSpillageRequest.SerializeToString,
                response_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.RequestObjectSpillageReply.FromString,
                )
        self.ReleaseUnusedBundles = channel.unary_unary(
                '/ray.rpc.NodeManagerService/ReleaseUnusedBundles',
                request_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.ReleaseUnusedBundlesRequest.SerializeToString,
                response_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.ReleaseUnusedBundlesReply.FromString,
                )
        self.GetSystemConfig = channel.unary_unary(
                '/ray.rpc.NodeManagerService/GetSystemConfig',
                request_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.GetSystemConfigRequest.SerializeToString,
                response_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.GetSystemConfigReply.FromString,
                )
        self.GetTasksInfo = channel.unary_unary(
                '/ray.rpc.NodeManagerService/GetTasksInfo',
                request_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.GetTasksInfoRequest.SerializeToString,
                response_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.GetTasksInfoReply.FromString,
                )
        self.GetObjectsInfo = channel.unary_unary(
                '/ray.rpc.NodeManagerService/GetObjectsInfo',
                request_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.GetObjectsInfoRequest.SerializeToString,
                response_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.GetObjectsInfoReply.FromString,
                )
        self.GetTaskFailureCause = channel.unary_unary(
                '/ray.rpc.NodeManagerService/GetTaskFailureCause',
                request_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.GetTaskFailureCauseRequest.SerializeToString,
                response_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.GetTaskFailureCauseReply.FromString,
                )


class NodeManagerServiceServicer(object):
    """Service for inter-node-manager communication.
    """

    def UpdateResourceUsage(self, request, context):
        """Update the node's view of the cluster resource usage.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NotifyGCSRestart(self, request, context):
        """Handle the case when GCS restarted.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetResourceLoad(self, request, context):
        """Get the resource load of the raylet.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestWorkerLease(self, request, context):
        """Request a worker from the raylet.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportWorkerBacklog(self, request, context):
        """Report task backlog information from a worker to the raylet
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReturnWorker(self, request, context):
        """Release a worker back to its raylet.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReleaseUnusedWorkers(self, request, context):
        """This method is only used by GCS, and the purpose is to release leased workers
        that may be leaked. When GCS restarts, it doesn't know which workers it has leased
        in the previous lifecycle. In this case, GCS will send a list of worker ids that
        are still needed. And Raylet will release other leased workers.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ShutdownRaylet(self, request, context):
        """/ Shutdown the raylet (node manager).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DrainRaylet(self, request, context):
        """Request to drain the raylet.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PrepareBundleResources(self, request, context):
        """Request a raylet to lock resources for a bundle.
        This is the first phase of 2PC protocol for atomic placement group creation.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CommitBundleResources(self, request, context):
        """Commit bundle resources to a raylet.
        This is the second phase of 2PC protocol for atomic placement group creation.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelResourceReserve(self, request, context):
        """Return resource for the raylet.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelWorkerLease(self, request, context):
        """Cancel a pending lease request. This only returns success if the
        lease request was not yet granted.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PinObjectIDs(self, request, context):
        """Pin the provided object IDs.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNodeStats(self, request, context):
        """Get the current node stats.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GlobalGC(self, request, context):
        """Trigger garbage collection in all workers across the cluster.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FormatGlobalMemoryInfo(self, request, context):
        """Get global object reference stats in formatted form.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestObjectSpillage(self, request, context):
        """Ask the raylet to spill an object to external storage.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReleaseUnusedBundles(self, request, context):
        """This method is only used by GCS, and the purpose is to release bundles
        that may be leaked. When GCS restarts, it doesn't know which bundles it has leased
        in the previous lifecycle. In this case, GCS will send a list of bundles that
        are still needed. And Raylet will release other bundles.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSystemConfig(self, request, context):
        """Get the system config.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTasksInfo(self, request, context):
        """[State API] Get the all task information of the node.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetObjectsInfo(self, request, context):
        """[State API] Get the all object information of the node.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskFailureCause(self, request, context):
        """Gets the task execution result. May contain a result if
        the task completed in error.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NodeManagerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UpdateResourceUsage': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateResourceUsage,
                    request_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.UpdateResourceUsageRequest.FromString,
                    response_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.UpdateResourceUsageReply.SerializeToString,
            ),
            'NotifyGCSRestart': grpc.unary_unary_rpc_method_handler(
                    servicer.NotifyGCSRestart,
                    request_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.NotifyGCSRestartRequest.FromString,
                    response_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.NotifyGCSRestartReply.SerializeToString,
            ),
            'GetResourceLoad': grpc.unary_unary_rpc_method_handler(
                    servicer.GetResourceLoad,
                    request_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.GetResourceLoadRequest.FromString,
                    response_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.GetResourceLoadReply.SerializeToString,
            ),
            'RequestWorkerLease': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestWorkerLease,
                    request_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.RequestWorkerLeaseRequest.FromString,
                    response_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.RequestWorkerLeaseReply.SerializeToString,
            ),
            'ReportWorkerBacklog': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportWorkerBacklog,
                    request_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.ReportWorkerBacklogRequest.FromString,
                    response_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.ReportWorkerBacklogReply.SerializeToString,
            ),
            'ReturnWorker': grpc.unary_unary_rpc_method_handler(
                    servicer.ReturnWorker,
                    request_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.ReturnWorkerRequest.FromString,
                    response_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.ReturnWorkerReply.SerializeToString,
            ),
            'ReleaseUnusedWorkers': grpc.unary_unary_rpc_method_handler(
                    servicer.ReleaseUnusedWorkers,
                    request_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.ReleaseUnusedWorkersRequest.FromString,
                    response_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.ReleaseUnusedWorkersReply.SerializeToString,
            ),
            'ShutdownRaylet': grpc.unary_unary_rpc_method_handler(
                    servicer.ShutdownRaylet,
                    request_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.ShutdownRayletRequest.FromString,
                    response_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.ShutdownRayletReply.SerializeToString,
            ),
            'DrainRaylet': grpc.unary_unary_rpc_method_handler(
                    servicer.DrainRaylet,
                    request_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.DrainRayletRequest.FromString,
                    response_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.DrainRayletReply.SerializeToString,
            ),
            'PrepareBundleResources': grpc.unary_unary_rpc_method_handler(
                    servicer.PrepareBundleResources,
                    request_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.PrepareBundleResourcesRequest.FromString,
                    response_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.PrepareBundleResourcesReply.SerializeToString,
            ),
            'CommitBundleResources': grpc.unary_unary_rpc_method_handler(
                    servicer.CommitBundleResources,
                    request_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.CommitBundleResourcesRequest.FromString,
                    response_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.CommitBundleResourcesReply.SerializeToString,
            ),
            'CancelResourceReserve': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelResourceReserve,
                    request_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.CancelResourceReserveRequest.FromString,
                    response_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.CancelResourceReserveReply.SerializeToString,
            ),
            'CancelWorkerLease': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelWorkerLease,
                    request_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.CancelWorkerLeaseRequest.FromString,
                    response_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.CancelWorkerLeaseReply.SerializeToString,
            ),
            'PinObjectIDs': grpc.unary_unary_rpc_method_handler(
                    servicer.PinObjectIDs,
                    request_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.PinObjectIDsRequest.FromString,
                    response_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.PinObjectIDsReply.SerializeToString,
            ),
            'GetNodeStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNodeStats,
                    request_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.GetNodeStatsRequest.FromString,
                    response_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.GetNodeStatsReply.SerializeToString,
            ),
            'GlobalGC': grpc.unary_unary_rpc_method_handler(
                    servicer.GlobalGC,
                    request_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.GlobalGCRequest.FromString,
                    response_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.GlobalGCReply.SerializeToString,
            ),
            'FormatGlobalMemoryInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.FormatGlobalMemoryInfo,
                    request_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.FormatGlobalMemoryInfoRequest.FromString,
                    response_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.FormatGlobalMemoryInfoReply.SerializeToString,
            ),
            'RequestObjectSpillage': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestObjectSpillage,
                    request_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.RequestObjectSpillageRequest.FromString,
                    response_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.RequestObjectSpillageReply.SerializeToString,
            ),
            'ReleaseUnusedBundles': grpc.unary_unary_rpc_method_handler(
                    servicer.ReleaseUnusedBundles,
                    request_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.ReleaseUnusedBundlesRequest.FromString,
                    response_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.ReleaseUnusedBundlesReply.SerializeToString,
            ),
            'GetSystemConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSystemConfig,
                    request_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.GetSystemConfigRequest.FromString,
                    response_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.GetSystemConfigReply.SerializeToString,
            ),
            'GetTasksInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTasksInfo,
                    request_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.GetTasksInfoRequest.FromString,
                    response_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.GetTasksInfoReply.SerializeToString,
            ),
            'GetObjectsInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetObjectsInfo,
                    request_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.GetObjectsInfoRequest.FromString,
                    response_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.GetObjectsInfoReply.SerializeToString,
            ),
            'GetTaskFailureCause': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskFailureCause,
                    request_deserializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.GetTaskFailureCauseRequest.FromString,
                    response_serializer=src_dot_ray_dot_protobuf_dot_node__manager__pb2.GetTaskFailureCauseReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ray.rpc.NodeManagerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NodeManagerService(object):
    """Service for inter-node-manager communication.
    """

    @staticmethod
    def UpdateResourceUsage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ray.rpc.NodeManagerService/UpdateResourceUsage',
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.UpdateResourceUsageRequest.SerializeToString,
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.UpdateResourceUsageReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NotifyGCSRestart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ray.rpc.NodeManagerService/NotifyGCSRestart',
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.NotifyGCSRestartRequest.SerializeToString,
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.NotifyGCSRestartReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetResourceLoad(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ray.rpc.NodeManagerService/GetResourceLoad',
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.GetResourceLoadRequest.SerializeToString,
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.GetResourceLoadReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestWorkerLease(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ray.rpc.NodeManagerService/RequestWorkerLease',
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.RequestWorkerLeaseRequest.SerializeToString,
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.RequestWorkerLeaseReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReportWorkerBacklog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ray.rpc.NodeManagerService/ReportWorkerBacklog',
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.ReportWorkerBacklogRequest.SerializeToString,
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.ReportWorkerBacklogReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReturnWorker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ray.rpc.NodeManagerService/ReturnWorker',
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.ReturnWorkerRequest.SerializeToString,
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.ReturnWorkerReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReleaseUnusedWorkers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ray.rpc.NodeManagerService/ReleaseUnusedWorkers',
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.ReleaseUnusedWorkersRequest.SerializeToString,
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.ReleaseUnusedWorkersReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ShutdownRaylet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ray.rpc.NodeManagerService/ShutdownRaylet',
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.ShutdownRayletRequest.SerializeToString,
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.ShutdownRayletReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DrainRaylet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ray.rpc.NodeManagerService/DrainRaylet',
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.DrainRayletRequest.SerializeToString,
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.DrainRayletReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PrepareBundleResources(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ray.rpc.NodeManagerService/PrepareBundleResources',
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.PrepareBundleResourcesRequest.SerializeToString,
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.PrepareBundleResourcesReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CommitBundleResources(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ray.rpc.NodeManagerService/CommitBundleResources',
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.CommitBundleResourcesRequest.SerializeToString,
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.CommitBundleResourcesReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelResourceReserve(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ray.rpc.NodeManagerService/CancelResourceReserve',
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.CancelResourceReserveRequest.SerializeToString,
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.CancelResourceReserveReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelWorkerLease(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ray.rpc.NodeManagerService/CancelWorkerLease',
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.CancelWorkerLeaseRequest.SerializeToString,
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.CancelWorkerLeaseReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PinObjectIDs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ray.rpc.NodeManagerService/PinObjectIDs',
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.PinObjectIDsRequest.SerializeToString,
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.PinObjectIDsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNodeStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ray.rpc.NodeManagerService/GetNodeStats',
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.GetNodeStatsRequest.SerializeToString,
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.GetNodeStatsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GlobalGC(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ray.rpc.NodeManagerService/GlobalGC',
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.GlobalGCRequest.SerializeToString,
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.GlobalGCReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FormatGlobalMemoryInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ray.rpc.NodeManagerService/FormatGlobalMemoryInfo',
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.FormatGlobalMemoryInfoRequest.SerializeToString,
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.FormatGlobalMemoryInfoReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestObjectSpillage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ray.rpc.NodeManagerService/RequestObjectSpillage',
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.RequestObjectSpillageRequest.SerializeToString,
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.RequestObjectSpillageReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReleaseUnusedBundles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ray.rpc.NodeManagerService/ReleaseUnusedBundles',
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.ReleaseUnusedBundlesRequest.SerializeToString,
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.ReleaseUnusedBundlesReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSystemConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ray.rpc.NodeManagerService/GetSystemConfig',
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.GetSystemConfigRequest.SerializeToString,
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.GetSystemConfigReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTasksInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ray.rpc.NodeManagerService/GetTasksInfo',
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.GetTasksInfoRequest.SerializeToString,
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.GetTasksInfoReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetObjectsInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ray.rpc.NodeManagerService/GetObjectsInfo',
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.GetObjectsInfoRequest.SerializeToString,
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.GetObjectsInfoReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTaskFailureCause(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ray.rpc.NodeManagerService/GetTaskFailureCause',
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.GetTaskFailureCauseRequest.SerializeToString,
            src_dot_ray_dot_protobuf_dot_node__manager__pb2.GetTaskFailureCauseReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
