import copy
import mock
import sys
import uuid

import pytest

from ray.autoscaler._private.kuberay.node_provider import (
    _worker_group_index,
    _worker_group_max_replicas,
    KuberayNodeProvider,
)

from ray.tests.kuberay.test_autoscaling_config import get_basic_ray_cr


@pytest.mark.skipif(sys.platform.startswith("win"), reason="Not relevant on Windows.")
@pytest.mark.parametrize(
    "group_name,expected_index", [("small-group", 0), ("gpu-group", 1)]
)
def test_worker_group_index(group_name, expected_index):
    """Basic unit test for _worker_group_index.

    Uses a RayCluster CR with worker groups "small-group" and "gpu-group",
    listed in that order.
    """
    raycluster_cr = get_basic_ray_cr()
    assert _worker_group_index(raycluster_cr, group_name) == expected_index


@pytest.mark.skipif(sys.platform.startswith("win"), reason="Not relevant on Windows.")
@pytest.mark.parametrize(
    "group_index,expected_max_replicas", [(0, 300), (1, 200), (2, None)]
)
def test_worker_group_max_replicas(group_index, expected_max_replicas):
    """Basic unit test for _worker_group_max_replicas.

    Uses a RayCluster CR with worker groups with 300 maxReplicas, 200 maxReplicas,
    and unspecified maxReplicas, in that order.
    """
    raycluster_cr = get_basic_ray_cr()

    # Add a worker group without maxReplicas to confirm behavior
    # when maxReplicas is not specified.
    no_max_replicas_group = copy.deepcopy(raycluster_cr["spec"]["workerGroupSpecs"][0])
    no_max_replicas_group["groupName"] = "no-max-replicas"
    del no_max_replicas_group["maxReplicas"]
    raycluster_cr["spec"]["workerGroupSpecs"].append(no_max_replicas_group)

    assert (
        _worker_group_max_replicas(raycluster_cr, group_index) == expected_max_replicas
    )


@pytest.mark.skipif(sys.platform.startswith("win"), reason="Not relevant on Windows.")
@pytest.mark.parametrize(
    "cur_pod_count,to_add_pod_count,expected_target_replica_count",
    [(0, 200, 200), (200, 50, 250), (150, 150, 300), (200, 200, 300), (0, 1000, 300)],
)
def test_create_node_cap_at_max(
    cur_pod_count, to_add_pod_count, expected_target_replica_count
):
    """Validates that KuberayNodeProvider does not attempt to create more nodes than
    allowed by maxReplicas. For the config in this test, maxReplicas is fixed at 300.

    Args:
        cur_pod_count: The mocked current count pods of a given worker group.
        to_add_pod_count: The number of Ray nodes the autoscaler would like to add.
        expected_target_replica_count: The actual requested replicaCount. Should be
            capped at maxReplicas (300, for the config in this test.)

    Concretely, we're checking that the target replica count generated by
    KuberayNodeProvider.create_node is
    min(cur_pod_count + to_add_pod_count, maxReplicas)
    where maxReplicas is 300 for this test.
    """
    # KuberayNodeProvider._patch applies a patch to a K8s object.
    # For this test, mock the method such that it records the payload in an instance
    # variable.
    def mock_patch(self, url, payload):
        self._applied_patch = payload

    # Mock out KuberayNodeProvider.__init__().
    def mock_init(self, provider_config, cluster_name):
        self.cluster_name = cluster_name
        return None

    # Mock non_terminated_nodes to return a list of random ids of desired length,
    # representing the collection of pods of the relevant node type.
    def mock_non_terminated_nodes(self, tag_filters):
        return [uuid.uuid4() for _ in range(cur_pod_count)]

    raycluster_cr = get_basic_ray_cr()
    with mock.patch.object(
        KuberayNodeProvider,
        "__init__",
        mock_init,
    ), mock.patch.object(
        KuberayNodeProvider,
        "_get",
        return_value=raycluster_cr,
    ), mock.patch.object(
        KuberayNodeProvider,
        "_patch",
        mock_patch,
    ), mock.patch.object(
        KuberayNodeProvider,
        "non_terminated_nodes",
        mock_non_terminated_nodes,
    ):
        kr_node_provider = KuberayNodeProvider(provider_config={}, cluster_name="fake")
        kr_node_provider.create_node(
            node_config={},
            tags={"ray-user-node-type": "small-group"},
            count=to_add_pod_count,
        )
        # Verify that the expected RayCluster CR patch was registered.
        assert (
            kr_node_provider._applied_patch[0]["value"] == expected_target_replica_count
        )


if __name__ == "__main__":
    sys.exit(pytest.main(["-v", __file__]))
