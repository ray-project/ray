workspace(name = "rules_foreign_cc_usage_example")

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

# Group the sources of the library so that CMake rule have access to it
all_content = """filegroup(name = "all", srcs = glob(["**"]), visibility = ["//visibility:public"])"""

# Rule repository
http_archive(
   name = "rules_foreign_cc",
   strip_prefix = "rules_foreign_cc-master",
   url = "https://github.com/bazelbuild/rules_foreign_cc/archive/master.zip",
)

load("@rules_foreign_cc//:workspace_definitions.bzl", "rules_foreign_cc_dependencies")

# Call this function from the WORKSPACE file to initialize rules_foreign_cc
#  dependencies and let neccesary code generation happen
#  (Code generation is needed to support different variants of the C++ Starlark API.).
#
#  Args:
#    native_tools_toolchains: pass the toolchains for toolchain types
#      '@rules_foreign_cc//tools/build_defs:make_toolchain',
#      '@rules_foreign_cc//tools/build_defs:cmake_toolchain' and
#      '@rules_foreign_cc//tools/build_defs:ninja_toolchain' with the needed platform constraints.
#      If you do not pass anything, registered default toolchains will be selected (see below).
#
#    register_default_tools: if True, the make, cmake and ninja toolchains, calling corresponding
#      preinstalled binaries by name (make, cmake, ninja) will be registered after
#      'native_tools_toolchains' without any platform constraints.
#      The default is True.
rules_foreign_cc_dependencies()

# # OpenBLAS source code repository
# http_archive(
#    name = "openblas",
#    build_file_content = all_content,
#    strip_prefix = "OpenBLAS-0.3.2",
#    urls = ["https://github.com/xianyi/OpenBLAS/archive/v0.3.2.tar.gz"],
# )

# # Eigen source code repository
# http_archive(
#    name = "eigen",
#    build_file_content = all_content,
#    strip_prefix = "eigen-git-mirror-3.3.5",
#    urls = ["https://github.com/eigenteam/eigen-git-mirror/archive/3.3.5.tar.gz"],
# )


http_archive(
    name = "rules_foreign_cc",
    strip_prefix = "opencensus-proto-0.3.0/src",
    urls = ["https://github.com/census-instrumentation/opencensus-proto/archive/v0.3.0.tar.gz"],
    sha256 = "b7e13f0b4259e80c3070b583c2f39e53153085a6918718b1c710caf7037572b0",
)

http_archive(
   name = "pybind11_bazel",
   strip_prefix = "pybind11_bazel-f4f1bd4fa4b368b79dd6f003f8ef8c5a91fad36b",
   urls = ["https://github.com/Ezra-H/pybind11_bazel/archive/f4f1bd4fa4b368b79dd6f003f8ef8c5a91fad36b.zip"],
)

# We still require the pybind library.
http_archive(
   name = "pybind11",
   build_file = "@pybind11_bazel//:pybind11.BUILD",
   # strip_prefix = "pybind11-98f1bbb8004f654ba9e26717bdf5912fb899b05a",
   # urls = ["https://github.com/pybind/pybind11/archive/98f1bbb8004f654ba9e26717bdf5912fb899b05a.tar.gz"],
   strip_prefix = "pybind11-2.6.1",
   urls = ["https://github.com/pybind/pybind11/archive/v2.6.1.tar.gz"],
)

http_archive(
   name = "libuv",
   build_file_content = all_content,
   strip_prefix = "libuv-1.40.0",
   urls = ["https://github.com/libuv/libuv/archive/v1.40.0.tar.gz"],
)

# gloo source code repository
http_archive(
   name = "gloo",
   build_file_content = all_content,
   strip_prefix = "gloo-4279d78bcc7b04e975f94840a6ef30b086a8b6fe",
   urls = ["https://github.com/Ezra-H/gloo/archive/4279d78bcc7b04e975f94840a6ef30b086a8b6fe.tar.gz"],
   # urls = ["https://github.com/Ezra-H/gloo/archive/1da21174054eaabbbd189b7f657ea24842d821e2.tar.gz"],
)

load("@pybind11_bazel//:python_configure.bzl", "python_configure_pybind")
python_configure_pybind(name = "local_config_python")


