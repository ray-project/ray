# source: global_state_accessor.pxi
from typing import Any, Union

from ray._raylet import GcsClientOptions
from ray.includes.unique_ids import ActorID, JobID, NodeID, PlacementGroupID, WorkerID

class GlobalStateAccessor:
    """Cython wrapper class of C++ `ray::gcs::GlobalStateAccessor`."""

    def __init__(self, gcs_options:GcsClientOptions)->None: ... #from __cinit__

    def connect(self)->bool: ...

    def disconnect(self)->None: ...

    def get_job_table(
        self, *, skip_submission_job_info_field=False, skip_is_running_tasks_field=False
    )->list[bytes]: ...

    def get_next_job_id(self)->int: ...

    def get_node_table(self)->list[dict[str,Any]]: ...

    def get_draining_nodes(self)->dict[str,int]: ... #TODO: proper test for this return type using a ray GCA test

    def get_internal_kv(self, namespace:Union[str,bytes], key:Union[str,bytes])->Union[bytes,None]: ...

    def get_all_available_resources(self)->list[bytes]: ...

    def get_all_total_resources(self)->list[bytes]: ...

    def get_task_events(self)->list[bytes]: ...

    def get_all_resource_usage(self)->Union[bytes,None]:
        """Get newest resource usage of all nodes from GCS service."""
        ...

    def get_actor_table(self, job_id:JobID, actor_state_name:bytes)->list[bytes]: ...

    def get_actor_info(self, actor_id:ActorID)->Union[bytes,None]: ...

    def get_worker_table(self)->list[bytes]: ...

    def get_worker_info(self, worker_id:WorkerID)->Union[bytes,None]: ...

    def add_worker_info(self, serialized_string:Union[str,bytes])->bool: ...

    def get_worker_debugger_port(self, worker_id:WorkerID)->int: ...

    def update_worker_debugger_port(self, worker_id:WorkerID, debugger_port:int)->bool: ...

    def update_worker_num_paused_threads(self, worker_id:WorkerID, num_paused_threads_delta:int)->bool: ...

    def get_placement_group_table(self)->list[bytes]: ...

    def get_placement_group_info(self, placement_group_id:PlacementGroupID)->Union[bytes,None]: ...

    def get_placement_group_by_name(self, placement_group_name:Union[str,bytes], ray_namespace:Union[str,bytes])->Union[bytes,None]: ...

    def get_system_config(self)->bytes: ...

    def get_node_to_connect_for_driver(self, node_ip_address:Union[str,bytes])->dict[str,str]: ...

    def get_node(self, node_id:NodeID)->dict[str,Union[str,dict[str,str]]]: ...
