syntax = "proto3";

package ray.streaming.proto;

import "streaming/src/protobuf/streaming.proto";

option java_package = "io.ray.streaming.runtime.generated";

//// Streaming execution graph
//message ExecutionGraph {
//  // A parallel operation consisting of multiple execution tasks
//  message ExecutionNode {
//    int32 node_id = 1;
//    int32 parallelism = 2;
//    NodeType node_type = 3;
//    Language language = 4;
//    // serialized user function
//    bytes function = 5;
//    repeated ExecutionTask execution_tasks = 6;
//    repeated ExecutionEdge input_edges = 7;
//    repeated ExecutionEdge output_edges = 8;
//  }
//
//  // execution edge
//  message ExecutionEdge {
//    // upstream execution node id
//    int32 src_node_id = 1;
//    // downstream execution node id
//    int32 target_node_id = 2;
//    // serialized partition between src/target node
//    bytes partition = 3;
//  }
//
//  // a parallel subtask of the execution
//  message ExecutionTask {
//    // unique execution task id
//    int32 task_id = 1;
//    // an ordered task index range from 0 to parallelism - 1
//    int32 task_index = 2;
//    // serialized actor handle
//    bytes worker_actor = 3;
//  }
//
//  // graph build time
//  uint64 build_time = 1;
//  repeated ExecutionNode execution_nodes = 2;
//}

// Execution vertex info, including it's upstream and downstream
message ExecutionVertexContext {

  // An edge between 2 execution vertices
  message ExecutionEdge {

    // upstream execution vertex id
    int32 source_vertex_id = 1;

    // downstream execution vertex id
    int32 target_vertex_id = 2;

    // serialized partition between source/target vertex
    bytes partition = 3;
  }

  message ExecutionVertex {
    int32 vertex_id = 1;
    int32 job_vertex_Id = 2;
    string job_vertex_name = 3;
    int32 vertex_index = 4;
    int32 parallelism = 5;
    bytes function = 6;
    bytes worker_actor = 7;
    string container_id = 8;
    uint64 build_time = 9;
    Language language = 10;
    map<string, string> config = 11;
    map<string, double> resource = 12;
  }

  // vertices
  ExecutionVertex current_vertex = 1;
  repeated ExecutionVertex upstream_vertices = 2;
  repeated ExecutionVertex downstream_vertices = 3;

  // edges
  repeated ExecutionEdge input_edges = 4;
  repeated ExecutionEdge output_edges = 5;
}

// Streaming python worker context
message PythonJobWorkerContext {

  // serialized master actor handle
  bytes master_actor = 1;

  // vertex including it's upstream and downstream
  ExecutionVertexContext vertex_context = 2;
}
