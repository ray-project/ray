# Bazel build
# C/C++ documentation: https://docs.bazel.build/versions/master/be/c-cpp.html

load("//bazel:ray.bzl", "COPTS")

cc_binary(
    name = "libray_api.so",
    copts = COPTS,
    linkshared = 1,
    linkstatic = 1,
    visibility = ["//visibility:public"],
    deps = [
        ":ray_api",
    ],
)

cc_library(
    name = "ray_api",
    srcs = glob([
        "src/ray/api.cc",
        "src/ray/api/*.cc",
        "src/ray/api/*.h",
        "src/ray/app/*.cc",
        "src/ray/app/*.h",
        "src/ray/runtime/*.cc",
        "src/ray/runtime/*.h",
        "src/ray/runtime/**/*.cc",
        "src/ray/runtime/**/*.h",
        "src/ray/runtime/task/*.cc",
        "src/ray/runtime/task/*.h",
        "src/ray/util/*.cc",
        "src/ray/util/*.h",
        "src/ray/*.cc",
        "src/ray/*.h",
    ]),
    hdrs = glob([
        "include/ray/*.h",
        "include/ray/**/*.h",
        "include/ray/**/**/*.h",
    ]),
    copts = COPTS,
    linkopts = ["-ldl"],
    linkstatic = True,
    strip_include_prefix = "include",
    visibility = ["//visibility:public"],
    deps = [
        "//:core_worker_lib",
        "//:global_state_accessor_lib",
        "//:ray_common",
        "//:ray_util",
        "@boost//:callable_traits",
        "@boost//:dll",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@msgpack",
    ],
    alwayslink = True,
)

cc_binary(
    name = "default_worker",
    srcs = glob([
        "src/ray/worker/default_worker.cc",
    ]),
    #copts = COPTS,
    linkstatic = True,
    deps = [
        "//:ray_cpp_lib",
    ],
    visibility = ["//visibility:public"],
)

# test
cc_test(
    name = "api_test",
    srcs = glob([
        "src/ray/test/*.cc",
    ]),
    copts = COPTS,
    linkstatic = True,
    tags = ["team:core"],
    deps = [
        "ray_api",
        "@boost//:filesystem",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "cluster_mode_test",
    srcs = glob([
        "src/ray/test/cluster/*.cc",
        "src/ray/test/cluster/*.h",
    ]),
    args = [
        "--ray_code_search_path=$(location plus.so):$(location counter.so):cpp/src/ray/test/cluster",
        "--ray_head_args '--include-dashboard false'",
    ],
    copts = COPTS,
    data = [
        "counter.so",
        "plus.so",
        "//:ray_cpp_pkg",
        "src/ray/test/cluster/test_cross_language_invocation.py",
    ],
    linkstatic = True,
    tags = ["team:core"],
    deps = [
        "ray_api",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_binary(
    name = "plus.so",
    testonly = True,
    srcs = [
        "src/ray/test/cluster/plus.cc",
        "src/ray/test/cluster/plus.h",
    ],
    copts = COPTS,
    linkopts = ["-shared"],
    linkstatic = True,
    deps = [
        "//:ray_cpp_lib",
    ],
)

cc_binary(
    name = "counter.so",
    testonly = True,
    srcs = [
        "src/ray/test/cluster/counter.cc",
        "src/ray/test/cluster/counter.h",
    ],
    copts = COPTS,
    linkopts = ["-shared"],
    linkstatic = True,
    deps = [
        "//:ray_cpp_lib",
    ],
)

cc_test(
    name = "simple_kv_store",
    srcs = glob([
        "src/ray/test/examples/*.cc",
    ]),
    data = [
        "simple_kv_store.so",
    ],
    linkstatic = True,
    tags = ["team:core"],
    deps = [
        "//:ray_cpp_lib",
    ],
)

cc_binary(
    name = "simple_kv_store.so",
    testonly = True,
    srcs = glob([
        "src/ray/test/examples/*.cc",
    ]),
    linkopts = ["-shared"],
    linkstatic = True,
    deps = [
        "//:ray_cpp_lib",
    ],
)

load("//bazel:python.bzl", "py_test_module_list")

py_test_module_list(
    size = "small",
    extra_srcs = [],
    files = [
        "test_python_call_cpp.py",
    ],
    tags = [
        "exclusive",
        "small_size_python_tests",
        "team:core",
    ],
    deps = [
        ":ray_api",
    ],
)
