diff --git deps/hiredis/hiredis.c deps/hiredis/hiredis.c
--- deps/hiredis/hiredis.c
+++ deps/hiredis/hiredis.c
@@ -46,0 +46,37 @@
+#ifdef _WINSOCKAPI_
+static ptrdiff_t read_redis(int fildes, void *buf, size_t nbyte) {
+    WSABUF wsabuf = { (u_long)nbyte, (char *)buf };
+    WSAOVERLAPPED overlapped = { 0 };
+    SOCKET sock = _get_osfhandle(fildes);
+    int flags = 0;
+    ptrdiff_t r = WSARecv(sock, &wsabuf, 1, NULL, &flags, &overlapped, NULL);
+    if (r == SOCKET_ERROR && WSAGetLastError() == WSA_IO_PENDING) {
+        r = WSAWaitForMultipleEvents(1, &sock, FALSE, WSA_INFINITE, FALSE) == WSA_WAIT_EVENT_0 ? overlapped.InternalHigh : -1;
+    } else if (r != SOCKET_ERROR) {
+        r = overlapped.InternalHigh;
+    }
+    if (r == -1) {
+        switch (errno) {
+        case WSAEWOULDBLOCK:
+            WSASetLastError(EAGAIN);
+            break;
+        }
+    }
+    return r;
+}
+#define read read_redis
+static ptrdiff_t write_redis(int fildes, const void *buf, size_t nbyte) {
+    WSABUF wsabuf = { (u_long)nbyte, (char *)buf };
+    WSAOVERLAPPED overlapped = { 0 };
+    SOCKET sock = _get_osfhandle(fildes);
+    int flags = 0;
+    ptrdiff_t r = WSASend(sock, &wsabuf, 1, NULL, flags, &overlapped, NULL);
+    if (r == SOCKET_ERROR && WSAGetLastError() == WSA_IO_PENDING) {
+        r = WSAWaitForMultipleEvents(1, &sock, FALSE, WSA_INFINITE, FALSE) == WSA_WAIT_EVENT_0 ? overlapped.InternalHigh : -1;
+    } else if (r != SOCKET_ERROR) {
+        r = overlapped.InternalHigh;
+    }
+    return r;
+}
+#define write write_redis
+#endif
diff --git deps/hiredis/net.c deps/hiredis/net.c
--- deps/hiredis/net.c
+++ deps/hiredis/net.c
@@ -47,1 +47,45 @@
+#ifdef _WINSOCKAPI_
+#define errno WSAGetLastError()
+static int socket_redis(int af, int type, int protocol) {
+    int r;
+    SOCKET sock = WSASocket(af, type, protocol, NULL, 0, WSA_FLAG_OVERLAPPED);
+    if (sock != -1) {
+        r = _open_osfhandle(sock, _O_BINARY | _O_RDWR);
+        if (r == -1) { closesocket(sock); }
+    } else {
+        r = -1;
+    }
+    return r;
+}
+#define socket socket_redis
+static int connect_redis(int socketfd, const struct sockaddr *address, socklen_t address_len) {
+    int r = connect(_get_osfhandle(socketfd), address, address_len);
+    if (r == -1) {
+        switch (errno) {
+        case WSAEINVAL:
+        case WSAEWOULDBLOCK:
+        case WSA_IO_PENDING:
+            WSASetLastError(EINPROGRESS);
+            break;
+        }
+    }
+    return r;
+}
+#define connect connect_redis
+static int ioctlsocket_redis(int socketfd, long cmd, u_long* argp) {
+    int r = ioctlsocket(_get_osfhandle(socketfd), cmd, argp);
+    return r;
+}
+#define ioctlsocket ioctlsocket_redis
+static int getsockopt_redis(int socketfd, int level, int optname, char* optval, int* optlen) {
+    return getsockopt(_get_osfhandle(socketfd), level, optname, optval, optlen);
+}
+#define getsockopt getsockopt_redis
+static int setsockopt_redis(int socketfd, int level, int optname, const char* optval, int optlen) {
+    return setsockopt(_get_osfhandle(socketfd), level, optname, optval, optlen);
+}
+#define setsockopt setsockopt_redis
+#else
 #include <errno.h>
+#endif
@@ -218,1 +258,5 @@
+#ifdef _WINSOCKAPI_
+            WSASetLastError(ETIMEDOUT);
+#else
             errno = ETIMEDOUT;
+#endif
@@ -245,1 +285,5 @@
+#ifdef _WINSOCKAPI_
+        WSASetLastError(err);
+#else
         errno = err;
+#endif
-- 
