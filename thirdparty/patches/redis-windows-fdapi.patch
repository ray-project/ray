diff --git src/Win32_Interop/Win32_FDAPI.cpp src/Win32_Interop/Win32_FDAPI.cpp
--- src/Win32_Interop/Win32_FDAPI.cpp
+++ src/Win32_Interop/Win32_FDAPI.cpp
@@ -43,1 +43,2 @@
+#if 0
 extern "C" {
@@ -75,1 +76,2 @@
 }
+#endif
@@ -1200,11 +1202,12 @@
 class Win32_FDSockMap {
 public:
+#if 0
     static Win32_FDSockMap& getInstance() {
         static Win32_FDSockMap instance; // Instantiated on first use. Guaranteed to be destroyed.
         return instance;
     }
+#endif
 
-private:
     Win32_FDSockMap() {
         InitWinsock();
-
+#if 0
@@ -1241,1 +1244,2 @@
+#endif
     }
@@ -1251,2 +1255,2 @@
 // guarantee global initialization
-static class Win32_FDSockMap& init = Win32_FDSockMap::getInstance();
+static Win32_FDSockMap init;
diff --git src/Win32_Interop/Win32_FDAPI.h src/Win32_Interop/Win32_FDAPI.h
--- src/Win32_Interop/Win32_FDAPI.h
+++ src/Win32_Interop/Win32_FDAPI.h
@@ -112,34 +112,193 @@
+#ifdef __cplusplus
+extern "C"
+{
+#endif
+
 // API prototypes must match the unix implementation
 typedef int (*fdapi_pipe)(int pipefd[2]);
+        int   FDAPI_pipe (int pipefd[2]);
+static  int         pipe (int pipefd[2]) {
+    return FDAPI_pipe(pipefd);
+}
+
 typedef int (*fdapi_socket)(int af,int type,int protocol);
+        int   FDAPI_socket (int af,int type,int protocol);
+static  int         socket (int af,int type,int protocol) {
+    return FDAPI_socket(af, type, protocol);
+}
+
 typedef int (*fdapi_open)(const char * _Filename, int _OpenFlag, int flags);
+        int   FDAPI_open (const char * _Filename, int _OpenFlag, int flags);
+static  int         open (const char * _Filename, int _OpenFlag, int flags) {
+    return FDAPI_open(_Filename, _OpenFlag, flags);
+}
+
 typedef int (*fdapi_accept)(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
+        int   FDAPI_accept (int sockfd, struct sockaddr *addr, socklen_t *addrlen);
+static  int         accept (int sockfd, struct sockaddr *addr, socklen_t *addrlen) {
+    return FDAPI_accept(sockfd, addr, addrlen);
+}
+
 typedef int (*fdapi_setsockopt)(int sockfd, int level, int optname,const void *optval, socklen_t optlen);
+        int   FDAPI_setsockopt (int sockfd, int level, int optname,const void *optval, socklen_t optlen);
+static  int         setsockopt (int sockfd, int level, int optname,const void *optval, socklen_t optlen) {
+    return FDAPI_setsockopt(sockfd, level, optname, optval, optlen);
+}
+
 typedef int (*fdapi_fcntl)(int fd, int cmd, int flags);
+        int   FDAPI_fcntl (int fd, int cmd, int flags);
+static  int         fcntl (int fd, int cmd, int flags) {
+    return FDAPI_fcntl(fd, cmd, flags);
+}
+
 typedef int (*fdapi_poll)(struct pollfd *fds, nfds_t nfds, int timeout);
+        int   FDAPI_poll (struct pollfd *fds, nfds_t nfds, int timeout);
+static  int         poll (struct pollfd *fds, nfds_t nfds, int timeout) {
+    return FDAPI_poll(fds, nfds, timeout);
+}
+
 typedef int (*fdapi_getsockopt)(int sockfd, int level, int optname, void *optval, socklen_t *optlen);
+        int   FDAPI_getsockopt (int sockfd, int level, int optname, void *optval, socklen_t *optlen);
+static  int         getsockopt (int sockfd, int level, int optname, void *optval, socklen_t *optlen) {
+    return FDAPI_getsockopt(sockfd, level, optname, optval, optlen);
+}
+
 typedef int (*fdapi_connect)(int sockfd, const struct sockaddr *addr, size_t addrlen);
+        int   FDAPI_connect (int sockfd, const struct sockaddr *addr, size_t addrlen);
+static  int         connect (int sockfd, const struct sockaddr *addr, size_t addrlen) {
+    return FDAPI_connect(sockfd, addr, addrlen);
+}
+
 typedef ssize_t (*fdapi_read)(int fd, void *buf, size_t count);
+        ssize_t   FDAPI_read (int fd, void *buf, size_t count);
+static  ssize_t         read (int fd, void *buf, size_t count) {
+    return FDAPI_read(fd, buf, count);
+}
+
 typedef ssize_t (*fdapi_write)(int fd, const void *buf, size_t count);
+        ssize_t   FDAPI_write (int fd, const void *buf, size_t count);
+static  ssize_t         write (int fd, const void *buf, size_t count) {
+    return FDAPI_write(fd, buf, count);
+}
+
 typedef int (*fdapi_fsync)(int fd);
+        int   FDAPI_fsync (int fd);
+static  int         fsync (int fd) {
+    return FDAPI_fsync(fd);
+}
+
 typedef int (*fdapi_listen)(int sockfd, int backlog);
+        int   FDAPI_listen (int sockfd, int backlog);
+static  int         listen (int sockfd, int backlog) {
+    return FDAPI_listen(sockfd, backlog);
+}
+
 typedef int (*fdapi_ftruncate)(int fd, PORT_LONGLONG length);
+        int   FDAPI_ftruncate (int fd, PORT_LONGLONG length);
+static  int         ftruncate (int fd, PORT_LONGLONG length) {
+    return FDAPI_ftruncate(fd, length);
+}
+
 typedef int (*fdapi_bind)(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
+        int   FDAPI_bind (int sockfd, const struct sockaddr *addr, socklen_t addrlen);
+static  int         bind (int sockfd, const struct sockaddr *addr, socklen_t addrlen) {
+    return FDAPI_bind(sockfd, addr, addrlen);
+}
+
 typedef u_short (*fdapi_htons)(u_short hostshort);
+        u_short   FDAPI_htons (u_short hostshort);
+static  u_short         htons (u_short hostshort) {
+    return FDAPI_htons(hostshort);
+}
+
 typedef u_long (*fdapi_htonl)(u_long hostlong);
+        u_long   FDAPI_htonl (u_long hostlong);
+static  u_long         htonl (u_long hostlong) {
+    return FDAPI_htonl(hostlong);
+}
+
 typedef u_short (*fdapi_ntohs)(u_short netshort);
+        u_short   FDAPI_ntohs (u_short netshort);
+static  u_short         ntohs (u_short netshort) {
+    return FDAPI_ntohs(netshort);
+}
+
 typedef int (*fdapi_getpeername)(int sockfd, struct sockaddr *addr, socklen_t * addrlen);
+        int   FDAPI_getpeername (int sockfd, struct sockaddr *addr, socklen_t * addrlen);
+static  int         getpeername (int sockfd, struct sockaddr *addr, socklen_t * addrlen) {
+    return FDAPI_getpeername(sockfd, addr, addrlen);
+}
+
 typedef int (*fdapi_getsockname)(int sockfd, struct sockaddr* addrsock, int* addrlen );
+        int   FDAPI_getsockname (int sockfd, struct sockaddr* addrsock, int* addrlen );
+static  int         getsockname (int sockfd, struct sockaddr* addrsock, int* addrlen ) {
+    return FDAPI_getsockname(sockfd, addrsock, addrlen);
+}
+
 typedef void (*fdapi_freeaddrinfo)(struct addrinfo *ai);
+        void   FDAPI_freeaddrinfo (struct addrinfo *ai);
+static  void         freeaddrinfo (struct addrinfo *ai) {
+    return FDAPI_freeaddrinfo(ai);
+}
+
 typedef int (*fdapi_getaddrinfo)(const char *node, const char *service, const struct addrinfo *hints, struct addrinfo **res);
+        int   FDAPI_getaddrinfo (const char *node, const char *service, const struct addrinfo *hints, struct addrinfo **res);
+static  int         getaddrinfo (const char *node, const char *service, const struct addrinfo *hints, struct addrinfo **res) {
+    return FDAPI_getaddrinfo(node, service, hints, res);
+}
+
 typedef const char* (*fdapi_inet_ntop)(int af, const void *src, char *dst, size_t size);
+        const char*   FDAPI_inet_ntop (int af, const void *src, char *dst, size_t size);
+static  const char*         inet_ntop (int af, const void *src, char *dst, size_t size) {
+    return FDAPI_inet_ntop(af, src, dst, size);
+}
+
 typedef int (*fdapi_inet_pton)(int af, const char * src, void *dst);
+        int   FDAPI_inet_pton (int af, const char * src, void *dst);
+static  int         inet_pton (int af, const char * src, void *dst) {
+    return FDAPI_inet_pton(af, src, dst);
+}
+
 typedef int (*fdapi_select)(int nfds, fd_set *readfds, fd_set *writefds,fd_set *exceptfds, struct timeval *timeout);
+        int   FDAPI_select (int nfds, fd_set *readfds, fd_set *writefds,fd_set *exceptfds, struct timeval *timeout);
+static  int         select (int nfds, fd_set *readfds, fd_set *writefds,fd_set *exceptfds, struct timeval *timeout) {
+    return FDAPI_select(nfds, readfds, writefds, exceptfds, timeout);
+}
+
 typedef u_int (*fdapi_ntohl)(u_int netlong);
+        u_int   FDAPI_ntohl (u_int netlong);
+static  u_int         ntohl (u_int netlong) {
+    return FDAPI_ntohl(netlong);
+}
+
 typedef int (*fdapi_isatty)(int fd);
+        int   FDAPI_isatty (int fd);
+static  int         isatty (int fd) {
+    return FDAPI_isatty(fd);
+}
+
 typedef int (*fdapi_access)(const char *pathname, int mode);
+        int   FDAPI_access (const char *pathname, int mode);
+static  int         access (const char *pathname, int mode) {
+    return FDAPI_access(pathname, mode);
+}
+
 typedef u_int64 (*fdapi_lseek64)(int fd, u_int64 offset, int whence);
+        u_int64   FDAPI_lseek64 (int fd, u_int64 offset, int whence);
+static  u_int64         lseek64 (int fd, u_int64 offset, int whence) {
+    return FDAPI_lseek64(fd, offset, whence);
+}
+
 typedef int (*fdapi_fstat)(int fd, struct __stat64 *buffer);
+        int   FDAPI_fstat (int fd, struct __stat64 *buffer);
+static  int         fstat (int fd, struct __stat64 *buffer) {
+    return FDAPI_fstat(fd, buffer);
+}
+
 
 typedef BOOL fnWSIOCP_CloseSocketStateRFD(int rfd);
 
+#ifdef __cplusplus
+}
+#endif
+
@@ -156,1 +315,2 @@
 // API replacements
+#if 0
@@ -187,2 +347,3 @@
+#endif
 
 // Other FD based APIs
-- 
