// This file contains default values of all Ray configurations.
// Users should define their own 'ray.conf' file in the classpath,
// or use Java properties, to overwrite these values.

ray {
  // ----------------------
  // Basic configurations
  // ----------------------

  // Address of the Ray cluster to connect to.
  // If not provided, a new Ray cluster will be created.
  address: ""

  // Run mode, available options are:
  //
  // `LOCAL`: Ray is running in one single Java process, without Raylet backend,
  //          object store, and GCS. It's useful for debug.
  // `CLUSTER`: Ray is running on one or more nodes, with multiple processes.
  run-mode: CLUSTER

  // Configuration items about job.
  job {
    // If worker.mode is DRIVER, specify the job id.
    // If not provided, a random id will be used.
    id: ""
    // A list of directories or jar files separated by colon that specify the
    // search path for user code. This will be used as `CLASSPATH` in Java,
    // and `PYTHONPATH` in Python.
    code-search-path: ""
    /// The jvm options for java workers of the job.
    jvm-options: []

    runtime-env: {
         // Environment variables to be set on worker processes in current job.
         "env-vars": {
           // key1: "value11"
           // key2: "value22"
         }

         // The packages that for this job. Dashboard agent will download from the
         // urls and then the workers of this job will add them to classpath.
         // Note that it supports both jar packages and zip packages.
         "jars": [
            // "https://my_host/a.jar",
            // "https://my_host/b.jar"
         ]
    }

    /// The namespace of this job. It's used for isolation between jobs.
    /// Jobs in different namespaces cannot access each other.
    /// If it's not specified, a randomized value will be used instead.
    namespace: ""

    // The default lifetime of actors in this job.
    // If the lifetime of an actor is not specified explicitly at runtime, this
    // default value will be applied.
    // The available values are `NON_DETACHED` and `DETACHED`.
    default-actor-lifetime: NON_DETACHED
  }

  // Configurations about raylet
  raylet {
    startup-token: 0
  }

  // Configurations about logging.
  logging {
    // Level of logging for Java workers.
    level: INFO
    // Pattern of log messages.
    pattern: "%d{yyyy-MM-dd HH:mm:ss,SSS} %p %c{1} [%t]: %m%n"
    // Root directory of the log files.
    // If this is not set, the default one will be `${temp-dir}/session_xxx/logs`.
    dir: ""
    // Maximum size that a log file is allowed to reach before being rolled over to backup files.
    max-file-size: 500MB
    // Maximum number of backup files to keep around.
    max-backup-files: 10

    // Configuration for the customized loggers.
    // For example, if you want to customize the file name and the log pattern for a logger
    // named "userlogger", you can add the following configuration, and then you will get
    // the custom log file `userlogger.log`.
    loggers: [
//    {
//         name: "userlogger"
//         file-name: "userlogger"
//         pattern: "%d{yyyy-MM-dd HH:mm:ss,SSS} %p %c{1} [%t]: %m%n"
//     }
    ]

  }

  // ----------------------
  // Redis configurations
  // ----------------------
  redis {
    // The password used to connect to the redis server.
    password: "5241590000000000"
  }

  // Below args will be appended as parameters of the `ray start` command.
  // It takes effect only if Ray head is started by a driver.
  head-args: []
}
