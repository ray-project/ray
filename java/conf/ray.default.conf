// This file contains default values of all Ray configurations.
// Users should define their own 'ray.conf' file in the classpath,
// or use Java properties, to overwrite these values.

ray {
  // ----------------------
  // Basic configurations
  // ----------------------

  // This is the path to the directory where Ray is installed, e.g.,
  // something like /home/ubmutu/ray. This can be an absolute path or
  // a relative path from the current working directory.
  // by default, use current working directory
  home: "."

  // IP of this node. if not provided, IP will be automatically detected.
  node-ip: ""

  // ray mode: WORKER or DRIVER
  mode: DRIVER

  // Run mode, available options are:
  //
  // `SINGLE_PROCESS`: Ray is running in one single Java process, without Raylet backend,
  //                   object store, and GCS. It's useful for debug.
  // `CLUSTER`: Ray is running on one or more nodes, with multiple processes.
  run-mode: CLUSTER

  // Available resources on this node, for example "CPU:4,GPU:0".
  resources: "CPU:4,GPU:0"

    // Configuration items about driver.
    driver {
      // If worker.mode is DRIVER, specify the driver id.
      // If not provided, a random id will be used.
      id: ""
      // If worker.mode is WORKER, it means that worker will load
      // the resources from this path to execute tasks.
      resource-path: /tmp/ray/driver/resource
    }

  // Root dir of log files.
  // for rayley, object-store, redis-server and workers
  log-dir: /tmp/ray/logs

  // all worker configurations
  worker {
    // Custom `java.library.path`
    // Note, do not use `dir1:dir2` format, put each dir as a list item.
    library.path: [
      ${ray.home}/build/src/local_scheduler,
      ${ray.home}/build/src/plasma
    ]

    // Custom classpath.
    // Note, do not use `dir1:dir2` format, put each dir as a list item.
    classpath: [
      ${ray.home}/java/conf,
      # for jars, when we debug, we have to do mvn package again and again,
      # so we add the target/classes path before lib/*, to avoid re-package
      ${ray.home}/java/runtime/target/classes,
      ${ray.home}/java/test/target/classes,
      ${ray.home}/java/api/target/classes,
      ${ray.home}/java/tutorial/target/classes,
      ${ray.home}"/java/assembly/lib/*"
    ]

    // worker custom jvm properties
    jvm-parameters: []
  }

  // ----------------------
  // Redis configurations
  // ----------------------
  redis {
    // The address of the redis server to connect, in format `ip:port`.
    // If not provided, Ray processes will be started locally, including
    // Redis server, Raylet and object store.
    address: ""
    // If `redis.server` isn't provided, which port we should use to start redis server.
    head-port: 6379
    // If `redis.server` isn't provided, how many Redis shards we should start in addition to the
    // primary Redis shard. The ports of these shards will be `head-port + 1`, `head-port + 2`, etc.
    shard-number: 1
    // redis-server binary file path
    redis-server: ${ray.home}/build/src/common/thirdparty/redis/src/redis-server
    // redis-module so file
    redis-module: ${ray.home}/build/src/common/redis_module/libray_redis_module.so
  }

  // ----------------------------
  // Object store configurations
  // ----------------------------
  object-store {
    // RPC socket name of object store
    socket-name: /tmp/ray/sockets/object_store
    // Initial size of the object store.
    size: 10 MB
    // plasma store server binary file path
    plasma-store: ${ray.home}/build/src/plasma/plasma_store_server
  }

  // ----------------------------
  // Raylet configurations
  // ----------------------------
  raylet {
    // RPC socket name of Raylet
    socket-name: /tmp/ray/sockets/raylet
    // raylet binary file path
    raylet-bin: ${ray.home}/build/src/ray/raylet/raylet
  }

}
